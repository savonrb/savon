<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- The following processing instruction uses an XSLT file to transform the wsdl document into a human-readable html document when viewed in a browser.
        --><?xml-stylesheet type="text/xsl" href="wsdl-viewer.xsl"?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="uri:common.ws.sdk.edialog.com" xmlns:sch1="uri:audience.ws.sdk.edialog.com" xmlns:sch10="uri:ereport.ws.sdk.edialog.com" xmlns:sch11="uri:exporter.ws.sdk.edialog.com" xmlns:sch12="uri:grid.ws.sdk.edialog.com" xmlns:sch13="uri:insightbuilder.ws.sdk.edialog.com" xmlns:sch14="uri:urlmanagement.ws.sdk.edialog.com" xmlns:sch15="uri:mailingcontrol.ws.sdk.edialog.com" xmlns:sch16="uri:mailing.ws.sdk.edialog.com" xmlns:sch17="uri:realtimemessaging.ws.sdk.edialog.com" xmlns:sch18="uri:realtimemessagingconfiguration.ws.sdk.edialog.com" xmlns:sch19="uri:udf.ws.sdk.edialog.com" xmlns:sch2="uri:audiencetransfer.ws.sdk.edialog.com" xmlns:sch20="uri:user.ws.sdk.edialog.com" xmlns:sch3="uri:campaign.ws.sdk.edialog.com" xmlns:sch4="uri:cell.ws.sdk.edialog.com" xmlns:sch5="uri:content.ws.sdk.edialog.com" xmlns:sch6="uri:cp.ws.sdk.edialog.com" xmlns:sch7="uri:customerStatus.ws.sdk.edialog.com" xmlns:sch8="uri:dataupload.ws.sdk.edialog.com" xmlns:sch9="uri:deliverability.ws.sdk.edialog.com" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="uri:ws.sdk.edialog.com" targetNamespace="uri:ws.sdk.edialog.com">
  <wsdl:types>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:common="uri:common.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:common.ws.sdk.edialog.com">
<complexType name="UDFFilterType">
<annotation>
<documentation>Complex type that describes a filtering condition on a
				UDF.</documentation>
</annotation>
<sequence>
<element name="name" type="string">
<annotation>
<documentation>The category name representing a particular UDF that
						matches an entry in the dictionary (e.g. "Genre" ) or
						the string UDF followed by the number (e.g. "UDF3").
					</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" name="value" type="string">
<annotation>
<documentation>A set of values expected for a UDF.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<complexType name="DateRangeReportRequestType">
<sequence>
<element name="startDate" nillable="true" type="dateTime">
<annotation>
<documentation>
						The start date of the range to be examined
					</documentation>
</annotation>
</element>
<element name="endDate" nillable="true" type="dateTime">
<annotation>
<documentation>
						The end date of the ranged to be examined
					</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="dimension" type="common:DimensionType">
<annotation>
<documentation>
						The name of a dimension (e.g. "Cell",
						"Domain",
						etc.)
					</documentation>
</annotation>
</element>
</sequence>
</complexType>
<complexType name="DateRangeReportResponseType">
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="dimension" type="string">
<annotation>
<documentation>
						The name of a dimension (e.g. "Cell",
						"Domain",
						etc.)
					</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="record" type="common:RecordType">
<annotation/>
</element>
</sequence>
</complexType>
<complexType name="RecordType">
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="dimensionValue" type="string"/>
<element name="count" type="int"/>
</sequence>
</complexType>
<complexType name="DimensionType">
<attribute name="name" type="string" use="required"/>
<attribute name="filterValue" type="string" use="optional"/>
</complexType>
</schema>
    <xsd:schema xmlns="uri:audience.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:audience.ws.sdk.edialog.com">
<xsd:element name="createAudience">
<xsd:annotation>
<xsd:documentation>
            Creates a new audience, either membership or suppression,
            based on the specified type, and using the specified class
            identifier (which defines which member fields to include).
            See listAudienceClasses.
            Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Required. Either "Membership" or "Suppression" to indicate the intended use of this list.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="classId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        Optional. Identifies an audience class in the data
                        dictionary, which binds an audience list to a specific
                        set of member columns in the master database.
                        See audienceClassType.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="singleUse" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>
                        Required. Specifies whether you intend to use this
                        list more than once, or only for a one-time mailing.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Required. The name of the audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. Describes the nature and purpose of the audience list.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. List/array of strings containing
                        user-defined field (UDF)
                        values with which to categorize the audience.
                        Each string can be up to 30 characters.
                        The order of the UDF values was defined by your
                        account team as part
                        of your initial setup process.
                        e-Dialog recommends that you use only the UDF
                        values that were defined
                        at setup time for categorization purposes.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. A caller-supplied key to keep with the created audience.
                        Throws an exception if this value is provided (non-null, non-empty)
                        and the key already exists.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="createAudienceResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="resultAudienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the newly created audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateAudience">
<xsd:annotation>
<xsd:documentation>
                Updates the properties of an audience.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the audience to update.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. The name of the audience.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. Describes the nature and purpose of the audience list.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="0" name="udf" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional list/array of strings containing user-defined field (UDF)
                        values with which to categorize the object. Each string can be up to
                        30 characters. The order of the UDF values was defined by your account
                        team as part of your initial setup process. e-Dialog recommends
                        that you use only the UDF values that were defined at setup time for
                        categorization purposes.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateAudienceResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="listAudienceClasses">
<xsd:annotation>
<xsd:documentation>
                Lists all audience classes available in the master database.
                An audience class binds an audience list to a specific set of member columns in the master database.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="listAudienceClassesResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="class" type="audienceClassType">
<xsd:annotation>
<xsd:documentation>A list/array of audienceClassType elements, each of which describes a class available in the master database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listAudiences">
<xsd:annotation>
<xsd:documentation>
                (Deprecated. Use the service listAudiencesByFilter)
        		Lists the available audiences, using the specified filter settings. Does not list audiences that have a status of ARCHIVE, ARCHIVED, INACTIVE, or DELETED.
        		The filter* arguments are optional arguments used to filter the results. Dates in date ranges are inclusive.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="filterType" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. The type of mailing to return. One of the following: "Membership", "Suppression" or "Proof". Leave null/blank to search all audience types.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterNameExpression" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterStartCreateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. Lets you search for audiences created in the specified date range. Leave this null if you do not want to include it as part of the search criteria.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterEndCreateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. Lets you search for audiences created in the specific  date range. Leave this  null if you do not want to include it as part of the search criteria.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. A list/array of mailing attribute names (in any order)
                        used to sort the results: "name", "id", or "createDate". If no
                        sortBy criteria is provided, the results are sorted by "createDate".
                        Note: it probably doesn’t make sense to sort for campaigns by more than one
                        field at a time; however multiple sort-by criteria are allowed for
                        consistency with mailing and cell functions.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The maximum number of items to return each time you call the list function (the page size). Must be a positive integer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. Used for pagination of results. Indicates which page number to return, where each page (list function call) returns the number of items specified by pageSize.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listAudiencesResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceList" type="audienceListType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listAudiencesByFilter">
<xsd:annotation>
<xsd:documentation>
                Lists the available audiences using the specified filter settings.
                Does not list audiences that have a status of DELETED. The filter* arguments are optional arguments
                used to filter the results. Dates in date ranges are inclusive.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="filterType" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. The type of mailing to return. One of the following: "Membership", "Suppression" or "Proof". Leave null/blank to search all audience types.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterNameExpression" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterStartCreateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. Lets you search for audiences created in the specified date range. Leave this null if you do not want to include it as part of the search criteria.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterEndCreateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. Lets you search for audiences created in the specific  date range. Leave this  null if you do not want to include it as part of the search criteria.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterStartUpdateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. Lets you search for audiences updated in the specified date range. Leave this null if you do not want to include it as part of the search criteria.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterEndUpdateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. Lets you search for audiences updated in the specific  date range. Leave this  null if you do not want to include it as part of the search criteria.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. A list/array of mailing attribute names (in any order)
                        used to sort the results: "name", "id", or "createDate", "updateDate". If no
                        sortBy criteria is provided, the results are sorted by "createDate".
                        Note: it probably doesn’t make sense to sort for campaigns by more than one
                        field at a time; however multiple sort-by criteria are allowed for
                        consistency with mailing and cell functions.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The maximum number of items to return each time you call the list function (the page size). Must be a positive integer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. Used for pagination of results. Indicates which page number to return, where each page (list function call) returns the number of items specified by pageSize.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listAudiencesByFilterResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceList" type="audienceListWithStatusType">
<xsd:annotation>
<xsd:documentation>List/array of audiences that meet the criteria specified in the filters.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="audienceDetailType">
<xsd:annotation>
<xsd:documentation>Complex type that describes an audience.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The intended use of the audience. Either "Membership" or "Suppression",
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceClassId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of an audience class in the data dictionary, which binds an audience list to a specific set of member columns in the master database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="singleUse" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation> Whether the audience was created as a single-use audience or a reusable audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Describes the nature and purpose of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of strings containing user-defined field (UDF) values used to categorize the object. Each string can be up to 30 characters. The order of the UDF values was defined by your account team as part of your initial setup process.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the audience was created.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the audience was most recently updated.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ibExposed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the audience list is available in InsightBuilder. True if it is available.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A user-supplied alternate key to the audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="lookupAudienceById">
<xsd:annotation>
<xsd:documentation>
                Retrieves complete information about an audience based on the ID.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the audience to look up.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupAudienceByIdResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audience" type="audienceDetailType">
<xsd:annotation>
<xsd:documentation>Information for the audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupAudienceByIds">
<xsd:annotation>
<xsd:documentation>
                Retrieves complete information about an audience based on the a list of Audience IDs.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audienceId" nillable="true" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of audience IDst.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupAudienceByIdsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audience" nillable="true" type="audienceDetailType">
<xsd:annotation>
<xsd:documentation>
	                        	A list/array of audience information for the specified audience IDs.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupAudienceByAlternateKey">
<xsd:annotation>
<xsd:documentation>
                Looks up full information about an audience based on the alternate key.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="alternateKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Required. The value of the alternate key (user-defined identifier) of the audience to look up.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupAudienceByAlternateKeyResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audience" type="audienceDetailType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="audienceClassType">
<xsd:annotation>
<xsd:documentation>Complex type. An audience class binds an audience list to a specific set of member columns in the master database.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="classId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID that identifies an audience class in the data dictionary, which binds an audience list to a specific set of member columns in the master database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the class.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="column" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of strings, each containing a data dictionary row identifier. Each data dictionary row describes a member column in the master database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="deleteAudience">
<xsd:annotation>
<xsd:documentation>
                Deletes an audience.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the audience to delete.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteAudienceResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:complexType name="audienceListType">
<xsd:annotation>
<xsd:documentation>Complex type that describes a list of audiences and includes a list/array of audienceOverviewType structures.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="currentPageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Currently displayed page of audiences.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The number of audience lists that exist in the database as of the most recent
                    listAudiencesRequest. You can use this number to page through the list.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of pages found by the most recent listAudiencesRequest. (See listAudiencesRequest.pageSize.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audience" type="audienceOverviewType">
<xsd:annotation>
<xsd:documentation>A list/array of audienceOverviewType complex types that includes information about each audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="audienceOverviewType">
<xsd:annotation>
<xsd:documentation>Complex type that describes an audience list.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Intended use of the audience. Either "Membership" or "Suppression".
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceClassId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of an audience class in the data dictionary, which binds an audience list to a specific set of member columns in the master database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="singleUse" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the audience was created as a single-use audience or a reusable audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of strings containing user-defined field (UDF) values used to categorize the object. Each string can be up to 30 characters. The order of the UDF values was defined by your account team as part of your initial setup process.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the audience was created.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the audience list was most recently updated.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A user-supplied key to identify the created audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="estimatedMemberCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of members of the audience as of the most recent data upload, or in the case of an Insight Builder audience,  the number of members at audience generation time.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="audienceListWithStatusType">
<xsd:annotation>
<xsd:documentation>Complex type that describes a list of audiences and includes a list/array of audienceOverviewType structures.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="currentPageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Currently displayed page of audiences.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The number of audience lists that exist in the database as of the most recent
                    listAudiencesRequest. You can use this number to page through the list.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of pages found by the most recent listAudiencesRequest. (See listAudiencesRequest.pageSize.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audienceWithStatus" type="audienceOverviewWithStatusType">
<xsd:annotation>
<xsd:documentation>A list/array of audienceOverviewType complex types that includes information about each audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="audienceOverviewWithStatusType">
<xsd:annotation>
<xsd:documentation>Complex type that describes an audience list.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Intended use of the audience. Either "Membership" or "Suppression".
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceStatus" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
            			Audience status can be Membership, Proof, Suppression
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceClassId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of an audience class in the data dictionary, which binds an audience list to a specific set of member columns in the master database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="singleUse" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the audience was created as a single-use audience or a reusable audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the audience.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of strings containing user-defined field (UDF) values used to categorize the object. Each string can be up to 30 characters. The order of the UDF values was defined by your account team as part of your initial setup process.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the audience was created.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the audience list was most recently updated.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A user-supplied key to identify the created audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="estimatedMemberCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of members of the audience as of the most recent data upload, or in the case of an Insight Builder audience,  the number of members at audience generation time.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="cloneAudience">
<xsd:annotation>
<xsd:documentation>
                Creates a copy of an audience list. This function does not copy membership data (users) into the new audience list.
                Instead, it creates an audience list that is empty.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the audience to clone.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="cloneAudienceResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="resultAudienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the newly created audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getMemberCount">
<xsd:annotation>
<xsd:documentation>
                Returns the actual member count and updates the audience with the current total.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the audience for which you want to compute the member count.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getMemberCountResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="memberCount" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of members in the specified audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:schema>
    <xsd:schema xmlns="uri:audiencetransfer.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:audiencetransfer.ws.sdk.edialog.com">
<xsd:element name="downloadAudience">
<xsd:annotation>
<xsd:documentation>Retrieves an audience. Introduced in e-Dialog Web Services 1.2.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the audience to download.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="column" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. The sets of columns to download. Null or empty array will download all columns (except those encrypted). To get all columns, leave this blank.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="option" type="OptionType">
<xsd:annotation>
<xsd:documentation>
Optional. A list/array of name-value pairs to modify the downloaded audience file. You can use these options to compress the audience file,
                        specify field and record separator characters, include non-standard columns, encrypt the audience file, and so on.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="downloadAudienceResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the downloaded audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="property" type="OptionType">
<xsd:annotation>
<xsd:documentation>
                            A set of name-value pairs with meta-data properties about the audience file.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceFile" type="xsd:base64Binary" xmime:expectedContentTypes="*/*">
<xsd:annotation>
<xsd:documentation>The SOAP attachment. If you use Java (Axis2 or JAX-WS) this is returned as a javax.activation.DataHandler. By default the attachment is compressed using the GZIP algorithm. </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="OptionType">
<xsd:annotation>
<xsd:documentation>Required. Complex type. </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the option or property. Options include COMPRESSION_METHOD, INCLUDE_CID, CHARACTER_ENCODING, FIELD_SEPARATOR, RECORD_SEPARATOR.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value for the option or property.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:campaign="uri:campaign.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:campaign.ws.sdk.edialog.com">
<element name="createCampaign">
<annotation>
<documentation>
                Creates a new campaign.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="name" type="string">
<annotation>
<documentation>
                        Required. The name of the campaign to create. The maximum length 
                        is 500 characters, but relatively short names are recommended 
                        because they appear in lists. The name cannot be empty or null.
                        </documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. Describes the nature and purpose of the campaign. 
                        Can be left blank. Maximum length is 4000 characters.
                        </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. List/array of strings containing user-defined field (UDF) 
                        values with which to categorize the object. Each string can be up 
                        to 30 characters. The order of the UDF values was defined by your 
                        account team as part of your initial setup process. e-Dialog recommends 
                        that you use only the UDF values that were defined at setup time for 
                        categorization purposes.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createCampaignResponse">
<annotation/>
<complexType>
<sequence>
<element name="resultCampaignId" type="int">
<annotation>
<documentation>The ID of the newly created campaign.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupCampaignById">
<annotation>
<documentation>
            Looks up an existing campaign by identifier. Returns a 
            campaignDetailType structure containing identifier, name, 
            description, creation date, modification date, and user-defined field values.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>Required. The ID of the campaign to look up.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupCampaignByIdResponse">
<annotation/>
<complexType>
<sequence>
<element name="campaign" type="campaign:campaignDetailType">
<annotation>
<documentation>                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteCampaign">
<annotation>
<documentation>
            Deletes a campaign. Throws an exception on failure (the 
            campaign does not exist, was previously deleted, or has any 
            mailings or cells that are in a state in which they cannot be 
            deleted (actively mailing or proofing).
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>Required. The ID of the campaign to delete.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteCampaignResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<complexType name="campaignDetailType">
<annotation>
<documentation>
            Complex structure including campaign identifier, name, description, 
            creation date, modification date, and user-defined field values.
            </documentation>
</annotation>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>The ID of the campaign.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the campaign.</documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>Describes the nature and purpose of the campaign.</documentation>
</annotation>
</element>
<element name="addDate" type="dateTime">
<annotation>
<documentation>The date the campaign was created.</documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>The date the campaign was last updated.</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="string">
<annotation>
<documentation>Up to five user-defined field (UDF) string values used to categorize the campaign. Each string can be up to 30 characters.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="updateCampaign">
<annotation>
<documentation>
            Updates specific properties of a campaign. Throws an exception if the campaign does not exist (or has been deleted).
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>Required. The ID of the campaign to modify.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="name" type="string">
<annotation>
<documentation>Optional. The name to assign to the campaign. The maximum length of a campaign name is 500 characters. An empty name (null or blank) causes an exception to be thrown.
                        </documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>Optional. Describes the nature and purpose of the campaign. Can be left blank. Maximum length is 4000 characters.</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" type="string">
<annotation>
<documentation>
                        Optional. List/array of strings containing user-defined field (UDF)
                        values with which to categorize the object. Each string can be up to
                        30 characters. The order of the UDF values was defined by your account
                        team as part of your initial setup process. e-Dialog recommends
                        that you use only the UDF values that were defined at setup time for
                        categorization purposes.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCampaignResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="listCampaigns">
<annotation>
<documentation>
                Returns a list of campaigns, including the ID, name, creation date, and user-defined field values.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. The start of a date range in which to search for campaigns.</documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. The end of a date range in which to search for campaigns.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="string">
<annotation>
<documentation>Optional. A list/array of campaign attribute names (in any order) used to sort the results: "name", "id", or "createDate". The default is "createDate".</documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. The maximum number of items to return each time you call the list function (the page size). Must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>Required. Used for pagination of results. Indicates which page number to return where each page (list function call) returns the number of items specified by pageSize. Must be a positive integer.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listCampaignsResponse">
<complexType>
<sequence>
<element name="campaignList" type="campaign:campaignListType">
<annotation/>
</element>
</sequence>
</complexType>
</element>
<complexType name="campaignListType">
<annotation>
<documentation>Complex type. A sequence of campaignOverviewType elements arranged  in pages. Each use gets the next page.</documentation>
</annotation>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned to the most recent listCampaignsRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of campaigns that exist in the database as of the most recent listCampaignsRequest. You can use this number to page through the list.
                    </documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found by the most recent listCampaignsRequest. (See listCampaignsRequest.pageSize.)</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="campaign" type="campaign:campaignOverviewType">
<annotation/>
</element>
</sequence>
</complexType>
<complexType name="campaignOverviewType">
<annotation>
<documentation>Complex type that includes the  identifier, name, creation date, and user-defined field values.</documentation>
</annotation>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>The ID of the campaign.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the campaign.</documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>Date the campaign was created.</documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>Date the campaign was updated.</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="string">
<annotation>
<documentation>Five user-defined field (UDF) string values used to categorize the campaign. Each string can be up to 30 characters. Some fields may be empty.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:cell="uri:cell.ws.sdk.edialog.com" xmlns:common="uri:common.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:cell.ws.sdk.edialog.com">
<import namespace="uri:common.ws.sdk.edialog.com"/>
<element name="createCell">
<annotation>
<documentation>
            Creates a new cell. Throws an exception if
            an alternateKey was provided and a cell with that key
            already exists or the domain name of the
            fromAddress is not included in the set of
            supported domain names and
            does not pass a basic validation check.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="mailingId" type="int">
<annotation>
<documentation>
                        Required. The ID of the mailing in which you
                        want to place the cell.
                         The ID must be a valid mailing identifier.
                        </documentation>
</annotation>
</element>
<element name="name" type="string">
<annotation>
<documentation>
                        Required. Specifies a name for the cell.
                        The cell name appears in reports but does
                        not appear in any part of a mailing sent
                        to an audience. Cell names cannot
                        contain underscore (_) or pound sign (#) characters.
                        </documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. Describes the nature and purpose of the cell.
                        The description does not appear in reports
                        or in any part of a mailing sent to an audience.
                        </documentation>
</annotation>
</element>
<element name="fromName" type="string">
<annotation>
<documentation>
                        Required. The quoted name part of the
                        from address. In the following address:
                        "Customer Support" &lt;support@example.com&gt;
                        the quoted name is the "Customer Support" part.
                        </documentation>
</annotation>
</element>
<element name="fromAddress" type="string">
<annotation>
<documentation>
                        Required. Specifies an e-mail address to use as the "from" address
                        in the mailing. The domain of the address should be in the set of supported domains (see listDomains),
                        although external domains are allowed if the client is handling responses. There are also deliverability
                        implications if the domain name is not configured correctly.
                        </documentation>
</annotation>
</element>
<element name="subject" type="string">
<annotation>
<documentation>
                        Required. Specifies the subject line to
                        appear in the outgoing e-mail. Limit subject
                        lines to fewer than 60 characters because
                        some e-mail clients truncate the text
                        after 60 characters.
                        </documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. A list/array of strings containing user-defined field (UDF) values with
                        which to categorize the object. Each string can be up to 30 characters. The order of the UDF
                        values was defined by your account team as part of your initial setup process; e-Dialog recommends
                        that you use only the UDF values that were defined at setup time for categorization purposes.
                        </documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. A value to use as a
                        unique key for the cell.Throws an exception
                        if a cell already exists with this key.
                        See lookupCellByAlternateKey.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createCellResponse">
<complexType>
<sequence>
<element name="resultCellId" type="int">
<annotation>
<documentation>
                        The ID of the newly created cell.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupCellById">
<annotation>
<documentation>
            Returns a full set of cell properties.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required.The ID of the cell to look up.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupCellByAlternateKey">
<annotation>
<documentation>
            Returns a full set of cell properties.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="alternateKey" type="string">
<annotation>
<documentation>
                        The alternate key of the cell to look up (
                        user-supplied value used as a unique key for the cell).
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupCellByIdResponse">
<complexType>
<sequence>
<element name="cell" type="cell:cellDetailType"/>
</sequence>
</complexType>
</element>
<element name="lookupCellByAlternateKeyResponse">
<complexType>
<sequence>
<element name="cell" type="cell:cellDetailType"/>
</sequence>
</complexType>
</element>
<complexType name="cellDetailType">
<annotation>
<documentation>Complex type that includes basic cell configuration information.</documentation>
</annotation>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>
                   The ID of the campaign that contains the mailing
                    that contains the cell.
                    </documentation>
</annotation>
</element>
<element name="mailingId" type="int">
<annotation>
<documentation>
                    The ID of the mailing that contains the cell.
                    </documentation>
</annotation>
</element>
<element name="cellId" type="int">
<annotation>
<documentation>The ID of  the cell.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the cell. The cell name appears in reports but does not appear in any part of a mailing sent to an audience. Cell names cannot contain an underscore (_) or a pound sign (#).</documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>Describes the nature and purpose of the cell. The cell description does not appear in reports or in any part of a mailing sent to an audience.</documentation>
</annotation>
</element>
<element name="fromName" nillable="true" type="string">
<annotation>
<documentation>The quoted name part of the from address. In the following address: "Customer Support" &amp;lt;support@example.com&amp;gt;, the quoted name is the "Customer Support" part.
                    </documentation>
</annotation>
</element>
<element name="fromAddress" nillable="true" type="string">
<annotation>
<documentation>An e-mail address to use as the "from" address in the mailing. The domain of the address should be in the set of supported domains (see listDomains), but external domains are allowed if the client is handling responses. Note that there are also deliverability implications if the domain name is not configured correctly.
                    </documentation>
</annotation>
</element>
<element name="subject" nillable="true" type="string">
<annotation>
<documentation>The subject line that will appear in the outgoing e-mail.
                    </documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="10" name="udf" nillable="true" type="string">
<annotation>
<documentation>A list/array of up to ten user-defined field values.
                    </documentation>
</annotation>
</element>
<element name="contentId" type="int">
<annotation>
<documentation>The ID of  the content object that is merged into the cell.</documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>The date when the cell was created.</documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>The date when the cell was most recently updated.</documentation>
</annotation>
</element>
<element name="firstMailedDate" nillable="true" type="dateTime">
<annotation>
<documentation>Date when the cell started mailing. Cells can be metered over a period of days and, in the case of triggers, a cell can be used over a window of time.</documentation>
</annotation>
</element>
<element name="status" type="string">
<annotation>
<documentation>
                    The status of the cell with respect to live proofing and
                    mailing (read-only). Setup indicates that the cell is in the process
                    of being set up. Lproofed indicates that live proofs have been sent.
                    Lproof Mailing indicates that live proofs are in the process of being
                    sent. Mailed indicates that final e-mail has been sent. Mailing
                    indicates that final e-mail is in the process of being sent.
                    </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="recipientAudience" type="int">
<annotation>
<documentation>A list/array of IDs of the audience lists to associate with the cell.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="suppressionAudience" type="int">
<annotation>
<documentation>A list/array of IDs of  the suppression lists to associate with the cell.</documentation>
</annotation>
</element>
<element name="unsubTemplate" nillable="true" type="int">
<annotation>
<documentation>The ID of the unsubscribe template to associate with the cell. Unsub templates are created by your account team as part of initial setup.</documentation>
</annotation>
</element>
<element name="unsubAudience" nillable="true" type="int">
<annotation>
<documentation>The ID of the unsubscribe audience list to associate with the cell.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="proofAddress" type="string">
<annotation>
<documentation>A list/array of e-mail addresses to send proofs.</documentation>
</annotation>
</element>
<element name="redirectDomain" nillable="true" type="string">
<annotation>
<documentation>Domain name (or CNAMES) to use for URL redirection. Check with your account team if you are unsure which one to use.</documentation>
</annotation>
</element>
<element name="redirectExpiration" type="int">
<annotation>
<documentation>The number of days to keep the URL redirection in effect. The default is 90 days. You can specify any amount up to 9999.</documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>The alternate key of the cell (caller-supplied value used as a unique key into the cell table).</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="updateCell">
<annotation>
<documentation>
                Updates a cell's main properties. Throws an exception if the domain
                name of the fromAddress is not included in the set of supported
                domain names and does not pass a basic validation check.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of  the cell to update.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="name" type="string">
<annotation>
<documentation>Optional. The name of the cell.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="description" type="string">
<annotation>
<documentation>Optional. Describes the nature and purpose of the cell.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="fromName" type="string">
<annotation>
<documentation>Optional. The string to use as the quoted name part of the from address. In the following
address: "Customer Support" &lt;support@example.com&gt;, the quoted name is the "Customer Support" part.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="fromAddress" type="string">
<annotation>
<documentation>Optional (Empty String and Null are ignored). An e-mail address to use as the "from" address in the mailing.
The domain of the address should be in the set of supported domains (see listDomains), but
external domains are allowed if the client is handling responses. Note that there are also
deliverability implications if the domain name is not configured correctly.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="subject" type="string">
<annotation>
<documentation>Optional. The subject line that appears in the outgoing e-mail.
                        </documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional. A list/array of strings containing user-defined field (UDF)
                        values with which to categorize the object. Each string can be up to
                        30 characters. The order of the UDF values was defined by your account
                        team as part of your initial setup process. e-Dialog recommends
                        that you use only the UDF values that were defined at setup time for
                        categorization purposes.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="deleteCell">
<annotation>
<documentation>
                Deletes the specified cell. You cannot delete a cell whose status is "Mailed."
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell to delete.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteCellResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="setCellAudiences">
<annotation>
<documentation>Sets the audience lists attached to a cell.
            The set of data fields available to custom publishing functions changes as audience lists change.
            If an audience change invalidates any existing field mappings, this function does not touch those mappings.
            However, adjusting audiences after setting field mappings may cause a cell to fail when mailed.
            Calling this function will always set the recipient and suppression audiences. 
            Call the service lookupCellById or lookupCellByAlternateKey to get the current set of recipient and suppression audiences associated
            with the cell.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="recipientAudience" type="int">
<annotation>
<documentation>Optional. A list/array of integers that identify the audiences
                        that should receive this message. The order
                        of appearance in the list can affect how
                        custom publishing works if there is overlap
                        between audience members and advanced custom
                        publishing rules are  in place. The first
                        audience that a member belongs to takes
                        precedence and duplicate membership on
                        subsequent audience lists is suppressed.
                        If you pass an empty list (or null in some language bindings), then the
                        cell audience list is cleared.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="suppressionAudience" type="int">
<annotation>
<documentation>
                            Optional. A list/array of IDs that identify the audience
                            lists containing members who should not receive the e-mail.
                            If you pass an empty list (or null in some language bindings), then the
                            cell suppresions list is cleared.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="setCellAudiencesResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="setCellUnsubRules">
<annotation>
<documentation>
                Binds a cell ID to an unsub template ID and an unsub audience ID (optional).
                The first unsub template available is used by default, and is
                configured for global unsubscribe. e-Dialog recommends that you
                modify these settings carefully. Verify that your unsubscribe
                policies are in compliance with e-Dialog regulations.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell for which
                        you want to specify the unsub rules.
                        </documentation>
</annotation>
</element>
<element name="unsubTemplate" type="int">
<annotation>
<documentation>Required. Identifies a
                        pre-configured template to use
                        (display) when users click the unsubscribe
                        link in this cell. See listUnsubTemplates.
                        </documentation>
</annotation>
</element>
<element name="unsubAudience" type="int">
<annotation>
<documentation>Reserved for future use.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="setCellUnsubRulesResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="setCellProofAddresses">
<annotation>
<documentation>
                Specifies the e-mail addresses to receive proofs of the specified cell.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell for
                        which you want to send proofs.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="proofAddress" type="string">
<annotation>
<documentation>Required. A list/array of e-mail addresses to receive proofs of the cell.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="setCellProofAddressesResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="getCellContentId">
<annotation>
<documentation>
                Returns the content ID assigned to the cell.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell for which
                        you want to look up the content ID.
                        See also lookupCellById and lookupCellByAlternateKey.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="getCellContentIdResponse">
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>The content ID associated with the specified cell.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listCells">
<annotation>
<documentation>
                (Deprecated. Use the service listCellsByFilter)
                Returns a list of cells filtered by the specified settings. 
                Returns only a limited set of cell properties. Filter settings are optional.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="filterMailingId" type="int">
<annotation>
<documentation>
                        Optional. A list/array of integers that specify the set of mailing
                          IDs to search through. Leaving this
                        empty/blank searches through all
                        mailings.
                        </documentation>
</annotation>
</element>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterCreateDateEnd, allows
                        you to search for cells created in a specified
                        date range. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterCreateDateStart, allows
                        you to search for cells created in a specified
                        date range. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter cells by when
                        the first piece of final/production mail was
                        sent. This allows you to search for mailings
                        sent in a specified date range. Leave these
                        arguments null if you do not want to include
                        them as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter cells by when
                        the last piece of final/production mail was
                        sent. This allows you to search for mailings
                        sent in a specified date range. Leave these
                        arguments null if you do not want to include
                        them as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="filterStatus" type="string">
<annotation>
<documentation>Optional. A list/array of strings
                        that specify a set of status values
                        to include in the search. Values include:
                        "Setup", "Merging", "Merged", "Proofing", "Proofed", "Mailing",
                        "Mailed", "Cancelled", "Failed", "Paused".
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="string">
<annotation>
<documentation>Optional. A list/array of cell attribute
                        names (in any order) used to sort the results:
                        "name", "id",  "createDate",
                        or "firstMailedDate".
                        If no sortBy criteria is provided, the default is to sort
                        by "createDate".
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. Specifies the maximum number of items to return each time you call the list function (the page size). The value must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>
                        Required. Used for pagination of results.
                        Indicates which page number to return where
                        each page (list function call) returns the
                        number of items specified by pageSize. Must
                        be a positive integer.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listCellsResponse">
<complexType>
<sequence>
<element name="cellList" type="cell:cellListType"/>
</sequence>
</complexType>
</element>
<complexType name="cellListType">
<annotation>
<documentation>Complex type. A list/array of cellOverviewType elements arranged in pages. Each use gets the next page.</documentation>
</annotation>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned to the most recent listCellsRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of cells that exist in the database as of the most recent listCellsRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found by the most recent listCellsRequest. (See listCellsRequest.pageSize.)</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="cell" type="cell:cellOverviewType">
<annotation/>
</element>
</sequence>
</complexType>
<element name="listCellsByFilter">
<annotation>
<documentation>
            Returns a list of cells filtered by the specified settings.
            Returns only a limited set of cell properties. Filter settings are optional.
            Introduced in e-Dialog Web Services 1.3.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="filterMailingId" type="int">
<annotation>
<documentation>
                        Optional. A list/array of integers that specify the set of mailing
                          IDs to search through. Leaving this
                        empty/blank searches through all
                        mailings.
                        </documentation>
</annotation>
</element>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterCreateDateEnd, allows
                        you to search for cells created in a specified
                        date range. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterCreateDateStart, allows
                        you to search for cells created in a specified
                        date range. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter cells by when
                        the first piece of final/production mail was
                        sent. This allows you to search for mailings
                        sent in a specified date range. Leave these
                        arguments null if you do not want to include
                        them as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter cells by when
                        the last piece of final/production mail was
                        sent. This allows you to search for mailings
                        sent in a specified date range. Leave these
                        arguments null if you do not want to include
                        them as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="filterStatus" type="string">
<annotation>
<documentation>Optional. A list/array of strings
                        that specify a set of status values
                        to include in the search. Values include:
                        "Setup", "Merging", "Merged", "Proofing", "Proofed", "Mailing",
                        "Mailed", "Cancelled", "Failed", "Paused".
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterUpdateDateEnd allows
                        you to search for cells created in a specified
                        date range according to the last update timestamp. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterUpdateDateStart allows
                        you to search for cells created in a specified
                        date range according to the last update timestamp. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="0" name="filterUdf" type="common:UDFFilterType">
<annotation>
<documentation>
                            Optional. List of filtering conditions on UDFs
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="string">
<annotation>
<documentation>Optional. A list/array of cell attribute
                        names (in any order) used to sort the results:
                        "name", "id",  "createDate",
                        or "firstMailedDate".
                        If no sortBy criteria is provided, the default is to sort
                        by "createDate".
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. Specifies the maximum number of items to return each time you call the list function (the page size). The value must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>
                        Required. Used for pagination of results.
                        Indicates which page number to return where
                        each page (list function call) returns the
                        number of items specified by pageSize. Must
                        be a positive integer.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listCellsByFilterResponse">
<complexType>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of cells that exist in the database.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="cell" type="cell:cellOverviewType">
<annotation/>
</element>
</sequence>
</complexType>
</element>
<complexType name="cellOverviewType">
<annotation>
<documentation>Complex type that describes cell properties.</documentation>
</annotation>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>
                    The ID of the campaign that contains the cell.
                    </documentation>
</annotation>
</element>
<element name="mailingId" type="int">
<annotation>
<documentation>
                    The ID of the mailing that contains the cell.
                    </documentation>
</annotation>
</element>
<element name="cellId" type="int">
<annotation>
<documentation>
                    The ID of the cell.
                    </documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the cell. The cell name appears in reports but does not appear in any part of a mailing sent to an audience. Cell names cannot contain an underscore (_) or a pound sign (#).</documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="10" name="udf" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. A list/array of up to five user-defined field
                        (UDF) string values with which to categorize the
                        cell. Each string can be up to 30
                        characters. e-Dialog recommends that you use
                        only the UDF string values that were defined by
                        your account team as part of your initial setup
                        process.
                    </documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>
                        Date when the cell was created.
                    </documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>
                        Date when the cell was last updated.
                    </documentation>
</annotation>
</element>
<element name="firstMailedDate" nillable="true" type="dateTime">
<annotation>
<documentation>Date when the cell started mailing. Cells can be metered over a period of days and, in the case of triggers, a cell can be used over a window of time.</documentation>
</annotation>
</element>
<element name="status" type="string">
<annotation>
<documentation>The status of the cell with respect to live proofing and
mailing (read-only). Setup indicates that the cell is in the process
of being set up. Lproofed indicates that live proofs have been sent.
Lproof Mailing indicates that live proofs are in the process of being
sent. Mailed indicates that final e-mail has been sent. Mailing
indicates that final e-mail is in the process of being sent.
                    </documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>The alternate key of the cell (caller-supplied value used as a unique key into the cell table).</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="cloneCell">
<annotation>
<documentation>
                Creates a clone of the specified cell and places the new cell in the specified mailing. Returns the new cell's ID.
                Throws an exception if the cell being cloned is in Proofing or Mailing status, does not exist, or has been deleted.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to clone.
                        </documentation>
</annotation>
</element>
<element name="mailingId" type="int">
<annotation>
<documentation>
                        ID of the mailing in which to place the clone of the cell.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="cloneCellResponse">
<complexType>
<sequence>
<element name="resultCellId" type="int">
<annotation>
<documentation>
                        The ID of the newly created cell.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listUnsubTemplates">
<annotation>
<documentation>
                Returns a list of the unsubscribe templates available to the cell.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence/>
</complexType>
</element>
<element name="listUnsubTemplatesResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="unsubTemplate" type="cell:unsubTemplateType">
<annotation/>
</element>
</sequence>
</complexType>
</element>
<complexType name="unsubTemplateType">
<annotation>
<documentation>Complex type that describes properties of an unsub template.</documentation>
</annotation>
<sequence>
<element name="templateId" type="int">
<annotation>
<documentation>The ID of the unsub template.</documentation>
</annotation>
</element>
<element name="name" type="string">
<annotation>
<documentation>The name of the unsub template.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="listDomains">
<annotation>
<documentation>
                Returns a list of domains that you can use in mailings. There are two different types/sets of domains:
                domains that can be used in from addresses, and domains that can be used for redirected links.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="domainType" type="string">
<annotation>
<documentation>The type of domain to list. Either "Redirect" or "From".</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listDomainsResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="domain" type="string">
<annotation>
<documentation>A list/array of available domain names.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listAvailableMeters">
<annotation>
<documentation>
                Returns a list of available metering schemes.
                Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType/>
</element>
<element name="listAvailableMetersResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="meter" type="string">
<annotation>
<documentation>A list/array of available metering schemes.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listFeederQueues">
<annotation>
<documentation>
                Returns a list of available feeder queues.
                Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType/>
</element>
<element name="listFeederQueuesResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="queueName" type="string">
<annotation>
<documentation>A list/array of feeder queues.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listForwardToFriendTemplates">
<annotation>
<documentation>
                Returns a list of available Forward-to-a-Friend template names.
                Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType/>
</element>
<element name="listForwardToFriendTemplatesResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="templateName" type="string">
<annotation>
<documentation>A list/array of Forward-to-a-Friend templates.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listWebAnalyticsTokens">
<annotation>
<documentation>Returns a list of available web analytics vendors and their tokens. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType/>
</element>
<element name="listWebAnalyticsTokensResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="webAnalyticsToken" type="cell:webAnalyticsTokenType">
<annotation/>
</element>
</sequence>
</complexType>
</element>
<complexType name="webAnalyticsTokenType">
<annotation>
<documentation>Complex type that describes web analytics token properties.</documentation>
</annotation>
<sequence>
<element name="tokenId" type="int">
<annotation>
<documentation>Unique identifier that enables looking up the query string.</documentation>
</annotation>
</element>
<element name="vendor" type="string">
<annotation>
<documentation>Name of the web analytics vendor.</documentation>
</annotation>
</element>
<element name="queryString" type="string">
<annotation>
<documentation>String that is appended to every link in the cell. Used to track recipient activity in eReports.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="updateCellAdvancedOptions">
<annotation>
<documentation>Lets you modify advanced cell configuration options, including the domains for handling unsubscribes and redirects,
 redirect expiration time, selection of Forward-to-a-Friend template, and error and event mailing. Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="contentFormatText" type="string">
<annotation>
<documentation>Optional. The content format to send when a recipient  prefers to receive messages as text.
                            The value must be either "TEXT" or "MULTIPART".
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="contentFormatHTML" type="string">
<annotation>
<documentation>Optional. The content format to send when the recipient prefers to receive messages in HTML format.
The value must be "TEXT", "HTML" or "MULTIPART".
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="contentFormatNoPreference" type="string">
<annotation>
<documentation>Optional. The content format to send when a recipient has no preference on format to
receive messages. The value must be either "TEXT" or "MULTIPART".
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="unsubDNS" type="string">
<annotation>
<documentation>Optional. The domain name for unsubscribe links. It must match a name of the
available domains provided by the listDomains() function.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="redirectDNS" type="string">
<annotation>
<documentation>Optional. The domain name for the redirected links in the cell. It must match a name of the available
domains provided by listDomains function.
                        </documentation>
</annotation>
</element>
<element name="redirectExpirationDays" nillable="true" type="int">
<annotation>
<documentation>Optional. The number of days after which redirect URLs in the cell expire.</documentation>
</annotation>
</element>
<element minOccurs="0" name="forwardToFriendTemplateName" type="string">
<annotation>
<documentation>Optional. The name of the Forward-to-a-Friend (F2F) template for the cell.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="errorNotificationEmailAddress" type="string">
<annotation>
<documentation>Optional. A list/array of e-mail addresses that receive all notifications.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="eventNotificationEmailAddress" type="string">
<annotation>
<documentation>Optional. A list/array of e-mail addresses that receive only process notifications.
These events are a subset of the error notifications.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellAdvancedOptionsResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="updateCellConversionTracking">
<annotation>
<documentation>Sets the cookie lifetime for tracking customer activity on the client's website. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element name="cookieLifeTime" type="string">
<annotation>
<documentation>Cookie lifetime. One of "NONE", "SESSION", "PERSISTENT", "BOTH", "DOMAIN".</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellConversionTrackingResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="updateCellMetering">
<annotation>
<documentation>Sets the metering scheme to use when the cell is mailed. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element name="meterName" type="string">
<annotation>
<documentation>The name of the preconfigured metering scheme. You can get the list of preconfigured metering schemes with the listAvailableMeters() function.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellMeteringResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="updateCellHeaders">
<annotation>
<documentation>
                Assigns the specified e-mail headers to a cell. The headers are
                included in each message sent through the cell. Headers can
                contain merge symbols.
                Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element name="headers" type="string">
<annotation>
<documentation>Additional e-mail headers. Must conform to the scheme name1=value1&amp;name2=value2 </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellHeadersResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="getGoodMailHeader">
<annotation>
<documentation>
            (Deprecated. GoodMail no longer exists.)
            Returns e-mail headers for use in GoodMail. GoodMail provides a way to guarantee the delivery of a message to an inbox.
You can use the results of this function as the parameter to updateCellHeaders(). Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="transactional" type="boolean">
<annotation>
<documentation>Whether to return headers for transactional or promotional e-mail. If true, returns  transactional headers.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="getGoodMailHeaderResponse">
<complexType>
<sequence>
<element name="header" type="string">
<annotation>
<documentation>The header to use in GoodMail.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellFeederQueue">
<annotation>
<documentation>Assigns the feeder configuration to a cell. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element name="feederQueueName" type="string">
<annotation>
<documentation>The name of the preconfigured feeder configuration.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellFeederQueueResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="updateCellWebAnalytics">
<annotation>
<documentation>Assigns the specified web analytics token to a cell. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element name="tokenId" type="int">
<annotation>
<documentation>Unique identifier used to find the original query string to enable updating it to the new query string.</documentation>
</annotation>
</element>
<element name="queryString" type="string">
<annotation>
<documentation>HTTP query string to append to URLs. Must conform to the scheme name1=value1&amp;name2=value2.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellWebAnalyticsResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="lookupCellAdvancedOptionsById">
<annotation>
<documentation>Returns the advanced cell configuration settings for the cell. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to look up.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupCellAdvancedOptionsByIdResponse">
<complexType>
<sequence>
<element name="cell" type="cell:cellAdvancedDetailType"/>
</sequence>
</complexType>
</element>
<element name="updateCellDropDate">
<annotation>
<documentation>Updates the date when a cell is scheduled to be sent. Introduced in e-Dialog Web Services 1.1.</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
                        Required. The ID of the cell to update.
                        </documentation>
</annotation>
</element>
<element name="dropDate" type="dateTime">
<annotation>
<documentation>The new drop date for the cell.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateCellDropDateResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<complexType name="cellAdvancedDetailType">
<annotation>
<documentation>Complex type that includes advanced cell configuration information.</documentation>
</annotation>
<complexContent>
<extension base="cell:cellDetailType">
<sequence>
<element name="contentFormatText" type="string">
<annotation>
<documentation>Content format to send when a recipient  prefers to receive messages as text. The value must be either "TEXT" or "MULTIPART".</documentation>
</annotation>
</element>
<element name="contentFormatHTML" type="string">
<annotation>
<documentation>Content format to send when a recipient  prefers to receive messages in HTML format. The value must be one of  "TEXT", "HTML" or "MULTIPART".</documentation>
</annotation>
</element>
<element name="contentFormatNoPreference" type="string">
<annotation>
<documentation>Content format to send when a recipient  has no preference on format to receive messages. The value must be either "TEXT" or "MULTIPART".</documentation>
</annotation>
</element>
<element name="unsubDNS" type="string">
<annotation>
<documentation>Domain name for unsubscribe links. It must match a name of the available domains provided by the  listDomains() function.</documentation>
</annotation>
</element>
<element name="redirectDNS" type="string">
<annotation>
<documentation>Domain name for the redirected links. It must match a name of the available domains provided by the  listDomains() function.</documentation>
</annotation>
</element>
<element name="redirectExpirationDays" type="int">
<annotation>
<documentation>Number of days for expiring URLs.</documentation>
</annotation>
</element>
<element name="forwardToFriendTemplateName" type="string">
<annotation>
<documentation>A Forward-to-a-Friend (F2F) template name.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="errorNotificationEmailAddress" type="string">
<annotation>
<documentation>A list/array of e-mail addresses that receive all notifications</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="eventNotificationEmailAddress" type="string">
<annotation>
<documentation>A list/array of e-mail addresses that receive only process notifications. These events are a subset of the error notifications.</documentation>
</annotation>
</element>
<element name="feederQueueName" type="string">
<annotation>
<documentation>The name of the set of pre-configured IP addresses to use when the cell is mailed.</documentation>
</annotation>
</element>
<element minOccurs="0" name="headers" type="string">
<annotation>
<documentation>Additional e-mail headers.</documentation>
</annotation>
</element>
<element name="meterName" type="string">
<annotation>
<documentation>The name of the metering scheme to restrict the rate at which the e-mail is sent.</documentation>
</annotation>
</element>
<element name="cookieLifeTime" type="string">
<annotation>
<documentation>Cookie lifetime. One of "NONE", "SESSION", "PERSISTENT", "BOTH", "DOMAIN".</documentation>
</annotation>
</element>
</sequence>
</extension>
</complexContent>
</complexType>
</schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:content="uri:content.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:content.ws.sdk.edialog.com">
<element name="createContent">
<annotation>
<documentation>Creates a content object and stores it in the Content Library. Introduced in e-Dialog Web Services 1.0.</documentation>
</annotation>
<complexType>
<sequence>
<element name="name" type="string">
<annotation>
<documentation>Required. The name of the content object.
                        </documentation>
</annotation>
</element>
<element name="textData" nillable="true" type="string">
<annotation>
<documentation>Optional. The text version of the content, used in text-based e-mail messages. e-Dialog Web Services finds links in the string you provide and adds anchor tags (a href=) to them.</documentation>
</annotation>
</element>
<element name="htmlData" nillable="true" type="string">
<annotation>
<documentation>Optional. The HTML version of the content, used in HTML-based email messages.</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional. A list/array of strings containing user-defined field (UDF) values with which to categorize the object. Each string can be up to 30 characters. The order of the UDF values was defined by your account team as part of your initial setup process. e-Dialog recommends that you use only the UDF values that were defined at setup time for categorization purposes.</documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>Optional. A value to uniquely identify the content.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createContentResponse">
<annotation>
<documentation>
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>The ID of the newly created content object.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateContent">
<annotation>
<documentation>
                Updates the specified content object.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>Required. The ID of the content object to update.
                        </documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the content object. If you set the name to an empty string, the content object does not appear in any list of content in the Content Library.
                        </documentation>
</annotation>
</element>
<element name="textData" nillable="true" type="string">
<annotation>
<documentation>Optional. The text version of the content, used in text-based e-mail messages. e-Dialog Web Services finds links in the string you provide and adds anchor tags (a href=) to them.
                        </documentation>
</annotation>
</element>
<element name="htmlData" nillable="true" type="string">
<annotation>
<documentation>Optional. The HTML version of the content, used in HTML-based e-mail messages.</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" type="string">
<annotation>
<documentation>Optional. A list/array of strings containing user-defined field (UDF)
values with which to categorize the object. Each string can be up to
30 characters. The order of the UDF values was defined by your account
team as part of your initial setup process. e-Dialog recommends
that you use only the UDF values that were defined at setup time for
categorization purposes.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateContentResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="hideContent">
<annotation>
<documentation>
                Marks content object as hidden, which results if it is not
                appearing in listContent results. However, you can look up
                hidden content with the lookupContentByAlternateKey() and
                lookupContentById() functions. You cannot hide content that is
                a cell’s main content item.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>Required. The ID of the content object to hide.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="hideContentResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="unhideContent">
<annotation>
<documentation>
                Mark content as unhidden so that it appears in listContent results.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>Required. The ID  of the content object to unhide.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="unhideContentResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="listSymbolsInContent">
<annotation>
<documentation>
                Returns a  list of symbols found in a content object.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>Required. The ID of the content object.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listSymbolsInContentResponse">
<annotation>
<documentation>
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="symbols" type="string">
<annotation>
<documentation>A list/array of symbols used in content object.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listSymbolsInText">
<annotation>
<documentation>Returns a list of symbols in the specified  text. Introduced in e-Dialog Web Services 1.0.</documentation>
</annotation>
<complexType>
<sequence>
<element name="text" type="string">
<annotation>
<documentation>Required. The text in which to search for symbols.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listSymbolsInTextResponse">
<annotation/>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="symbols" type="string">
<annotation>
<documentation>A list/array of symbols found in the specified text.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteContent">
<annotation>
<documentation>Marks content object as deleted. Introduced in e-Dialog Web Services 1.0.</documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>Required. Database identifier of content object to mark as deleted.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteContentResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="lookupContentById">
<annotation>
<documentation>Returns the content object that has the specified ID. Introduced in e-Dialog Web Services 1.0.</documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>Required. The ID of content object to retrieve.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupContentByIdResponse">
<annotation>
<documentation>
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentItem" type="content:contentItemType">
<annotation>
<documentation>The content object that has the specified ID.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupContentByAlternateKey">
<annotation>
<documentation>Returns the content object that has the specified alternative key. Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="alternateKey" type="string">
<annotation>
<documentation>Required. The database key of the content object to retrieve.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupContentByAlternateKeyResponse">
<annotation/>
<complexType>
<sequence>
<element name="contentItem" type="content:contentItemType">
<annotation>
<documentation>The content object that has the specified alternate key.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listContent">
<annotation>
<documentation>Returns a list of content objects. Only a limited set of properties is returned. Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>
                        Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>
                        Optional. Used to filter against the
                        creation date of the content. This allows you to search for
                        content created in a specified date range. Leave these arguments
                        null if you do not want to include these as part of the search
                        criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter against the
                        creation date of the content. This allows you to search for
                        content created in a specified date range. Leave these arguments
                        null if you do not want to include these as part of the search
                        criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" nillable="true" type="string">
<annotation>
<documentation>Optional. A list/array of content
                        attribute names (in any order) used to sort the results: "name",
                        "createDate", "udf_". If no sortBy criteria
                        is provided, the results are sorted by "createDate". 
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. The maximum number of items to return each time you call the list function (the page size). Must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>Required, used for pagination of results. Indicates which page number to return where each page (list function call) returns the number of items specified by pageSize. Must be a positive integer.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listContentResponse">
<annotation/>
<complexType>
<sequence>
<element name="contentList" type="content:contentListType">
<annotation>
<documentation>One "page" of content objects that meet the specified criteria.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listContentAlt">
<annotation>
<documentation>Returns a list of content objects. Returns only a limited set of properties. Introduced in e-Dialog Web Services 1.2.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation> Optional. An expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>
                        Optional. Used to filter against the
                        creation date of the content. This allows you to search for
                        content created in a specified date range. Leave these arguments
                        null if you do not want to include them as part of the search
                        criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter against the
                        creation date of the content. This allows you to search for
                        content created in a specified date range. Leave these arguments
                        null if you do not want to include these as part of the search
                        criteria.
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>
                        Optional. Used to filter against the
                        update date of the content. This allows you to search for
                        content updated with in a specified date range. Leave these arguments
                        null if you do not want to include these as part of the search
                        criteria.
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter against the
                        update date of the content. This allows you to search for
                        content updated with in a specified date range. Leave these arguments
                        null if you do not want to include these as part of the search
                        criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" nillable="true" type="string">
<annotation>
<documentation>Optional. A list/array of content
                        attribute names (in any order) used to sort the results: "name",
                        "createDate", "udf_". If no sortBy criteria
                        is provided, the results are sorted by "createDate". 
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. The maximum number of items to return each time you call the list function (the page size). Must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>Required. Used for pagination of results. Indicates which page number to return where each page (list function call) returns the number of items specified by pageSize. Must be a positive integer.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listContentAltResponse">
<annotation/>
<complexType>
<sequence>
<element name="contentAltList" type="content:contentListItemAltType">
<annotation>
<documentation>One "page" of content objects that meets the specified criteria.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="wrapUrlsInText">
<annotation>
<documentation>
                Finds links in the string you provide and adds anchor tags (a href=) to them.
                It does change content stored in the database.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="text" type="string">
<annotation>
<documentation>The text string in which to insert anchor tags around links.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="wrapUrlsInTextResponse">
<annotation/>
<complexType>
<sequence>
<element name="wrappedData" type="string">
<annotation>
<documentation>The string in which links have been found and anchor tags added.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<complexType name="contentItemType">
<annotation>
<documentation>A list (one page) of contentItemType structures.</documentation>
</annotation>
<sequence>
<element name="hidden" type="boolean">
<annotation>
<documentation>Whether the content object is marked as hidden.</documentation>
</annotation>
</element>
<element name="contentId" type="int">
<annotation>
<documentation>The content object identifier.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the content object.</documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>The alternate key used to identify the content object.</documentation>
</annotation>
</element>
<element name="textData" nillable="true" type="string">
<annotation>
<documentation>The content of the object for text-only e-mail messages. e-Dialog Web Services finds links in the content and adds anchor tags (a href=) to them.
                    </documentation>
</annotation>
</element>
<element name="htmlData" nillable="true" type="string">
<annotation>
<documentation>Content data for HTML mail messages. </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional list of up to five user-defined field (UDF) string values with which to categorize the content. Each string can be up to 30 characters. e-Dialog recommends that you use only the UDF string values that were defined by your account team as part of your initial setup process.
                    </documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>
                        The date when the content object was created.
                    </documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>
                        The date when the content object was most recently updated.
                    </documentation>
</annotation>
</element>
</sequence>
</complexType>
<complexType name="contentItemAltType">
<annotation>
<documentation>A list (one page) of contentItemType structures.</documentation>
</annotation>
<sequence>
<element name="hidden" type="boolean">
<annotation>
<documentation>Whether the content object is marked as hidden.</documentation>
</annotation>
</element>
<element name="contentId" type="int">
<annotation>
<documentation>The content object identifier.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the content object.</documentation>
</annotation>
</element>
<element name="fsName" nillable="true" type="string">
<annotation>
<documentation>If available the file system name locator of the content. Only valid for library content. For cell content this value is always null.</documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>The alternate key used to identify the content object.</documentation>
</annotation>
</element>
<element name="textDataSize" type="int">
<annotation>
<documentation>The content size of the object for text-only e-mail messages. e-Dialog Web Services finds links in the content and adds anchor tags (a href=) to them.
                    </documentation>
</annotation>
</element>
<element name="htmlDataSize" type="int">
<annotation>
<documentation>Content size of the data for HTML mail messages. </documentation>
</annotation>
</element>
<element name="landPageDataSize" type="int">
<annotation>
<documentation>Content size of the landing page. </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional list of up to five user-defined field (UDF) string values with which to categorize the content. Each string can be up to 30 characters. e-Dialog recommends that you use only the UDF string values that were defined by your account team as part of your initial setup process.
                    </documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>
                        The date when the content object was created.
                    </documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>
                        The date when the content object was most recently updated.
                    </documentation>
</annotation>
</element>
</sequence>
</complexType>
<complexType name="contentListType">
<annotation>
<documentation>Complex type. Contains list of content objects organized in pages.</documentation>
</annotation>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned to the most recent list request.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of content objects that exist in the database as of the most recent listContentRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>Tthe number of pages found by the most recent listContentRequest.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="content" type="content:contentItemType">
<annotation/>
</element>
</sequence>
</complexType>
<complexType name="contentListItemAltType">
<annotation>
<documentation>Complex type. One page of content objects that meet specified criteria.</documentation>
</annotation>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned to the most recent list request.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of content objects that exist in the database as of the most recent listContentRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found by the most recent listContentRequest.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="content" type="content:contentItemAltType">
<annotation/>
</element>
</sequence>
</complexType>
<element name="lookupContentDeliveryPart">
<annotation>
<documentation>
                Allows a user to retrieve the individual MIME representations for
                a piece of content related by a content ID. Currently, e-Dialog
                Web Services support "Text" content, "HTML"
                content, and "landing" page content parts.
                Introduced in e-Dialog Web Services 1.2.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>The ID of the content object for which a content part is returned. This function will only return one of the related parts of content identified by this ID.
                        </documentation>
</annotation>
</element>
<element name="partName" type="string">
<annotation>
<documentation>One of the following: "text", "html" or "landing". Identifies which part of the content object to retrieve. This argument is not case-sensitive.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupContentDeliveryPartResponse">
<annotation/>
<complexType>
<sequence>
<element name="data" type="string">
<annotation>
<documentation>The data for the content part.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateContentDeliveryPart">
<annotation>
<documentation>
                Allows a user to update the individual MIME representations for
                a piece of content related by a content ID. Currently,
                e-Dialog Web Services supports "Text" content,
                "HTML" content, and "Landing" page content parts.
                Introduced in e-Dialog Web Services 1.2.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="contentId" type="int">
<annotation>
<documentation>
                            Required. The ID of the content object for which a
                            content part is returned. This
                            function returns only one of the related
                            parts of content identified by this ID.
                        </documentation>
</annotation>
</element>
<element name="partName" type="string">
<annotation>
<documentation>
                            Required. One of the following: "Text", "HTML" or "Landing". Identifies which part of the content
                            object is being retrieved. This argument is
                            not case-sensitive.
                        </documentation>
</annotation>
</element>
<element name="data" type="string">
<annotation>
<documentation>Required. The new value for the specified content part.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateContentDeliveryPartResponse">
<complexType/>
</element>
</schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:cp="uri:cp.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:cp.ws.sdk.edialog.com">
<element name="listSymbolsInCell">
<annotation>
<documentation>
                Lists all the symbols used in the cell. For example,
                if the symbol "_FIRSTNAME__" appears in the cell
                content, the list includes "FIRSTNAME".
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell for which to list symbols.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listSymbolsInCellResponse">
<annotation>
<documentation>Does not include intrinsic symbols in the list.</documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="symbol" type="string">
<annotation>
<documentation>A list/array of symbols used in the content of a cell. </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="resetSymbolMap">
<annotation>
<documentation>Automatically maps all data column symbols in the cell to the corresponding columns in the master database.
            Data column symbols that do not have a corresponding column are blank in the resulting email.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell in which to map data column symbols.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="resetSymbolMapResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="lookupSymbolMap">
<annotation>
<documentation>
                Returns a JSON structure of all current symbol mappings. See the
                Developer's Guide for a description of the JSON data structure and
                valid symbol definitions.
                In a newly created cell (before calling resetSymbolMap) the structure
                shows each symbol mapped to an empty literal value.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell for which to return symbol mappings.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupSymbolMapResponse">
<annotation/>
<complexType>
<sequence>
<element name="symbolMap" type="string">
<annotation>
<documentation>A JSON structure of all current symbol mappings. See the Developer's Guide for a description.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="setSymbolMap">
<annotation>
<documentation>
                Sets the entire symbol map using a JSON data structure. See the
                Developer's Guide for a description.
                Throws an exception if any of the symbol names in the symbolMap
                are illegal or if any of the symbol definitions are invalid.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell for which to set the symbol map.</documentation>
</annotation>
</element>
<element name="symbolMap" type="string">
<annotation>
<documentation>The symbol map to set. This is a string that contains the JSON structure to use to set the symbol map.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="setSymbolMapResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="mapSymbolToDataColumn">
<annotation>
<documentation>
                Maps a specific symbol to a data column. The data column must
                exist in the set returned by listDataColumnsForCell.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell in which to map a symbol to a data column.
                        </documentation>
</annotation>
</element>
<element name="symbolName" type="string">
<annotation>
<documentation>Required. The name of the symbol to map to a data column.
                        </documentation>
</annotation>
</element>
<element name="columnName" type="string">
<annotation>
<documentation>Required. The name of the data column whose values replace the symbol.
                        </documentation>
</annotation>
</element>
<element name="defaultValue" nillable="true" type="string">
<annotation>
<documentation>Optional. A value to use if there is no data available in the specified symbol for any given user record.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapSymbolToDataColumnResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="mapSymbolToLiteralValue">
<annotation>
<documentation>
                Maps the specified symbol to a literal value. The value appears
                in the resulting mail unless the literal value itself contains symbols.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell in which to map the symbol to text.
                        </documentation>
</annotation>
</element>
<element name="symbolName" type="string">
<annotation>
<documentation>Required. The name of the symbol to map to text.
                        </documentation>
</annotation>
</element>
<element name="literalValue" type="string">
<annotation>
<documentation>Required. The text value to use in place of the specified symbol.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapSymbolToLiteralValueResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="mapSymbolToContent">
<annotation>
<documentation>
                Maps the specified symbol to a content object reference.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell in which to map symbols.</documentation>
</annotation>
</element>
<element name="symbolName" type="string">
<annotation>
<documentation>Required. The name of the symbol to map.</documentation>
</annotation>
</element>
<element name="contentId" type="int">
<annotation>
<documentation>Required. The ID of the content object to use in place of the specified symbol.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapSymbolToContentResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="mapSymbolToCustomFunction">
<annotation>
<documentation>
                Maps the specified symbol to a custom function that was configured
                by your account team. See listMappingFunctionsForCell.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell in which to map the symbol to a custom function.
                        </documentation>
</annotation>
</element>
<element name="symbolName" type="string">
<annotation>
<documentation>Required. The name of the symbol to map to a custom function.
                        </documentation>
</annotation>
</element>
<element name="functionName" type="string">
<annotation>
<documentation>Required. A custom function name. The output of this function is used in place of the specified symbol.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapSymbolToCustomFunctionResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="listDataColumnsForCell">
<annotation>
<documentation>
                Returns a list of all master database columns to which a symbol
                within the specified cell can be mapped (see mapSymbolToDataColumn).
                Assign audience lists to the cell before you call this function.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell for which to list symbols.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listDataColumnsForCellResponse">
<annotation/>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="columnName" type="string">
<annotation>
<documentation>A list/array of master database columns to which a symbol within the specified cell can be mapped.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listMappingFunctionsForCell">
<annotation>
<documentation>
                Returns a list of custom functions to which a symbol within the
                cell can be mapped. See mapSymbolToCustomFunction.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>Required. The ID of the cell for which to list custom functions.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listMappingFunctionsForCellResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="functionName" type="string">
<annotation>
<documentation>A list/array  of custom functions to which a symbol within the cell can be mapped. See mapSymbolToCustomFunction.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapGridColumnToSymbol">
<annotation>
<documentation>
                Map a specific grid column to a symbol that is used in cell content.
                Introduced in e-Dialog Web Services 1.3.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
							Cell whose symbols tomap to a grid.
						</documentation>
</annotation>
</element>
<element name="gridId" type="int">
<annotation>
<documentation>
							Unique grid indentifier.
						</documentation>
</annotation>
</element>
<element name="columnName" type="string">
<annotation>
<documentation>
							Grid columns to be mapped.
						</documentation>
</annotation>
</element>
<element minOccurs="0" name="symbolName" type="string">
<annotation>
<documentation>
							Optional. User defined symbol name for the Grid Column to be mapped.
						</documentation>
</annotation>
</element>
<element name="keySymbolName" type="string">
<annotation>
<documentation>
							The name of the symbol that maps to the key column in the grid.
						</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapGridColumnToSymbolResponse">
<annotation>
<documentation>
				The response is empty
			</documentation>
</annotation>
<complexType/>
</element>
<element name="mapGridColumnToSymbolByKeyLiteral">
<annotation>
<documentation>
                Maps a key value from the grid to a symbol in the cell content.
                The keySymbolName is not a symbol ( _SYMBOL__).
                It is a key value from the grid.
                Introduced in e-Dialog Web Services 1.3.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
							Cell whose symbols to map to a grid.
						</documentation>
</annotation>
</element>
<element name="gridId" type="int">
<annotation>
<documentation>
							Unique grid indentifier.
						</documentation>
</annotation>
</element>
<element name="columnName" type="string">
<annotation>
<documentation>
							Grid columns to be mapped
						</documentation>
</annotation>
</element>
<element minOccurs="0" name="symbolName" type="string">
<annotation>
<documentation>
							Optional. User defined symbol name for the Grid Column to be mapped.
						</documentation>
</annotation>
</element>
<element name="keySymbolName" type="string">
<annotation>
<documentation>
							The name of the symbol that maps to the key column in the grid.
						</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapGridColumnToSymbolByKeyLiteralResponse">
<annotation>
<documentation>
				The response is empty
			</documentation>
</annotation>
<complexType/>
</element>
<element name="mapAllGridColumnsToSymbols">
<annotation>
<documentation>
                Maps all the columns in a grid to symbols in the content.
                Introduced in e-Dialog Web Services 1.3.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
							Cell whose symbols to map to a grid.
						</documentation>
</annotation>
</element>
<element name="gridId" type="int">
<annotation>
<documentation>
							Unique grid indentifier.
						</documentation>
</annotation>
</element>
<element name="keySymbolName" type="string">
<annotation>
<documentation>
							The name of the symbol that maps to the key column in the grid.
						</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapAllGridColumnsToSymbolsResponse">
<annotation>
<documentation>
				Empty response indicates success.
			</documentation>
</annotation>
<complexType/>
</element>
<element name="mapAllGridColumnsToSymbolsByKeyLiteral">
<annotation>
<documentation>
                Maps a key value from the grid to symbols in the cell content.
                The keySymbolName is not a symbol ( _SYMBOL__).
                It is a key value from the grid.
                Introduced in e-Dialog Web Services 1.3.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
							Cell whose symbols to map to a grid.
						</documentation>
</annotation>
</element>
<element name="gridId" type="int">
<annotation>
<documentation>
							Unique grid indentifier.
						</documentation>
</annotation>
</element>
<element name="keySymbolName" type="string">
<annotation>
<documentation>
							The name of the symbol that maps to the key column in the grid.
						</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="mapAllGridColumnsToSymbolsByKeyLiteralResponse">
<annotation>
<documentation>
				Empty response indicates success.
			</documentation>
</annotation>
<complexType/>
</element>
<element name="clearSymbolMap">
<annotation>
<documentation>
				Removes all symbol mappings.
                Introduced in e-Dialog Web Services 1.3.
			</documentation>
</annotation>
<complexType>
<sequence>
<element name="cellId" type="int">
<annotation>
<documentation>
							Uniquely identifies the cell whose symbols have to cleared/deleted
						</documentation>
</annotation>
</element>
<element name="includeUnsupportedSymbols" type="boolean">
<annotation>
<documentation>
							If True:  Delete all the symbols for the cell
							If False: Delete only symbols which are supported by the SDK							
						</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="clearSymbolMapResponse">
<annotation>
<documentation>
				Empty response indicates successfull deletion of symbols.
			</documentation>
</annotation>
<complexType/>
</element>
</schema>
    <xsd:schema xmlns="uri:customerStatus.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:customerStatus.ws.sdk.edialog.com">
<xsd:element name="lookupRecipientProfile">
<xsd:annotation>
<xsd:documentation>
                Look up recipient profile data. Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="recipientProfileKeys" type="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>The object contains a list of name/value pairs which correspond to an index that uniquely identifies a recipient.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupRecipientProfileResponse">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="masterInfo" type="LookupRecipientProfileType">
<xsd:annotation>
<xsd:documentation>
        
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="LookupRecipientProfileType">
<xsd:annotation>
<xsd:documentation>
        Complex type. Recipient profile properties.
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="cid" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        The unique identifier of the recipient.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="unsubFlag" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Whether the recipient has unsubscribed.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="unsubFlagDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the recipient unsubscribed.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="undelFlag" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Whether the recipient has been undeleted.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="undelFlagDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the recipient was undeleted.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mobileOpinFlag" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Whether the recipient receives messages on a mobile device.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mobileOpinFlagDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>When the recipient enabled receiving messages on a mobile device.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="perferedMime" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A recipient's preferred MIME type: T (Text), H
                            (HTML), M (MultiPart).
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the recipient was created.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the recipient was most
                            recently updated.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="masterProperties" type="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="lookupRecipientAudienceProfile">
<xsd:annotation>
<xsd:documentation>
                    Look up member properties data. Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The audience ID of the
                                membership to lookup.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="recipientProfileKeys" type="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>One or more name-value pairs that represent the recipient key.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupRecipientAudienceProfileResponse">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="memberInfo" type="LookupAudiencePropertiesType">
<xsd:annotation>
<xsd:documentation>
                
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="LookupAudiencePropertiesType">
<xsd:annotation>
<xsd:documentation>Complex type. Recipient audience properties.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="cid" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        The unique identifier of the recipient.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the recipient was created.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audienceProperties" type="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>A list/array of name-value
                    pairs of member information.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="value" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            A data value representing all or a portion of the recipient
                            profile
                            key.  
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            The name corresponds to a column in the e-Dialog database.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="listRecipientHistory">
<xsd:annotation>
<xsd:documentation>Returns a list of events filtered by a specified date range. Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="recipientProfileKeys" type="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>Required. The recipient profile key consists of a one or more name-value pairs that represent the recipient key.
            
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterEventDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterCreateDateEnd, allows
                        you to search for events created in a specified
                        date range. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterEventDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterCreateDateStart, allows
                        you to search for events created in a specified
                        date range. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listRecipientHistoryResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="eventList" type="eventListType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="eventListType">
<xsd:annotation>
<xsd:documentation>Complex type. A list/array of eventType elements arranged in pages. Each use gets the next page.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="events" type="eventOverviewType">
<xsd:annotation/>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eventOverviewType">
<xsd:annotation>
<xsd:documentation>Complex type that describes event properties.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="campaignId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The ID of the campaign for the event.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="campaignName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the campaign. </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The ID of the mailing for the event.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the mailing. </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The ID of the cell for the event.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cellName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the cell. The cell name appears in reports for the event.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The ID of the audience for the event.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the audience. </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="eventDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                        Date when the event was occurred.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eventInfoType">
<xsd:annotation>
<xsd:documentation>Complex type that describes event properties.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                    The name of the single entry under event info.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="value" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The associated value for the event info. </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eventType">
<xsd:annotation>
<xsd:documentation>Complex type. A list/array of eventType elements arranged in pages. Each use gets the next page.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="eventDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                        Date when the event occurred.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="eventInfo" type="eventInfoType">
<xsd:annotation/>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eventGroupType">
<xsd:annotation>
<xsd:documentation>Complex type. A list/array of eventType elements arranged in pages. Each use gets the next page.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="eventTypeName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                       Inbound event types include CLICK, OPEN, UNSUB, UNDEL, CONV, SPAM, UNSUBVIAEMAIL, UNDELVIAEMAIL, WEBEVENT. Outbound event types include MAILED.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="events" type="eventType">
<xsd:annotation>
<xsd:documentation>
                    
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="actionOverviewType">
<xsd:annotation>
<xsd:documentation>Complex type. A list/array of event elements.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="mailgroupId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        Contains the mailgroup identifier.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="eventgroup" type="eventGroupType">
<xsd:annotation>
<xsd:documentation>
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="recipientActionType">
<xsd:annotation>
<xsd:documentation>Complex type. A list/array of event elements.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="actions" type="actionOverviewType">
<xsd:annotation>
<xsd:documentation>
                        
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="listRecipientCellEventsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="actionList" type="recipientActionType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listRecipientCellEvents">
<xsd:annotation>
<xsd:documentation>
                    Look up member properties data when a recipient clicks on a link in an e-mail. Introduced in e-Dialog Web Services 1.2. 
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The cell ID.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="recipientProfileKeys" type="SimplePropertyType">
<xsd:annotation>
<xsd:documentation>Required. Contains a list of name-value pairs that represent the recipient key.

                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:dul="uri:dataupload.ws.sdk.edialog.com" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="uri:dataupload.ws.sdk.edialog.com">
<element name="createDataUploadConfigForNewAudience">
<annotation>
<documentation>
                Creates a data upload configuration for a new audience list based on a defined Class ID.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="classId" type="int">
<annotation>
<documentation>The ID of the audience class in the data dictionary, which binds an audience list to a specific set of member columns in the master database. See audienceClassType.</documentation>
</annotation>
</element>
<element name="namePrefix" type="string">
<annotation>
<documentation>Tthe filename prefix for data files associated with the upload configuration.
                        Data filenames consist of a prefix followed by a unique identifer. For example, if you specify a prefix of "DEMO",  
                        an actual filename prefix would be something like: "DEMO_DDSDK_S1234567_20081230".
                        </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional. A list/array of strings containing user-defined field (UDF) values with which to categorize the new audience list.
Each string can be up to 30 characters. The order of the UDF values was defined by your account team as part of your initial setup process.
 e-Dialog recommends that you use only the UDF values that were defined at setup time for categorization purposes.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="emailNotification" type="string">
<annotation>
<documentation>The e-mail address to which to send notifications.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForNewAudienceResponse">
<annotation/>
<complexType>
<sequence>
<element name="config" type="dul:dataUploadConfigType"/>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForNewSuppression">
<annotation>
<documentation>
                Creates a data upload configuration for a new suppression list based on a default Class ID 98.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="namePrefix" type="string">
<annotation>
<documentation>The filename prefix for data files associated with the upload configuration.
                        Data filenames consist of a prefix followed by a unique identifer. For example, if you specify a prefix of "DEMO",  
                        an actual filename prefix would be something like: "DEMO_DDSDK_S1234567_20081230".
                        </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional. A list/array of strings containing user-defined field (UDF) values with which to categorize the new suppression list.
Each string can be up to 30 characters. The order of the UDF values was defined by your account team as part of your initial setup process.
 e-Dialog recommends that you use only the UDF values that were defined at setup time for categorization purposes.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="emailNotification" type="string">
<annotation>
<documentation>The e-mail address to which to send notifications.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForNewSuppressionResponse">
<annotation/>
<complexType>
<sequence>
<element name="config" type="dul:dataUploadConfigType"/>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForExistingAudience">
<annotation>
<documentation>
                Creates a data upload configuration for an existing audience list ID.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="audienceId" type="int">
<annotation>
<documentation>Required. The ID of an existing audience list.</documentation>
</annotation>
</element>
<element name="appendToAudience" type="boolean">
<annotation>
<documentation>Required. Whether to replace the existing audience list (false) or append to it (true).</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="emailNotification" type="string">
<annotation>
<documentation>A list/array of the e-mail address to which to send notifications.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForExistingAudienceResponse">
<annotation/>
<complexType>
<sequence>
<element name="dataUploadConfig" type="dul:dataUploadConfigType"/>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForExistingSuppression">
<annotation>
<documentation>
                Creates a data upload configuration for an existing suppression list.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="audienceId" type="int">
<annotation>
<documentation>Required. The ID of an existing suppression list.</documentation>
</annotation>
</element>
<element name="appendToAudience" type="boolean">
<annotation>
<documentation>Required. Whether to replace the existing suppression list (false) or to append to it (true).</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="emailNotification" type="string">
<annotation>
<documentation>A list/array of  the e-mail address to which to send notifications.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForExistingSuppressionResponse">
<annotation/>
<complexType>
<sequence>
<element name="dataUploadConfig" type="dul:dataUploadConfigType"/>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForGlobalUnsub">
<annotation>
<documentation>
                Creates a data upload configuration to perform a global unsubscribe.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="emailNotification" type="string">
<annotation>
<documentation>The e-mail address to which to send notifications.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createDataUploadConfigForGlobalUnsubResponse">
<annotation/>
<complexType>
<sequence>
<element name="dataUploadConfig" type="dul:dataUploadConfigType"/>
</sequence>
</complexType>
</element>
<complexType name="dataUploadConfigType">
<annotation>
<documentation>Complex type that describes a data upload configuration.</documentation>
</annotation>
<sequence>
<element name="configId" type="int">
<annotation>
<documentation>The ID of a data upload configuration.</documentation>
</annotation>
</element>
<element name="filenamePatternPrefix" type="string">
<annotation>
<documentation>The prefix of the filename(s) for files that you upload to the FTP/SFTP server.
                    Dynamic DataSYNC uses the file naming convention prefix*.suffix where * is a unique identifier string.
                    For example, if the upload configuration prefix is "DEMO", the filename prefix is something
                    like "DEMO_DDSDK_S1234567_20081230".
                    </documentation>
</annotation>
</element>
<element name="filenamePatternSuffix" type="string">
<annotation>
<documentation>The suffix of the filename(s) for files that you upload to the FTP/SFTP server. The suffix
                    represents the encoding type of the file, typically "UTF-8".
                    </documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="lookupDataUploadStatus">
<annotation>
<documentation>
                Gets the data upload status of the specified file.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="filename" type="string">
<annotation>
<documentation>The name of the file being uploaded.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupDataUploadStatusResponse">
<annotation/>
<complexType>
<sequence>
<element name="status" type="dul:uploadStatusType"/>
</sequence>
</complexType>
</element>
<element name="createAudienceClass">
<annotation>
<documentation>
            Creates a class (group of data columns) by providing a list of data dictionary rows.
            Calling this function with an empty column identifier list returns Class ID 95. To get a complete list 
            of data columns from the data dictionary, use listAllDataColumns.
            Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="columnId" type="int">
<annotation>
<documentation>A list/array of column IDs.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createAudienceClassResponse">
<annotation/>
<complexType>
<sequence>
<element name="classId" type="int">
<annotation>
<documentation>The ID of an audience class in the data dictionary,
                        which binds an audience list to a specific set of member columns in the master database. 
                        The default class identifier is 95 if you call createAudienceClass with an empty identifier list. See audienceClassType.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listAllDataColumns">
<annotation>
<documentation>
                Gets a list of defined data column information from the data dictionary.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType/>
</element>
<element name="listAllDataColumnsResponse">
<annotation/>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="column" type="dul:dataColumnType"/>
</sequence>
</complexType>
</element>
<element name="listDataColumnsForAudience">
<annotation>
<documentation>
                Gets a list of defined master data column information from the data dictionary for a specific list.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="audienceId" type="int">
<annotation>
<documentation>Required. The ID of  an existing audience list.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listDataColumnsForAudienceResponse">
<annotation/>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="column" type="dul:dataColumnType"/>
</sequence>
</complexType>
</element>
<complexType name="dataColumnType">
<annotation>
<documentation>Complex type that represents a row in the data dictionary. Each row describes a column in the database.</documentation>
</annotation>
<sequence>
<element name="dictionaryId" type="int">
<annotation>
<documentation>The unique ID  for a row in the data dictionary. Each row contains information about a column in the master database.</documentation>
</annotation>
</element>
<element name="tableName" type="string">
<annotation>
<documentation>The name of the table that contains the data column described in the data dictionary.</documentation>
</annotation>
</element>
<element name="columnName" type="string">
<annotation>
<documentation>The name of the data column described in the data dictionary.</documentation>
</annotation>
</element>
<element name="columnType" type="string">
<annotation>
<documentation>The data type of the data column described in the data dictionary.</documentation>
</annotation>
</element>
<element minOccurs="0" name="maxLength" type="string">
<annotation>
<documentation>The maximum number of characters stored in the data column described in the data dictionary.</documentation>
</annotation>
</element>
<element minOccurs="0" name="dateTypeFormat" type="string">
<annotation>
<documentation>The format (if applicable) of the data column stored in the data dictionary. </documentation>
</annotation>
</element>
</sequence>
</complexType>
<complexType name="uploadStatusType">
<annotation>
<documentation>Complex type that includes the upload status.</documentation>
</annotation>
<sequence>
<element name="status" type="string">
<annotation>
<documentation>The status of the upload. Can be one of the following: FAILED, PENDING, WIP, DONE, UNKNOWN.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="listMasterUniqueKeyColumns">
<annotation>
<documentation>
                Gets a list of defined master database unique key columns information.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<annotation/>
</complexType>
</element>
<element name="listMasterUniqueKeyColumnsResponse">
<annotation/>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="column" type="dul:dataColumnType"/>
</sequence>
</complexType>
</element>
</schema>
    <xsd:schema xmlns:aud="uri:audiencetransfer.ws.sdk.edialog.com" xmlns:common="uri:common.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:tns="uri:deliverability.ws.sdk.edialog.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:deliverability.ws.sdk.edialog.com">
<xsd:import namespace="uri:common.ws.sdk.edialog.com"/>
<xsd:import namespace="uri:audiencetransfer.ws.sdk.edialog.com"/>
<xsd:element name="getMailingVolumeReport">
<xsd:annotation>
<xsd:documentation>
                Returns mailing volume information over a specified date range.
                The report can be broken down by domain, cell (identifier), or time (day or hour) or
                some combination of these dimensions. Valid dimensions include CELLID, DOMAIN, TIME.
                For CELLID, you can use a cell identifier to limit the result to the specified cell.
                For DOMAIN, you can use a domain name (e.g., example.com) to limit the results to mail
                sent to the specified domain. Use '***OTHER***' for domains not tracked.
                For TIME, use HOUR or H to obtain volume broken down per hour; use DAY or D to obtain 
                volume broken down per day. The response will be broken down per day if you do not
                specify a value for this dimension.
		    Valid start and end date are required. Null is reserved for the future. 
	            Introduced in e-Dialog Web Services 1.4.
           </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:complexContent>
<xsd:extension base="common:DateRangeReportRequestType"/>
</xsd:complexContent>
</xsd:complexType>
</xsd:element>
<xsd:element name="getMailingVolumeReportResponse">
<xsd:complexType>
<xsd:complexContent>
<xsd:extension base="common:DateRangeReportResponseType"/>
</xsd:complexContent>
</xsd:complexType>
</xsd:element>
<xsd:element name="getDeliverabilityReport">
<xsd:annotation>
<xsd:documentation>
				Returns mailing information for a specific EventType (Undeliverable, Unsubscribe, Spam) in a given date range.
				The results are grouped based on the 'Dimension' filters passed in. Only 2 dimensions are allowed at a time. 
				Some of the dimensions can take 'null' which means group by all possible values..
				
				The report can be broken down into different dimensions:
					1. CELLID - Single cellI ID (123) or all cell IDs (null)
					2. DOMAIN - Domain to which the mailing was sent/received. '***OTHER***' if the domain is not tracked.\
					3. TIME - Group the results hourly (h) or daily (d). This cannot be 'null'
					4. CATEGORY - Only valid for "Undeliverable" 
					5. SOURCE - Only valid for "Undeliverable" and "Unsubscribe" events
						"Undeliverables" can be by email (Undel_via_email) or by some other source (Undel).
						"Unsubscribes" can be by email (unsub_via_email) or some other source (unsub)
					6. UNDELTYPE - Only valid for "Undeliverables"
						Valid values are 't' (temporary) and 'p' (permanent)
				Valid start and end date are required. Null is reserved for the future. 
				Introduced in e-Dialog Web Services 1.4.
			</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:complexContent>
<xsd:extension base="common:DateRangeReportRequestType">
<xsd:sequence>
<xsd:element name="eventType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
									You can use the getDeliverabilityReport function to analyze the performance of email campaigns. Mailing results for UNDELIVERABLE, SPAM, and UNSUBSCRIBE events can be specified over a period of time.
									Introduced in e-Dialog Web Services 1.4.
							</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
</xsd:element>
<xsd:element name="getDeliverabilityReportResponse">
<xsd:complexType>
<xsd:complexContent>
<xsd:extension base="common:DateRangeReportResponseType"/>
</xsd:complexContent>
</xsd:complexType>
</xsd:element>
</xsd:schema>
    <xsd:schema xmlns="uri:ereport.ws.sdk.edialog.com" xmlns:common="uri:common.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:ereport.ws.sdk.edialog.com">
<xsd:import namespace="uri:common.ws.sdk.edialog.com"/>
<xsd:element name="refreshEReports">
<xsd:annotation>
<xsd:documentation>
				Forces a refresh of eReports data for a mailing.
				Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the mailing to
							refresh.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="notificationEmails" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of email
							addresses to whom to send
							notifications about the refresh.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="refreshEReportsResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.
			</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="getEReportsRefreshStatus">
<xsd:annotation>
<xsd:documentation>
				Get the status of the eReports refresh.
				Introduced
				in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the mailing for which
							to retrieve refresh
							status.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getEReportsRefreshStatusResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Unique identifier of the mailing.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Status of the most recently requested or
							executed eReports refresh for the mailing. Status can be:
							SCHEDULED, CANCELLED, RUNNING, FAILED, SUCCESS.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="scheduleDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when eReports was scheduled to be
							refreshed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="startDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the refresh started.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="endDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the refresh completed.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listEReportTypes">
<xsd:annotation>
<xsd:documentation>
				Returns a list of available eReports report types.
				Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="listEReportTypesResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="Reports" type="reportType">
<xsd:annotation>
<xsd:documentation>
							A list/array of eReports report types.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveEReports">
<xsd:annotation>
<xsd:documentation>
				Retrieves eReports data for a particular mailing
				and a particular report
				type.
				Introduced in e-Dialog Web Services 1.3.
			</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the mailing for which
							to retrieve data.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="reportType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The type of the requested report. For a list of
							eReport report types, use listEReportTypes.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveEReportsResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailing" type="MailingViewType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveMailingViewEReports">
<xsd:annotation>
<xsd:documentation>
				(Deprecated. Use the service retrieveMailingViewEReportsUdfs)
				Retrieves eReports data for the specified mailing.
				Note that for this function, the filtering conditions on mailing IDs
				and
				mailing names are ORed together and ANDed with UDFs and
				cell
				mailed date period specified.
				For reports including rollups per cell,
				for example, Mailing_Cell or
				Mailing_Cell_Audience,
				this method
				returns all the cells of the mailing matching the search
				criteria.
				Even if only a single cell was mailed in the specified period for a
				mailing,
				all the cells of that mailing will be returned.
				Introduced in
				e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailingIds" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the mailing.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="names" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Search string used to find mailings with a name
							that contains this
							string.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterMailedDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterMailedDateEnd,
							allows
							you to search for cells that have been mailed in a
							specified
							date range. Leave these arguments null if
							you do not want
							to include them as part of
							the search criteria.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterMailedDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterMailedDateStart,
							allows
							you to search for cells that have been mailed in a
							specified
							date range. Leave these arguments null if
							you do not want
							to include them as part of
							the search criteria.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="10" minOccurs="0" name="filterUdf" type="common:UDFFilterType">
<xsd:annotation>
<xsd:documentation>
							Optional. List of filtering conditions on UDFs
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="reportType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the requested report.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveMailingViewEReportsUdfs">
<xsd:annotation>
<xsd:documentation>
				In addition to returning all the information in retrieveMailingViewEReports, also returns information about
				10 UDFS for the mailing(s). Introduced in e-Dialog Web Services 1.4.2
			</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailingIds" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the mailing.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="names" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Search string used to find mailings with a name
							that contains this
							string.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterMailedDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterMailedDateEnd,
							allows
							you to search for cells that have been mailed in a
							specified
							date range. Leave these arguments null if
							you do not want
							to include them as part of
							the search criteria.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterMailedDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterMailedDateStart,
							allows
							you to search for cells that have been mailed in a
							specified
							date range. Leave these arguments null if
							you do not want
							to include them as part of
							the search criteria.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="filterUdf" type="common:UDFFilterType">
<xsd:annotation>
<xsd:documentation>
							Optional. List of filtering conditions on UDFs.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="reportType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the requested report.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveMailingViewEReportsUdfsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingView" type="mailingViewEReportsWithUdfType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveMailingViewEReportsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingView" type="mailingViewEReports"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="mailingViewEReports">
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailings" type="MailingViewType">
<xsd:annotation>
<xsd:documentation>
						A list/array of mailings with eReport data.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailingsInfo" type="eReportsMailingOverviewType">
<xsd:annotation>
<xsd:documentation>A list of mailings.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="responseCode" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						A responseCode of 200 equals success where 500
						means that the
						response
						needed to be truncated to summary view.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="mailingViewEReportsWithUdfType">
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailings" type="MailingViewWithUdfType">
<xsd:annotation>
<xsd:documentation>
						A list/array of mailings with eReport data.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailingsInfo" type="eReportsMailingOverviewWithUdfType">
<xsd:annotation>
<xsd:documentation>A list of mailings.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="responseCode" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						A responseCode of 200 equals success where 500
						means that the
						response
						needed to be truncated to summary view.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="retrieveCellViewEReports">
<xsd:annotation>
<xsd:documentation>
				Retrieves eReports data for mailing that match the
				mailing filtering criteria and the cell filtering criteria
				Filtering
				conditions on mailing IDs and mailing names are ORed.
				Filtering
				conditions on cell IDs and cell names are ORed.
				The filters above are
				then ANDed with UDFs and cell mailed date.
				This method only returns
				those cells of a mailing matching the search
				criteria.
				Introduced in
				e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailingIds" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the mailing.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailingNames" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Search string used to find mailings with a name
							that contains this
							string.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cellIds" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The unique identifier of the cells.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cellNames" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Search string used to find cells with a name
							that contains this string.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterMailedDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterMailedDateEnd,
							allows
							you to search for cells that have been mailed in a
							specified
							date range. Leave these arguments null if
							you do not want
							to include them as part of
							the search criteria.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterMailedDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterMailedDateStart,
							allows
							you to search for cells that have been mailed in a
							specified
							date range. Leave these arguments null if
							you do not want
							to include them as part of
							the search criteria.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="10" minOccurs="0" name="filterUdf" type="common:UDFFilterType">
<xsd:annotation>
<xsd:documentation>
							Optional. List of filtering conditions on UDFs.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="reportType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the requested report.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrieveCellViewEReportsResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="mailings" type="MailingViewType">
<xsd:annotation>
<xsd:documentation>
							A list/array of mailings with eReport data.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="responseCode" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							A responseCode of 200 equals success where 500
							means that the
							response
							needed to be truncated to summary view.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="MailingViewType">
<xsd:annotation>
<xsd:documentation>Complex type that contains eReports information
				about a mailing.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The unique identifier of the mailing to report
						on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
						The name of the mailing to report on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cell" type="eReportsCellOverviewType">
<xsd:annotation>
<xsd:documentation>A list of related cells (if the request report
						contains cell level rollups).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="dateMailed" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the mailing was sent.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="refreshDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the eReports data was most recently
						updated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mime" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The mime type of the mailing, including A (AOL),
						H (HTML) T (text), or M(Multipart).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mimeType" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The mime type of a cell. : 0=text, 1=landing
						page, 2=HTML, 4=multi-part, 9=unknown, null-unknown.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalCells" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of cells in the mailing.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalAudiences" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of audiences that the mailing was sent
						to.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalLinks" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of links in the cells in the mailing.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="levelCounts" type="RollupCountsType"/>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="customDefExt" type="CustomDefExtentsionType">
<xsd:annotation>
<xsd:documentation>
						A list/array that contains definitions of custom
						eReport columns.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="rollups" type="RollUpType">
<xsd:annotation>
<xsd:documentation>
						A list/array of eReport rollups.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="MailingViewWithUdfType">
<xsd:annotation>
<xsd:documentation>Complex type that contains eReports information
				about a mailing.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The unique identifier of the mailing to report
						on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
						The name of the mailing to report on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cell" type="eReportsCellOverviewWithUdfType">
<xsd:annotation>
<xsd:documentation>A list of related cells (if the request report
						contains cell level rollups).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="dateMailed" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the mailing was sent.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="refreshDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the eReports data was most recently
						updated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mime" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The mime type of the mailing, including A (AOL),
						H (HTML) T (text), or M(Multipart).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mimeType" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The mime type of a cell. : 0=text, 1=landing
						page, 2=HTML, 4=multi-part, 9=unknown, null-unknown.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalCells" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of cells in the mailing.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalAudiences" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of audiences that the mailing was sent
						to.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalLinks" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of links in the cells in the mailing.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="levelCounts" type="RollupCountsType"/>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="customDefExt" type="CustomDefExtentsionType">
<xsd:annotation>
<xsd:documentation>
						A list/array that contains definitions of custom
						eReport columns.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="rollups" type="RollUpType">
<xsd:annotation>
<xsd:documentation>
						A list/array of eReport rollups.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="reportType">
<xsd:annotation>
<xsd:documentation>Complex type that includes the name of the
				eReports report type.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>eReports report name as it is stored in the
						database. The name includes an underscore, for example
						mailing_cell.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>eReports report name. The name includes spaces,
						for example mailing cell.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="CustomDefExtentsionType">
<xsd:annotation>
<xsd:documentation>Complex type that includes information about a
				custom column.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="columnName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the column as it appears in
						eReports.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="dbColumnName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the column as it appears in the
						database.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="showTotal" nillable="true" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to show rollup figures in the custom
						column..</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="showZero" nillable="true" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to display zero when there is no value
						in the custom column.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="CustomExtType">
<xsd:annotation>
<xsd:documentation>Complex type that includes values for a row in a
				custom column.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="cntResponse" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The value of a row in a custom column, displayed
						as a number.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pctResponse" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The value of a row in a custom column, displayed
						as a percentage.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RollupCountsType">
<xsd:annotation>
<xsd:documentation>Complex type that contains eReports rollup data
				for the mailing.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="totalMailed" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of unique e-mail addresses to which
						an e-mail was sent.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="netDelivered" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of unique e-mail addresses to which
						an e-mail was successfully delivered; Net Delivered is the basis
						for
						most other metrics, including Open Rate, Total/Unique Click
						Rates, and
						Unsub Rate.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="undeliverable" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Total Mailed minus Net Delivered; the primary
						reasons for undeliverable e-mails are inactive e-mail addresses
						and
						problems with or unavailability of the recipient's e-mail
						server.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="unSubscribe" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Unsubscribe requests as a percent of Net
						Delivered. High Unsub
						Rates indicate that your message content
						and/or frequency are
						not well targeted to your audience.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalOpen" type="xsd:long">
<xsd:annotation>
<xsd:documentation>Number of unique e-mail adresses that opened the
						HTML version of the e-mail. (Cannot distinguish someone opening
						the actual message from
						someone seeing it in their e-mail client's
						preview window.)
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalClick" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The total number of clicks on all links
						contained within an e-mail (excluding the unsubscribe link); Total
						Clicks can also
						be viewed by cell, audience, link, format, or
						domain. If the same
						e-mail recipient clicks multiple times on
						either the same link or
						multiple links within a
						message, all of
						those clicks are counted when calculating Total Clicks; to
						avoid
						counting multiple clicks by the same email
						recipient or by those to
						whom the e-mail was forwarded, use Unique Click
						Rate.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="uniqueClick" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of e-mail message recipients who
						clicked through on
						at least one URL link within the e-mail
						(excluding the
						"unsubscribe" link) as a percent of Net
						Delivered.
						Unlike Total
						Click Rate, Unique Click Rate does not count
						multiple clicks by the
						same message recipient or clicks by multiple
						people to whom the
						message was forwarded. This is the best measure
						for answering
						the question, "What percent of my message
						recipients clicked
						through to access more information?" It is
						a good proxy for
						the
						effectiveness of an e-mail's message content.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalConversion" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of conversions (by mailing, cell,
						audience, link, format, or domain, depending on the type of
						report),
						including multiple conversions by the same recipient. (If
						one recipient
						converted twice, Total Conversions would
						increase by
						two.)
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="uniqueConversion" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of conversions (by mailing, cell,
						audience, link, format, or domain, depending on the type of
						report), not
						including multiple conversions by the same recipient;
						each recipient is
						credited with a maximum of one conversion.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="revenue" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The total amount of revenue credited to all
						conversions by mailing, cell, audience, link, format, or domain,
						depending
						on the type of report.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="viewedImages" nillable="true" type="xsd:long"/>
<xsd:element name="spamComplaints" nillable="true" type="xsd:long">
<xsd:annotation>
<xsd:documentation>The number of unique spam complaints. Only one
						spam complaint per CID per cell is recorded.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="customExt" type="CustomExtType">
<xsd:annotation>
<xsd:documentation>
						A list/array of custom eReport columns.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RollUpType">
<xsd:sequence>
<xsd:element name="reportType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The type of eReports report. For a list of
						report types, use listEReportTypes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the report.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>ID of the mailing that is being reported on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>ID of the cell that is being reported on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>ID of the audience that is being reported on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="linkId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>ID of the link that is being reported on.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ispKey" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The e-mail provider that is being reported on.
						The possible providers are the ones are most used by the client's
						recipients.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="format" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The format in which the e-mail was sent (HTML or
						text).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="dimensionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the dimension being reported, for
						example, "Gender" (where the name field would be 'male' or
						'female').</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="levelCounts" type="RollupCountsType">
<xsd:annotation>
<xsd:documentation>A list/array of rollup counts.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="rollups" type="RollUpType">
<xsd:annotation>
<xsd:documentation>
						A list of eReport rollups.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eReportsCellOverviewType">
<xsd:annotation>
<xsd:documentation>Complex type that describes cell properties.
			</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="campaignId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The ID of the campaign that contains the cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The ID of the mailing that contains the cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The ID of the cell.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the cell. The cell name appears in
						reports but does not appear in any part of a mailing sent to an
						audience. Cell names cannot contain an underscore (_) or a pound
						sign (#).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="subject" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The subject line for the cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="10" minOccurs="10" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
						Optional. A list/array of up to five
						user-defined field
						(UDF) string values with which to categorize the
						cell. Each string can be up to 30
						characters. e-Dialog recommends
						that you use
						only the UDF string values that were defined by
						your
						account team as part of your initial setup
						process.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
						Date when the cell was created.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
						Date when the cell was last updated.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="firstMailedDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the cell started mailing. Cells can be
						metered over a period of days and, in the case of triggers, a cell
						can be used over a window of time.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The status of the cell with respect to live
						proofing and
						mailing (read-only). Setup indicates that the cell is
						in the process
						of being set up. Lproofed indicates that live proofs
						have been sent.
						Lproof Mailing indicates that live proofs are in
						the process of
						being
						sent. Mailed indicates that final e-mail has
						been sent. Mailing
						indicates that final e-mail is in the process of
						being sent.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The alternate key of the cell (caller-supplied
						value used as a unique key into the cell table).
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eReportsCellOverviewWithUdfType">
<xsd:annotation>
<xsd:documentation>Complex type that describes cell properties.
			</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="campaignId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The ID of the campaign that contains the cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The ID of the mailing that contains the cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						The ID of the cell.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the cell. The cell name appears in
						reports but does not appear in any part of a mailing sent to an
						audience. Cell names cannot contain an underscore (_) or a pound
						sign (#).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="subject" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The subject line for the cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
						Optional. A list/array of up to five
						user-defined field
						(UDF) string values with which to categorize the
						cell. Each string can be up to 30
						characters. e-Dialog recommends
						that you use
						only the UDF string values that were defined by
						your
						account team as part of your initial setup
						process.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
						Date when the cell was created.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
						Date when the cell was last updated.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="firstMailedDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date when the cell started mailing. Cells can be
						metered over a period of days and, in the case of triggers, a cell
						can be used over a window of time.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The status of the cell with respect to live
						proofing and
						mailing (read-only). Setup indicates that the cell is
						in the process
						of being set up. Lproofed indicates that live proofs
						have been sent.
						Lproof Mailing indicates that live proofs are in
						the process of
						being
						sent. Mailed indicates that final e-mail has
						been sent. Mailing
						indicates that final e-mail is in the process of
						being sent.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The alternate key of the cell (caller-supplied
						value used as a unique key into the cell table).
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eReportsMailingOverviewType">
<xsd:annotation>
<xsd:documentation>Complex type. Subset of mailingDetailType.
			</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="campaignId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the campaign that contains the
						mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date the mailing was created.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date the mailing was last updated.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of user defined field values.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The status of the maililng. Either
						"Setup" or "Mailed".</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A user-provided unique key to use for this
						mailing. See lookupMailingByAlternateKey.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="eReportsMailingOverviewWithUdfType">
<xsd:annotation>
<xsd:documentation>Complex type. Subset of mailingDetailType.
			</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="campaignId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the campaign that contains the
						mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date the mailing was created.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date the mailing was last updated.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of user defined field values.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The status of the maililng. Either
						"Setup" or "Mailed".</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alternateKey" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A user-provided unique key to use for this
						mailing. See lookupMailingByAlternateKey.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="retrievePulseReport">
<xsd:annotation>
<xsd:documentation>
				Returns hourly event counts for a specific cellId.
				Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							Required. The ID of the cell to report on.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalHours" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							Total number of hours after mail date to report
							on.
							The value must be in the range of totalHours (greater than or
							equal
							to 1 and less than or equal to 72).
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="eventTypeName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Inbound event types include CLICK, OPEN, UNSUB,
							UNDEL, PAGE, SPAM,
							UNSUB_VIA_EMAIL, UNDEL_VIA_EMAIL, WEBEVENT.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="retrievePulseReportResponse">
<xsd:annotation>
<xsd:documentation>
			</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="firstMailSent" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
							The date time when the first mailed is sent.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="pulseReport" type="EventSummaryType">
<xsd:annotation>
<xsd:documentation>
							An array/list of summaries per hour for each
							event type.
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="EventSummaryType">
<xsd:annotation>
<xsd:documentation>
				Counts by hour of a specifc event type.
			</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="eventTypeName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
						Event type name. 
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="hourlyEventSummary" nillable="true" type="HourlyCountType">
<xsd:annotation>
<xsd:documentation>A list/array of event elements.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="HourlyCountType">
<xsd:annotation>
<xsd:documentation>Data structure holding the count and revenue for a
				specific hour of some event.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="hour" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						Hour reported one. Represents hour(s) after
						mailed_date for a cell.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="count" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
						Contains total Events by hour.
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="revenue" type="xsd:double">
<xsd:annotation>
<xsd:documentation>
						Contains generated Revenue (Only applicaple to
						redirects).
					</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:schema>
    <xsd:schema xmlns="uri:exporter.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:exporter.ws.sdk.edialog.com">
<xsd:element name="startExportJob">
<xsd:annotation>
<xsd:documentation>
                Tries to start an export job for the specified cell.
                The call fails if there is an existing export job running from the same cell.
                The call also fails if there are no audiences associated with the cell.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The ID of the cell in which to start an export job.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelExportJob">
<xsd:annotation>
<xsd:documentation>
                If an export job is running for the specified cell, cancels the export job.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell in which to cancel any running export job.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getExportJobStatus">
<xsd:annotation>
<xsd:documentation>
                Returns the status of the export job associated with the cell (ExportJobStatus object).
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The ID of the cell for which to get the export job status.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="startExportJobResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelExportJobResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="listExportedDataColumns">
<xsd:annotation>
<xsd:documentation>
                Returns a list of columns from the exported data file.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to list exported data columns.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listExportedDataColumnsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="columnName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of column names to permutate.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getExportJobStatusResponse" type="ExportJobStatusType">
<xsd:annotation/>
</xsd:element>
<xsd:complexType name="ExportJobStatusType">
<xsd:annotation/>
<xsd:sequence>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        The status of the export job. On of the following:
                            "none", " running", " success", " failure".
                        The value "none" indicates that no exporting has ever
                        occurred.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="statusText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                       A blob with the last messages logged by the exporter.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="processedRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                       Total number of rows in the audiences associated with
                       the cell in the last export job. Only returned if the
                       status is "success".
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="exportedRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                      Total number of rows exported by the last export job. Only
                      returned if the status is "success".
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="exportFileName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                       Filename used by the export process.
                       Not present if the status is "none".
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:schema>
    <xsd:schema xmlns="uri:grid.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:grid.ws.sdk.edialog.com">
<xsd:element name="listGrids">
<xsd:annotation>
<xsd:documentation>
                List grids according matching filtering conditions.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="filterGridName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Optional. The name of the Grid. Leave this  null if you do not want to include it as part of the search criteria. 						
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterGridDescription" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Optional. The description of the grid. Leave this  null if you do not want to include it as part of the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterAddDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
							Optional. The date when the grid was created. Leave this  null if you do not want to include it as part of the search criteria. If this is non-null then
							return all the grid created on and after the date specified
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterAddDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
							Optional. The date when the grid was created. Leave this  null if you do not want to include it as part of the search criteria. If this is non-null then 
							return all the grid created on and before the date specified
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterUpdateDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
							Optional. The last modified date of the grid. Leave this  null if you do not want to include it as part of the search criteria. If this non-null then 
							return all the grids updated on and after the date specified.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterUpdateDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
							Optional. The last modified date of the Grid. Leave this  null if you do not want to include it as part of the search criteria. If this is non-null then
							return all the grids updated on and before then date specified.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. A list/array of grid attribute names (in any order)
                        used to sort the results: "gridName", "gridId", "gridAddDate", "gridUpdateDate". If no
                        sortBy criteria is provided, the results are sorted by "gridName".
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The maximum number of items to return each time you call the list function (the page size). Must be a positive integer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. Used for pagination of results. Indicates which page number to return, where each page (list function call) returns the number of items specified by pageSize.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listGridsResponse">
<xsd:annotation>
<xsd:documentation>Complex type that describes a list of grids and includes a list/array of grid structures.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="currentPageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Currently displayed page of grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The number of grid lists that exist in the database as of the most recent
                    listGridRequest. You can use this number to page through the list.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of pages found by the most recent listGridsByFilter. (See listGridsByFilter.pageSize.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="grid" type="GridEntryType">
<xsd:annotation>
<xsd:documentation>A list/array of GridEntryType complex types that includes information about each grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listGridColumns">
<xsd:annotation>
<xsd:documentation>
                Lists all the columns in the grid,  excluding the key column.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The identifier of the grid whose columns to list.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listGridColumnsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" name="column" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            List/array of strings that contain the names of the columns in the grid, excluding the key column.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listGridKeyValues">
<xsd:annotation>
<xsd:documentation>
                Lists all the values in the key column of the grid. These are the 
                values that are used to determine what content to merge for each
                recipient.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The identifier of the grid for which you want to list the the key values.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listGridKeyValuesResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            List/array of strings that contain the key values in the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteGrid">
<xsd:annotation>
<xsd:documentation>
                Deletes a grid. If you delete a grid that is used in a mail that 
                has not yet been mailed, the symbols will resolve correctly.
                However, you cannot use a deleted grid in another cell.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The identifier of the grid to delete.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteGridResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="lookupGrid">
<xsd:annotation>
<xsd:documentation>
                Retrieves the rows and columns of a grid that is stored in rows, including the key column. 
                For a grid stored in tab-delimited format, use lookupTabSeparatedGrid(). 
                For a grid stored in XML, use lookupXMLGrid().
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The grid identifier.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupGridResponse" type="GridType">
<xsd:annotation>
<xsd:documentation>
           
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createGrid">
<xsd:annotation>
<xsd:documentation>
                Creates a grid for use in content, Each column of the grid represents a symbol. Each row contains string values to merge into the content. The first column of the grid contains key values used to determine the content to merge for each recipient.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. A name for the grid. The name must be unique; no other grids can have the same name.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. A description of the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="row" type="GridRowType">
<xsd:annotation>
<xsd:documentation>A list/array of grid row contents as defined in a GridRowType.</xsd:documentation>
</xsd:annotation>
<xsd:unique name="uniqueColumnName">
<xsd:selector xpath="./column"/>
<xsd:field xpath="@name"/>
</xsd:unique>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:unique name="uniqueRowKey">
<xsd:selector xpath="./row"/>
<xsd:field xpath="@key"/>
</xsd:unique>
</xsd:element>
<xsd:element name="createGridResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            The identifier of the new grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateGrid">
<xsd:annotation>
<xsd:documentation>
                Updates a grid that is stored as rows.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. Grid identifier.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional  A name for the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. A description of the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="row" type="GridRowType">
<xsd:annotation>
<xsd:documentation>The rows of the grid to update. Specify the contents of the entire grid in the rows array. To change only the name or description, but not the contents of the grid, set the value of rows to null.</xsd:documentation>
</xsd:annotation>
<xsd:unique name="updateGrid-uniqueColumnName">
<xsd:selector xpath="./column"/>
<xsd:field xpath="@name"/>
</xsd:unique>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:unique name="updateGrid-uniqueRowKey">
<xsd:selector xpath="./row"/>
<xsd:field xpath="@key"/>
</xsd:unique>
</xsd:element>
<xsd:element name="updateGridResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="createXmlGrid">
<xsd:annotation>
<xsd:documentation>
                Creates a grid for use in content from XML. Each column of the grid represents a symbol. Each row contains string values to merge into the content. The first column of the grid contains key values used to determine the content to merge for each recipient.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. A name for the grid. The name must be unique; no other grids can have the same name.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. A description of the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="xmlData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            The grid data that is stored as XML.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="createXmlGridResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            The identifier of the new grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateXmlGrid">
<xsd:annotation>
<xsd:documentation>
                Updates a  grid for use in content.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. Grid identifier.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional  A name for the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. A description of the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="xmlData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. The grid data stored in XML. You specify the contents of the entire grid.
                            To change only the name or description, but not the contents of the grid, set the value of xmlData to null.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateXmlGridResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="lookupXmlGrid">
<xsd:annotation>
<xsd:documentation>
                Retrieves the rows and columns of a grid that is stored in XML format, including the key column. 
                For a grid stored in rows, use lookupGrid(). 
                For a grid stored in tab-delimited format, use lookupTabSeparatedGrid().
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The grid identifier.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupXmlGridResponse" type="GridXmlType">
<xsd:annotation>
<xsd:documentation>
               
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createTabSeparatedGrid">
<xsd:annotation>
<xsd:documentation>
                Creates a grid for use in content, based on tab-delimited data. Each column of the grid represents a symbol. Each row contains string values to merge into the content. The first column of the grid contains key values used to determine the content to merge for each recipient.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. A name for the grid. The name must be unique; no other grids can have the same name.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. A description of the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="tabSeparatedData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            The grid data that is stored using tab-separated-values.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="createTabSeparatedGridResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            The identifier of the new grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateTabSeparatedGrid">
<xsd:annotation>
<xsd:documentation>
                Updates a grid that is stored in tab-delimited format.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. Grid identifier.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional  A name for the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. A description of the grid.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="tabSeparatedData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. The grid data stored in tab-separated format. You specify the contents of the entire grid.
                            To change only the name or description, but not the contents of the grid, set the value of tabSeparatedData to null.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateTabSeparatedGridResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="lookupTabSeparatedGrid">
<xsd:annotation>
<xsd:documentation>
                Retrieves the rows and columns of a grid that is stored in tab-delimited format, including the key column. 
                For a grid stored in rows, use lookupGrid(). 
                For a grid stored in XML, use lookupXMLGrid().
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. The grid identifier.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupTabSeparatedGridResponse" type="GridTabSeparatedType">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:complexType name="GridTabSeparatedType">
<xsd:annotation>
<xsd:documentation>Complex type that includes grid content in tab-separated format.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Grid identifier, used in reportable links.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The description of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateAdded" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was created.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateUpdate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was most recently updated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="onlyAsXML" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the grid data is available only in XML format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="tabSeparatedData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Grid data that is stored in tab-separated format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="GridXmlType">
<xsd:annotation>
<xsd:documentation>Complex type that contains XML data for the grid.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Grid identifier, used in reportable links.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The description of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateAdded" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was created.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateUpdate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was most recently updated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="onlyAsXML" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the grid data is available only in XML format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="xmlData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Grid data that is stored as XML.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="GridRowType">
<xsd:annotation>
<xsd:documentation>Complex type. Contains the unique key for the row, and a name/value pair for each column in the row.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" name="column" type="GridColumnType">
<xsd:annotation>
<xsd:documentation>Grid columns</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="key" type="xsd:string" use="required">
<xsd:annotation>
<xsd:documentation>The value in the key column for the row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
<xsd:complexType name="GridColumnType">
<xsd:annotation>
<xsd:documentation>A name/value pair that specifies the column name and value for that column in that row. If there is no value, you can omit the name/value pair entirely.</xsd:documentation>
</xsd:annotation>
<xsd:attribute name="name" type="xsd:string" use="required">
<xsd:annotation>
<xsd:documentation>The name of the grid column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string" use="required">
<xsd:annotation>
<xsd:documentation>The value of the grid column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
<xsd:complexType name="GridType">
<xsd:annotation>
<xsd:documentation>Complex type that contains grid content.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Grid identifier, used in reportable links.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The description of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateAdded" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was created.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateUpdate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was most recently updated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="onlyAsXML" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the grid data is available only in XML format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="row" type="GridRowType">
<xsd:annotation>
<xsd:documentation>A list/array of the rows and columns of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="gridListAfterFilterType">
<xsd:annotation>
<xsd:documentation>Complex type that describes a list of grids and includes a list/array of grid structures.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="currentPageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Currently displayed page of grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                    The number of grid lists that exist in the database as of the most recent
                    listGridRequest. You can use this number to page through the list.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of pages found by the most recent listGridsByFilter. (See listGridsByFilter.pageSize.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="grid" type="GridEntryType">
<xsd:annotation>
<xsd:documentation>A list/array of GridEntryType complex types that includes information about each grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="GridEntryType">
<xsd:annotation>
<xsd:documentation>
               Complex type that includes information about the grid.
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="gridId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Grid identifier, used in reportable links.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The description of the grid.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateAdded" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was created.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dateUpdate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date when the grid was most recently updated.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="onlyAsXML" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the grid data is available only in XML format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:schema>
    <xsd:schema xmlns:ib="uri:insightbuilder.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:insightbuilder.ws.sdk.edialog.com">
<xsd:element name="listIBQueries">
<xsd:annotation>
<xsd:documentation>
                Returns the properties of an InsightBuilder query identified by a given ID.
                Introduced in e-Dialog Web Services 1.4.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="filterQueryId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            A list/array of InsightBuilder Query identifiers to retrieve
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterNameExpression" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           Optional. An expression to filter InsightBuilder queries by name.
                           Use % as wildcard to match any substring of characters.
                           Leave this  null if you do not want to include it as part of the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterCreateDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                            Optional. If this is non-null then return all the queries created on and after the date specified.
                            Leave this  null if you do not want to include it as part of the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterCreateDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                            Optional. If this is non-null then return all the queries created on and before the date specified.
                            Leave this  null if you do not want to include it as part of the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterUpdateDateStart" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                            Optional. If this is non-null then return all the queries updated on and after the date specified.
                            Leave this  null if you do not want to include it as part of the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterUpdateDateEnd" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                            Optional. If this is non-null then return all the queries updated on and before the date specified.
                            Leave this  null if you do not want to include it as part of the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="filterState" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. A list/array of strings
                        that specify a set of state values
                        to include in the search. Values include:
                        "VALID", "WIP", "INVALID".
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. A list/array of IB Query attribute names (in any order)
                        used to sort the results: "queryId", "name", "addDate", "updateDate". If no
                        sortBy criteria is provided, the results are sorted by "name".
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required.
                        The maximum number of items to return each time you call the list function (the page size).
                        Must be a positive integer.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required. Used for pagination of results. Indicates which page number to return,
                            where each page (list function call) returns the number of items specified by pageSize.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listIBQueriesResponse">
<xsd:annotation>
<xsd:documentation>A page of InsightBuilder Queries.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="currentPageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Page number.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        The number of IB Queries that exist in the database as
                        of the most recent call to listIBQueries.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of pages found by the most recent listIBQueries.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="IBQuery" type="ib:IBQueryType">
<xsd:annotation>
<xsd:documentation>A list/array of IBQueryType complex types that includes information about each InsightBuilder query</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupIBQueryById">
<xsd:annotation>
<xsd:documentation>
                Returns the properties of an InsightBuilder query identified by a given ID.
                Introduced in e-Dialog Web Services 1.4.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="queryId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Required.The ID of the InsightBuilder query to look up.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupIBQueryByIdResponse" type="ib:IBQueryType">
<xsd:annotation>
<xsd:documentation>
                InsightBuilder query
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:complexType name="IBQueryType">
<xsd:sequence>
<xsd:element name="queryId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The InsightBuilder Query Identifier</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the InsightBuilder Query.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>InsightBuilder Query description</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="state" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The state of the query.
                    A value of "Valid" indicates that the query can be executed,
                    "Invalid" indicates that a previous execution produced an error and the query cannot be exectued until modified,
                    "WIP" indicates that a query execution is taking place and the query is not updatable temporarily.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="notificationEmailAddress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        A list/array of e-mail addresses that receive notifications whenever this InsightBuilder query is executed.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="createDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Timestamp when the InsightBuilder Query was created</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Timestamp when the InsightBuilder Query was last updated</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="recipientCount" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        Recipient count -using as the universe all registered recipient- at the last time when this query was updated.
                        Note that this count is not updated when the query is executed, therefore it is not a reliable estimate of the number
                        of recipients that would match the query if executed.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="getIBJobStatus">
<xsd:annotation>
<xsd:documentation>
				Returns the status of an InsightBuilder job.
				Introduced in e-Dialog Web Services 1.4.
			</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="jobId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							Required. The element ID.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getIBJobStatusResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="state" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Represents that status of the job
						</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buildAudienceFromIBQuery">
<xsd:annotation>
<xsd:documentation>
				Build an Audience based on a pre-defined Insight-Builder query.
				Introduced in e-Dialog Web Services 1.4.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="queryId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							Unique Query identifier
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="sourceAudienceId" nillable="true" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							List to build the Audiece of off.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="targetAudienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							The new list which will have the built audience
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="notificationAddresses" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
							Emails to be notified after the Audience is built
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="scheduleDate" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
							The date when the audience list will be built
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buildAudienceFromIBQueryResponse">
<xsd:annotation>
<xsd:documentation>
				Unique Job identifier configured to build the Audience from List
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="jobId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
							Unique Identifier of the Job that creates and populates the Audience List
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:schema>
    <xsd:schema xmlns="uri:urlmanagement.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:urlmanagement.ws.sdk.edialog.com">
<xsd:element name="updateLink">
<xsd:annotation>
<xsd:documentation>
            Lets you modify the target URL, report name, expiration date, enabled status, and UDF for the specified reportable link.
            Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="linkId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                           Required. The reportable link ID.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="targetURL" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           Optional. The target URL to redirect to.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="reportName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           Optional. The name of the report in eReports for this link.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="expirationDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                           Optional. The new expiration date for the link. You can
                           extend the expiration date up to 90 days from the time this
                           call is made.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>
                           Optional. Whether this link is enabled. If you disable the link,
                           it will stop being redirected, even if it has not expired.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        Optional. List/array of strings that contain user-defined field (UDF)
                        values to use to categorize the reportable link.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateLinkResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupLinkById">
<xsd:annotation>
<xsd:documentation>
            Returns a link that has the specified ID.
            Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="linkId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                           Required. The reportable link ID.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupLinkByIdResponse" type="LinkType">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="lookupLinkByEncodedURL">
<xsd:annotation>
<xsd:documentation>
            Returns a link that is associated with an encoded URL sent in a message.
            Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="encodedURL" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           Required. A URL obtained from a rendered message.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupLinkByEncodedURLResponse" type="LinkType">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="listLinks">
<xsd:annotation>
<xsd:documentation>
                Get a list of links filtered by the specified settings. Filter settings are optional.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="filterMailingId" nillable="true" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        Optional. The mailing ID to use to filter the list of links. The list will include links in all the mailed cells in the specified mailing.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterCellId" nillable="true" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        Optional. The cell ID to use to filter the list of links. The list will include links in the cell if it has been mailed.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterEnabled" nillable="true" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optional. Specifies whether the list of links should
                        include only enabled links. If false, the list will include only disabled links.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterExpiresAfter" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterExpiresBefore, lets
                        you search for links that will expire (will no longer be redirected) within the specified date range.
                        Leave these arguments null if you do not want to include them as part of
                        the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="filterExpiresBefore" nillable="true" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Optional. When used with filterExpiresAfter, lets
                        you search for links that will expire (will no longer be redirected) within the specified date range.
                        Leave these arguments null if you do not want to include them as part of
                        the search criteria.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. A list/array of link attribute
                        names (in any order) used to sort the results:
                        "expirationDate", "id",  "targetURL",
                        "reportName", "enabled", "udf1" ... "udf5"
                        If no sortBy criteria is provided, the default is to sort
                        by "expirationDate".
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. Specifies the maximum number of items to return each time you call the list function (the page size). The value must be a positive integer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="pageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                        Required. Used for pagination of results.
                        Indicates which page number to return, where
                        each page (list function call) returns the
                        number of items specified by pageSize. Must
                        be a positive integer.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listLinksResponse">
<xsd:annotation>
<xsd:documentation>
                A list of links that meet the filter criteria, if any.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="currentPageNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of the page returned to the most recent listLinksRequest.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfRows" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of links that exist in the database as of the most recent listLinksRequest.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="totalNumberOfPages" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The number of pages found by the most recent listLinksRequests (See listLinksRequest.pageSize.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="link" type="LinkType">
<xsd:annotation>
<xsd:documentation>A list/array of links that meet the filtering requirements.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="LinkType">
<xsd:annotation>
<xsd:documentation> The reportable link.
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="linkId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Reportable link ID.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="contentId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the content in which the link appears.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="targetURL" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The URL that is the destination the recipient expects to go to after clicking the link. For example, your organization's home page on your web site.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="originalTargetURL" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The target URL as it originally appears in the content.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether the link is enabled for redirection.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        List/array of strings that contain user-defined field (UDF)
                        values to use to categorize the reportable link.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="reportName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the report that will appear in eReports.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="expirationDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Date after which this link will no longer be redirected through the e-Dialog Redirection Service.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:schema>
    <xsd:schema xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:mailingcontrol="uri:mailingcontrol.ws.sdk.edialog.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:mailingcontrol.ws.sdk.edialog.com">
<xsd:element name="pauseCell">
<xsd:annotation>
<xsd:documentation>
                Attempts to pause a cell that is sending proofs or final e-mails.
                A cell must have a status of MAILING, MERGED, MERGING, or PROOFING to be paused.
                MERGING, MERGED status support added in e-Dialog Web Services 1.3.
                Introduced in e-Dialog Web Services 1.1.                
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell to pause.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="pauseCellResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelCell">
<xsd:annotation>
<xsd:documentation>
                Cancels further processing of a cell. A cell must be in the PAUSED, MAILING, PROOFING, MERGING, or MERGED state to be cancelled.
                MERGING, MERGED status support added in e-Dialog Web Services 1.3.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell to cancel.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="cancelCellResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="resumeCell">
<xsd:annotation>
<xsd:documentation>
                Resume processing of a cell. A cell must be in the "Paused" state to be resumed.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell to resume.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="resumeCellResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMailingNow">
<xsd:annotation>
<xsd:documentation>
                Attempts to asynchronously mail all unmailed cells in this mailing.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the mailing whose unmailed cells to send.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMailingNowResponse">
<xsd:complexType>
<xsd:annotation>
<xsd:documentation>
                </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cells" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of IDs of cells to mail.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMailingLater">
<xsd:annotation>
<xsd:documentation>
                Attempts to asynchronously mail all unmailed
                cells in this mailing at a specified date/time.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the mailing whose unsent mails to send.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="scheduledDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date and time at which to send the unsent cells in the mailing (drop date).</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMailingLaterResponse">
<xsd:complexType>
<xsd:annotation/>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cells" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of IDs of cells to mail later.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendCellNow">
<xsd:annotation>
<xsd:documentation>
                Attempts to asynchronously mail a cell. If the cell status is Mailing, Merging, or Merged, you cannot send the cell.
                Does not require that the cell has been proofed.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell to mail.
                        
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendCellNowResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendCellLater">
<xsd:annotation>
<xsd:documentation>
                Attempts to asynchronously mail a cell at a specified date/time.
                If the status of the cell is Mailing, Merging, or Merged, you cannot send it.
                Does not require that the cell has been proofed.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell to mail.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="scheduledDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date and time at which to send the cell (drop date).</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendCellLaterResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendCellAsScheduled">
<xsd:annotation>
<xsd:documentation>
                Attempts to asynchronously mail a cell at the time previously set
                for merging and mailing. Does not require that the cell has been
                proofed.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell to mail.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendCellAsScheduledResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMailingAsScheduled">
<xsd:annotation>
<xsd:documentation>
                Attempts to asynchronously mail all cells in a mailing at the
                time previously set for merging and mailing. Does not require
                that the cells have been proofed.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the mailing whose cells you want to send.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMailingAsScheduledResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:annotation>
<xsd:documentation>A list/array of IDs of cells to mail.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cells" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of IDs of cells in the mailing to send.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="scheduleCell">
<xsd:annotation>
<xsd:documentation>
                Lets you set the date when the merger will occur and, separately,
                when the cell will be sent.
                If the merger is not complete by the date specified as the dropDate,
                the cell is sent when the merger is complete.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell to mail.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="mergeDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date and time at which to start the merger for the cell.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dropDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date and time at which to send the cell.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="scheduleCellResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="scheduleMailing">
<xsd:annotation>
<xsd:documentation>
                Lets you set the date when the merger will occur and, separately specify when the cells in the mailing will be sent.
                If you schedule sending a mailing, all of the cells that are ready to mail are sent. If the merger is not completed
                by the mail date, the mail is sent when the merger is complete.  During the merger, the cell status is Mailing.
                You can pause and cancel a cell after the merge has started and before the mail is being sent.
                If you do so, the cell status is Cancelled. Past dates are allowed for the merger.
                Introduced in e-Dialog Web Services 1.3.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="mailingId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the mailing whose cells to send.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="mergeDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>The date and time at which to begin the merger for  the cells in the mailing.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="dropDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>
                            The date and time at which to sendthe cells in the mailing.
                            If you schedule sending a mailing, all of the cells that are ready to mail are sent.
                            If the merger is not completed by the mail date, the mail is sent when the merger is complete.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="scheduleMailingResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:annotation>
<xsd:documentation>A list/array of IDs of cells that were scheduled</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cells" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of IDs of cells to mail later.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendProofsNow">
<xsd:annotation>
<xsd:documentation>
                Sends proofs for the specified cell.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell to proof.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendProofsNowResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupCellStatus">
<xsd:annotation>
<xsd:documentation>
                Requests the status of the specified cell.
                Introduced in e-Dialog Web Services 1.0.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell whose status to look up.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupCellStatusResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>One of the following status values: 
                        	Cancelled, Deleted, Failed, Merging, Merged, Mailed, Mailing, Paused, Proofed,
                     		Proofing, Setup, Readytomail, Readytoproof
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buildRandomProofSample">
<xsd:annotation>
<xsd:documentation>
                Generates the random sample file that contains a subset of rows
                from the full export file, with a maximum number of records set by the sampleSize.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to generate the subset of the full export file.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="sampleSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The maximum number of rows from the full export file to include in the sample file.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buildRandomProofSampleResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="buildPermutationProofSample">
<xsd:annotation>
<xsd:documentation>
                Generates a file that contains a subset of data columns from the full export file.
                You can get the list of data columns available for generating the permutation by using the listExportedDataColumns function.
                To check the status of the operation, you can use the getProofSampleStatus function.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to generate the subset of the full export file.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="columnName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of column names to include in the subset of the export file.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="buildPermutationProofSampleResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="getProofSampleStatus">
<xsd:annotation>
<xsd:documentation>
                Returns the status of the operation to build the proof sample.
                One of the following: "Processing", Processed", "Failed", "None".
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to get information about the sample build process.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getProofSampleStatusResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="ProofSampleStatus" type="mailingcontrol:ProofSampleStatusType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="ProofSampleStatusType">
<xsd:annotation>
<xsd:documentation>Complex type that includes the proof status and status message.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="status" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The status of the proof build operation: Processing, None, Failed, Processed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="statusMessage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The message that includes additional information about the proof build process status.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="getProofSampleSetting">
<xsd:annotation>
<xsd:documentation>
                Gets information about the proof sample. If the sample type is Random (created with the
                buildRandomProofSample function), returns the size of the sample. If the sample type is
                Permutation (created with the buildPermutationProofSample function), returns a list/array
                of column names. 
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to get proof sample information.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getProofSampleSettingResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="proofSampleSetting" type="mailingcontrol:ProofSampleSettingType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="ProofSampleSettingType">
<xsd:annotation>
<xsd:documentation>Complex type that describes the proof sample properties.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="sampleSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The maximum number of recipients of the randomly generated sample.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="columnName" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of column names that is the subset of rows from the full export file.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="updateProofGroupOptions">
<xsd:annotation>
<xsd:documentation>
                Sets the options  for the proof group specified, including whether to include in proofs,
                include in the final e-mail, and send multipart samples as text.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell for which to set proof group options.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="groupNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The LProof group number (1,2,3).
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="includeInProofs" nillable="true" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to send the proof to the e-mail addresses specified in the group (true).
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="includeFinalEmail" nillable="true" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to send the final e-mail to the e-mail addresses specified in the group (true).</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="sendMultipartText" nillable="true" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to send multipart samples as text (true).
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="emailAddress" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of e-mail addresses to whom to send proofs.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateProofGroupOptionsResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="listProofSampleCIDs">
<xsd:annotation>
<xsd:documentation>
                Returns a list of customer IDs that were used during the most recent build sample operation.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to get customer IDs from the most recent proof sample.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listProofSampleCIDsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cid" nillable="true" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of the customer IDs from the most recently generated proof sample.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateProofGroupSampleCIDs">
<xsd:annotation>
<xsd:documentation>
                Updates the Lproof group with the list of CIDs.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The ID of the cell whose proof group to update.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="groupNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Required. The LProof group number (1,2,3).
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="arrayofCIDs" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of customer IDs to which to send proofs.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateProofGroupSampleCIDsResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="listProofGroupSampleCIDs">
<xsd:annotation>
<xsd:documentation>
                Returns a list of customer IDs that were used for a specific LProof
                group during the most recent build sample operation.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to get customer IDs from the most recent proof sample.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="groupNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The LProof group number (1,2,or 3).
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listProofGroupSampleCIDsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="cid" nillable="true" type="xsd:int">
<xsd:annotation>
<xsd:documentation>A list/array of the customer IDs for the specified group  from the most recently generated proof sample.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getProofGroupOptions">
<xsd:annotation>
<xsd:documentation>
                Returns the settings for the proof group specified, including whether to include in proofs,
                include in the final e-mail, and send multipart samples as text.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to get proof group options.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="groupNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The Lproof group (1,2, or 3).</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="getProofGroupOptionsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element name="proofGroupOptions" type="mailingcontrol:ProofGroupOptionsType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="ProofGroupOptionsType">
<xsd:annotation>
<xsd:documentation>Complex type that describes proof group options.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the cell for which to get the proof group settings.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="groupNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The LProof group number (1,2,or 3).
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="includeInProofs" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to send the proof to the e-mail addresses specified in the group (true).
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="includeFinalEmail" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to send the final e-mail to the e-mail addresses specified in the group (true).
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="sendMultipartText" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Whether to send multipart samples as text (true).
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="emailAddress" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of e-mail addresses to send proofs.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="listProofAudienceEmails">
<xsd:annotation>
<xsd:documentation>
                Returns the list of customer IDs that were used during the most
                recent build sample operation.
                Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="audienceId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The ID of the audience list for which to get the e-mail addresses.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listProofAudienceEmailsResponse">
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="emailAddress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of e-mail addresses for the specified audience.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:common="uri:common.ws.sdk.edialog.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:mailing="uri:mailing.ws.sdk.edialog.com" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:mailing.ws.sdk.edialog.com">
<import namespace="uri:common.ws.sdk.edialog.com"/>
<element name="createMailing">
<annotation>
<documentation>
                Creates a new mailing. Throws an exception if the alternate key already exists in the database (not null).
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>Optional. The ID of the campaign in which to create the mailing. There is no default value; an empty/null or zero campaignId specifies that the mailing should not be located within a campaign (correct for automated mailings). Mailings created this way appear in eReports but may not be visible in the Campaign Builder graphical user interface.
                        </documentation>
</annotation>
</element>
<element name="name" type="string">
<annotation>
<documentation>Required. A string, up to 64 characters. The name of the mailing.
                        </documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>Optional. A string up to 224 characters. A description for the mailing.
                        </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" type="string">
<annotation>
<documentation>Optional. A list/array of strings containing user-defined field (UDF) values with which to categorize the object.
Each string can be up to 30 characters. The order of the UDF values was defined by your account team as 
part of your initial setup process. e-Dialog recommends that you use only the UDF values that were defined 
at setup time for categorization purposes.
                        </documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>Optional.  A user-provided unique key to use for this mailing. See lookupMailingByAlternateKey.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateMailing">
<annotation>
<documentation>
                Changes the properties of a mailing.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="mailingId" type="int">
<annotation>
<documentation>Required. The ID of the mailing to update.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="name" type="string">
<annotation>
<documentation>Optional. A string of up to 64 characters. The name of the mailing.
                        </documentation>
</annotation>
</element>
<element minOccurs="0" name="description" type="string">
<annotation>
<documentation>Optional. A string of up to 224 characters. A description for the mailing.
                        </documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="0" name="udf" nillable="true" type="string">
<annotation>
<documentation>Optional list/array of strings containing user-defined field (UDF)
values with which to categorize the object. Each string can be up to
30 characters. The order of the UDF values was defined by your account
team as part of your initial setup process. e-Dialog recommends
that you use only the UDF values that were defined at setup time for
categorization purposes.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="updateMailingResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="lookupMailingById">
<annotation>
<documentation>
                Looks for a mailing using the specified ID.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="mailingId" type="int">
<annotation>
<documentation>Required. The ID of the mailing to look for.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupMailingByAlternateKey">
<annotation>
<documentation>
                Looks for a mailing using the alternate (user-provided) key.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="mailingKey" type="string">
<annotation>
<documentation>Required. The alternate key to use to find the mailing.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteMailing">
<annotation>
<documentation>
                Deletes a mailing.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="mailingId" type="int">
<annotation>
<documentation>Required. The ID of the mailing to delete.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="deleteMailingResponse">
<annotation>
<documentation>Empty response indicates success.</documentation>
</annotation>
<complexType/>
</element>
<element name="cloneMailing">
<annotation>
<documentation>
                Clones a mailing.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="mailingId" type="int">
<annotation>
<documentation>Required. The ID of the mailing to clone.</documentation>
</annotation>
</element>
<element name="campaignId" type="int">
<annotation>
<documentation>Optional. The ID of the campaign in which to place the cloned mailing. There is no default value; an empty/null or zero
campaignId specifies that the cloned mailing should not be located within a campaign. Mailings created this way
 appear in eReports but may not be visible in the Campaign Builder graphical user interface.
                        </documentation>
</annotation>
</element>
<element name="deepCopy" type="boolean">
<annotation>
<documentation>Required. Whether the cells inside the mailing should also be cloned (true).
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="createMailingResponse">
<annotation/>
<complexType>
<sequence>
<element name="resultMailingId" type="int">
<annotation>
<documentation>The ID of the newly created  mailing.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="cloneMailingResponse">
<annotation/>
<complexType>
<sequence>
<element name="resultMailingId" type="int">
<annotation>
<documentation>The ID of the newly cloned mailing.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="lookupMailingByIdResponse">
<annotation/>
<complexType>
<sequence>
<element name="mailing" type="mailing:mailingDetailType"/>
</sequence>
</complexType>
</element>
<element name="lookupMailingByAlternateKeyResponse">
<annotation/>
<complexType>
<sequence>
<element name="mailing" type="mailing:mailingDetailType"/>
</sequence>
</complexType>
</element>
<complexType name="mailingDetailType">
<annotation>
<documentation>Compex type. Detailed information about a mailing.</documentation>
</annotation>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>The ID of the campaign that contains the mailing.</documentation>
</annotation>
</element>
<element name="mailingId" type="int">
<annotation>
<documentation>The ID of the mailing.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the mailing.</documentation>
</annotation>
</element>
<element name="description" nillable="true" type="string">
<annotation>
<documentation>The description provided when the mailing was created or last updated.</documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>The date the mailing was created.</documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>The date of the most recent update to the mailing.</documentation>
</annotation>
</element>
<element name="status" type="string">
<annotation>
<documentation>The status of the mailing. Either "Setup" or "Mailed".</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="string">
<annotation>
<documentation>A list/array of up to five user-defined field values.</documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>A user-provided unique key to use for this mailing. See lookupMailingByAlternateKey.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="listMailings">
<annotation>
<documentation>
                (Deprecated. Use the service listMailingsByFilter)
                Returns a list of mailings. Only a limited set of properties for each campaign are returned.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="filterCampaignId" type="int">
<annotation>
<documentation>Optional. List/array of campaign IDs to search through. Leaving this empty/blank searches through all campaigns.
                        </documentation>
</annotation>
</element>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>Optional. String that contains an expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional.  Used to filter against the creation date of the mailing. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter against the creation date of the mailing. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter mailings by when the first piece of final/production mail was sent. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter mailings by when the first piece of final/production mail was sent. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="filterStatus" type="string">
<annotation>
<documentation>Optional. A list/array of strings that indicate a set of statuses to include in the search. Values include: "Setup", "Mailed", "Deleted".
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="string">
<annotation>
<documentation>Optional. A list/array of mailing attribute names (in any order) used to sort the results: "name", "id", "createDate", or "firstMailedDate". If no sortBy criteria is provided, the results are sorted by "createDate".
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. The maximum number of items to return each time you call the list function (the page size).  Must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>Required. Used for pagination of results. Indicates which page number to return where each page (list function call) returns the number of items specified by pageSize. Must be a positive integer.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listMailingsResponse">
<complexType>
<sequence>
<element name="mailingList" type="mailing:mailingListType"/>
</sequence>
</complexType>
</element>
<element name="listMailingsByFilter">
<annotation>
<documentation>
                Returns a list of mailings. Only a limited set of properties for each campaign are returned.
                Introduced in e-Dialog Web Services 1.3.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="filterCampaignId" type="int">
<annotation>
<documentation>Optional. List/array of campaign IDs to search through. Leaving this empty/blank searches through all campaigns.
                        </documentation>
</annotation>
</element>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>Optional. String that contains an expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional.  Used to filter against the creation date of the mailing. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter against the creation date of the mailing. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter mailings by when the first piece of final/production mail was sent. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter mailings by when the first piece of final/production mail was sent. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="filterStatus" type="string">
<annotation>
<documentation>Optional. A list/array of strings that indicate a set of statuses to include in the search. Values include: "Setup", "Mailed", "Deleted".
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterUpdateDateEnd allows
                        you to search for mailings created in a specified
                        date range according to the last update timestamp. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterUpdateDateStart allows
                        you to search for mailings created in a specified
                        date range according to the last update timestamp. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="0" name="filterUdf" type="common:UDFFilterType">
<annotation>
<documentation>
                            Optional. List of filtering conditions on UDFs
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="string">
<annotation>
<documentation>Optional. A list/array of mailing attribute names (in any order) used to sort the results: "name", "id", "createDate", or "firstMailedDate". If no sortBy criteria is provided, the results are sorted by "createDate".
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. The maximum number of items to return each time you call the list function (the page size).  Must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>Required. Used for pagination of results. Indicates which page number to return where each page (list function call) returns the number of items specified by pageSize. Must be a positive integer.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listMailingsByFilterResponse">
<complexType>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of mailings that exist in the database.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="mailing" type="mailing:mailingOverviewType">
<annotation/>
</element>
</sequence>
</complexType>
</element>
<element name="listMailingsByFilterAndMailingType">
<annotation>
<documentation>
				Returns a list of mailings. Only a limited set of properties for each
				campaign are returned.
				Allows filtering by specific mailing type.
            </documentation>
</annotation>
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="filterCampaignId" type="int">
<annotation>
<documentation>Optional. List/array of campaign IDs to search through. Leaving this empty/blank searches through all campaigns.
                        </documentation>
</annotation>
</element>
<element name="filterNameExpression" nillable="true" type="string">
<annotation>
<documentation>Optional. String that contains an expression that conforms to the syntax of the ANSI SQL LIKE operator (sometimes referred to as the LIKE predicate). See the Developer's Guide for details.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional.  Used to filter against the creation date of the mailing. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterCreateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter against the creation date of the mailing. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter mailings by when the first piece of final/production mail was sent. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterFirstMailedDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. Used to filter mailings by when the first piece of final/production mail was sent. This allows you to search for mailings created in any given date range. Leave these arguments null if you do not want to include these as part of the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="filterStatus" type="string">
<annotation>
<documentation>Optional. A list/array of strings that indicate a set of statuses to include in the search. Values include: "Setup", "Mailed", "Deleted".
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateStart" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterUpdateDateEnd allows
                        you to search for mailings created in a specified
                        date range according to the last update timestamp. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element name="filterUpdateDateEnd" nillable="true" type="dateTime">
<annotation>
<documentation>Optional. When used with filterUpdateDateStart allows
                        you to search for mailings created in a specified
                        date range according to the last update timestamp. Leave these arguments null if
                        you do not want to include them as part of
                        the search criteria.
                        </documentation>
</annotation>
</element>
<element maxOccurs="10" minOccurs="0" name="filterUdf" type="common:UDFFilterType">
<annotation>
<documentation>
                            Optional. List of filtering conditions on UDFs
                        </documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="sortBy" type="string">
<annotation>
<documentation>Optional. A list/array of mailing attribute names (in any order) used to sort the results: "name", "id", "createDate", or "firstMailedDate". If no sortBy criteria is provided, the results are sorted by "createDate".
                        </documentation>
</annotation>
</element>
<element name="pageSize" type="int">
<annotation>
<documentation>Required. The maximum number of items to return each time you call the list function (the page size).  Must be a positive integer.</documentation>
</annotation>
</element>
<element name="pageNumber" type="int">
<annotation>
<documentation>Required. Used for pagination of results. Indicates
							which page number to return where each page (list function call)
							returns the number of items specified by pageSize. Must be a
							positive integer.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="mailingType" type="string">
<annotation>
<documentation>
							Optional. List of mailing types to be included in the result. If
							omitted, all mailing types will be included.
			                				</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listMailingsByFilterAndMailingTypeResponse">
<complexType>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of mailings that exist in the database.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found.</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="mailing" type="mailing:mailingOverviewType">
<annotation/>
</element>
</sequence>
</complexType>
</element>
<complexType name="mailingOverviewType">
<annotation>
<documentation>Complex type. Subset of mailingDetailType.</documentation>
</annotation>
<sequence>
<element name="campaignId" type="int">
<annotation>
<documentation>The ID of the campaign that contains the mailing.</documentation>
</annotation>
</element>
<element name="mailingId" type="int">
<annotation>
<documentation>The ID of the mailing.</documentation>
</annotation>
</element>
<element name="name" nillable="true" type="string">
<annotation>
<documentation>The name of the mailing.</documentation>
</annotation>
</element>
<element name="createDate" type="dateTime">
<annotation>
<documentation>The date the mailing was created.</documentation>
</annotation>
</element>
<element name="updateDate" type="dateTime">
<annotation>
<documentation>The date the mailing was last updated.</documentation>
</annotation>
</element>
<element maxOccurs="5" minOccurs="5" name="udf" nillable="true" type="string">
<annotation>
<documentation>A list/array of user defined field values.</documentation>
</annotation>
</element>
<element name="status" type="string">
<annotation>
<documentation>The status of the maililng. Either "Setup" or "Mailed".</documentation>
</annotation>
</element>
<element name="alternateKey" nillable="true" type="string">
<annotation>
<documentation>A user-provided unique key to use for this mailing. See lookupMailingByAlternateKey.</documentation>
</annotation>
</element>
</sequence>
</complexType>
<complexType name="mailingListType">
<annotation>
<documentation>Complex type. A sequence of mailingOverviewType elements arranged into pages. Each user gets the next page.</documentation>
</annotation>
<sequence>
<element name="currentPageNumber" type="int">
<annotation>
<documentation>The number of the page returned to the most recent listMailingsRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfRows" type="int">
<annotation>
<documentation>The number of mailings that exist in the database as of the most recent listMailingsRequest.</documentation>
</annotation>
</element>
<element name="totalNumberOfPages" type="int">
<annotation>
<documentation>The number of pages found by the most recent listMailingssRequest. (See listMailingsRequest.pageSize.)</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="mailing" type="mailing:mailingOverviewType">
<annotation/>
</element>
</sequence>
</complexType>
</schema>
    <xsd:schema xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:rtm="uri:realtimemessaging.ws.sdk.edialog.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:realtimemessaging.ws.sdk.edialog.com">
<xsd:element name="sendProofMessage">
<xsd:annotation>
<xsd:documentation>
            Adds or updates recipient profile data and sends a proof message to a single recipient.
            The recipient e-mail address can be substituted with a replacement address.
            This function is intended for generating tests of messages to be sent via the sendMessage function.
            Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           Required. The name of a trigger as defined by as defined by your e-Dialog account team or when you created your RTM configuration.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="replacementAddress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           Optional. E-mail addresses to receive the proofs.
                           If replacement addresses are specified, the profile e-mail address do not receive the proof.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="property" type="rtm:PropertyType">
<xsd:annotation>
<xsd:documentation>
                        Complex type. Recipient profile data consists of a sequence of property type objects each of which can
                        store a simple name-value pair, act as a container for nested PropertyTypes, or act as a 
                        container for multiple rows of data values (multivals). Nested properties
                         allow you to store profile data that is not defined as
                         columns in the master database. The data is stored in
                         a special EVENTINFO column that is present in all e-
                         Dialog databases (or a custom column) and can be used
                         in cell content but cannot be used for reporting
                         purposes or to create an Insight Builder query.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendProofMessageResponse">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="UUID" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier for the request. Used for support purposes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMessage">
<xsd:annotation>
<xsd:documentation>
            Adds or updates recipient profile data and sends a message to a single recipient.
            For example, if a customer purchases goods from your web site, you can instantly 
            update the customer's shipping address and send that customer an order confirmation 
            message that includes a detailed list of items purchased, quantities, prices, 
            discounts, shipping fees, and so forth.
            Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                        The name of a trigger as defined by your e-Dialog account team.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="property" type="rtm:PropertyType">
<xsd:annotation>
<xsd:documentation>
                        Complex type. Recipient profile data consists of a sequence of property type objects each of which can
                        store a simple name-value pair, act as a container for nested PropertyTypes, or act as a 
                        container for multiple rows of data values (multivals). Nested properties
                         allow you to store profile data that is not defined as
                         columns in the master database. The data is stored in
                         a special EVENTINFO column that is present in all e-
                         Dialog databases (or a custom column) and can be used
                         in cell content but cannot be used for reporting
                         purposes or to create an Insight Builder query.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMessageResponse">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="UUID" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier for the request. Used for support purposes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateRecipientProfile">
<xsd:annotation>
<xsd:documentation>
            Adds or updates recipient profile data, adds a recipient to audience lists,
            and removes a recipient from audience lists.
            Introduced in e-Dialog Web Services 1.1.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="masterProperty" type="rtm:PropertyType">
<xsd:annotation>
<xsd:documentation>
                          Recipient profile data. See PropertyType.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audienceMembership" type="rtm:AudienceMembershipType">
<xsd:annotation/>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audienceRemoval" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Array/list of audience names that a recipient will be removed from.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateRecipientProfileResponse">
<xsd:annotation/>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="UUID" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unique identifier for the request. Used for support purposes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listRealTimeMessageConfigurations">
<xsd:annotation>
<xsd:documentation>
                (Deprecated. Use the service listRTMConfigurations)
                Provides a list of realtime messaging configurations.
                Introduced in e-Dialog Web Services 1.1
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="listRealTimeMessageConfigurationsResponse">
<xsd:annotation>
<xsd:documentation>
            List of realtime messaging configurations.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="rtmList" type="rtm:RtmListType"/>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:complexType name="RtmListType">
<xsd:annotation>
<xsd:documentation>Complex type. A list/array of realtime messaging configuration elements arranged in pages.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="rtmConfig" type="rtm:RealTimeMessagingType">
<xsd:annotation/>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RealTimeMessagingType">
<xsd:annotation>
<xsd:documentation>Complex type. Describes realtime messaging configurations.</xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="listClassId" nillable="true" type="xsd:long">
<xsd:annotation>
<xsd:documentation>
                    The audience class identifier of audiences created by this RTM configuration.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                    The name of the realtime message.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="notificationAddress" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                    The e-mail address where notifications are sent.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="AudienceMembershipType">
<xsd:annotation>
<xsd:documentation>
            Complex type. Audience membership data consists of an alternate key that identifies the audience list and a property type that identifies a recipient.
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="audienceAlternateKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                    Sets the alternate key column in the e-Dialog database, which is a
                    client-defined string used to identify a campaign, mailing, cell,
                    audience, or content item. It provides an easy way to refer to an
                    element, as an alternative to the internal primary key.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="audienceProperty" type="rtm:PropertyType">
<xsd:annotation>
<xsd:documentation>Profile data that identifies the recipient to add to the audience list. See PropertyType.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RowType">
<xsd:annotation>
<xsd:documentation>
            Complex type. A sequence of RowType objects functions as a table, i.e., a set of
            columns and rows typically used to store line items. Each RowType
            object is a set of PropertyType objects, each of which can be a
            simple, nested, or multival type. You bind the set of PropertyType
            objects to the RowType object using the setProperty method and you
            bind the array of RowType objects to a simple PropertyType object
            using the setRow method.
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="property" type="rtm:PropertyType">
<xsd:annotation>
<xsd:documentation>Recipient profile data. See PropertyType.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="PropertyType">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
<xsd:choice>
<xsd:element name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                    A data value for a simple PropertyType. Simple properties allow you to
                    store recipient profile data values in specific columns in the master
                    database. These columns can be e-Dialog &amp;quot;standard&amp;quot; columns or custom
                    columns as arranged with your e-Dialog account representative. Simple
                    values stored in columns can be used in cell content by means of
                    symbols and for any other purpose such as reporting or creating an
                    Insight Builder query.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="property" type="rtm:PropertyType">
<xsd:annotation>
<xsd:documentation>
                        
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="row" type="rtm:RowType">
<xsd:annotation>
<xsd:documentation>
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:choice>
<xsd:attribute name="name" type="xsd:string" use="required">
<xsd:annotation>
<xsd:documentation>
                A string that corresponds to a symbol name in the cell content. In a simple PropertyType (the value is also a string), 
                the name must correspond to a column in the e-Dialog database.
                </xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:schema>
    <xsd:schema xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:rtmc="uri:realtimemessagingconfiguration.ws.sdk.edialog.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:realtimemessagingconfiguration.ws.sdk.edialog.com">
<xsd:element name="listRTMQueues">
<xsd:annotation>
<xsd:documentation>
                Provides a list of available realtime messaging queues.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation>
<xsd:documentation>Complex type. Retrieves the set of available queues. RTM queues are managed by e-Dialog; users cannot create new queues. By default, users have one queue for all RTM configurations. Multiple queues are required when messages have to be processed with different priority.</xsd:documentation>
</xsd:annotation>
</xsd:complexType>
</xsd:element>
<xsd:element name="listRTMQueuesResponse">
<xsd:annotation>
<xsd:documentation>
                A list of realtime messaging queue names.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="queue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of realtime messaging queues.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="listRTMConfigurations">
<xsd:annotation>
<xsd:documentation>
                Provides a list of realtime messaging configurations.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:annotation/>
</xsd:complexType>
</xsd:element>
<xsd:element name="listRTMConfigurationsResponse">
<xsd:annotation>
<xsd:documentation>
               List of realtime messaging configurations.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="RTMConfiguration" type="rtmc:RTMConfigurationType">
<xsd:annotation>
<xsd:documentation>
                            A list/array of realtime messaging configurations.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="createRTMConfiguration">
<xsd:annotation>
<xsd:documentation>
                Creates a new realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                             Required. The name of the configuration.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="queueName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. The name of the queue to handle the requests. 
                            If specified, the value must be a name obtained by calling listRTMQueues.
                            If null, a default queue is used.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="notificationAddress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. An array or list of e-mail addresses to notify for errors when processing requests.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="clonePeriod" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The period to automatically clone the cells associated with this RTM configuration.
                            Valid values include "NEVER", "DAILY", "WEEKLY", "MONTHLY".
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="timeZone" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                           THIS FEATURE IS NOT ENABLED. Optional. Timezone information is currently persisted, but not used.
                           Timezone for cell cloning and audience rollup.
                            Use a TZ zone name from the Olson database (for example, "America/Los_Angeles" or
                            specify the offset from GMT using the format GMT[+|-]HH:MM. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="audienceClassId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            Optional. An audience class identifier. The audience class will be used when
                            creating new audience lists at the beginning of the audience rollup period.
                            The audience class defines the set of fields available for storage. If not specified,
                            a default audience class is selected.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="audienceRollupPeriod" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The period for which an audience is used and a new audience is created.
                            Valid values include "NEVER", "DAILY", "WEEKLY", "MONTHLY". At the end of the period, a new
                            audience is created and RTM requests sent to this configuration will use the new audience
                            for storing data associated with the sendMessage/sendProofMessage requests.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="createRTMConfigurationResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="updateRTMConfiguration">
<xsd:annotation>
<xsd:documentation>
                Updates a realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The name of the configuration to update. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="queueName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. The name of the queue to handle the requests. 
                            If specified, the value must be a name obtained by calling listRTMQueues.
                            If null, the existing queue is used. If an empty string is specified, the default queue will be assigned.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="notificationAddress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                          Optional. A list/array of e-mail addresses to be notified of errors when processing requests.
                          If no address is specified, no changes to the notification addresses are made.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="clonePeriod" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. The period to automatically clone the cells associated with this RTM configuration.
                            Valid values include NEVER, DAILY, WEEKLY, MONTHLY. If null, the clone period is unchanged.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="timeZone" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. If null, the existing timezone is unchanged. If an empty string,
                            then the default timezone is used.
                            THIS FEATURE IS NOT ENABLED. Optional. Timezone information is currently persisted, but not used. Timezone for cell cloning and audience rollup. 
Use a TZ zone name from the Olson database (for example, "America/Los_Angeles") or specify the offset from GMT using the format GMT[+|-]HH:MM. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="audienceRollupPeriod" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional.
                            The period for which an audience is used and a new audience is created.
                            Valid values include "NEVER", "DAILY", "WEEKLY", "MONTHLY". At the end of the period, a new
                            audience is created and RTM requests sent to this configuration will use the new audience
                            for storing data associated with the sendMessage/sendProofMessage requests.
                            If null, the existing rollup period is not affected.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateRTMConfigurationResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="updateRTMVariations">
<xsd:annotation>
<xsd:documentation>
                Assigns the set of allowed variations of a realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The name of the configuration to update. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="selectVariationExpression" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. An expression based on the profile data. This expression must generate one of the variation keys
                            of the set of variations.
                            If not specified, only the set of variations are updated and the current expression is unchanged.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="variation" type="rtmc:RTMVariationEntryType">
<xsd:annotation>
<xsd:documentation>
                            Optional. A list/array of name-value pairs (variationKey, testCellID) that specify the set of variations of an RTM configuration.                           
                            If the set is empty, only the expression is updated and the existing set of variations are unchanged.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateRTMVariationsResponse" type="rtmc:RTMConfigurationType">
<xsd:annotation>
<xsd:documentation>
            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="deleteAllRTMVariations">
<xsd:annotation>
<xsd:documentation>
                Removes all RTM variations from an RTM configuration.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The name of the RTM configuration to update.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteAllRTMVariationsResponse" type="rtmc:RTMConfigurationType">
<xsd:annotation>
<xsd:documentation>

            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="updateRTMTestCell">
<xsd:annotation>
<xsd:documentation>
                Assigns a cell to a realtime messaging configuration as the "test" cell. 
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            The name of the RTM configuration to update Required.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>
                            The cell identifier to use through this RTM configuration as the 'test' cell.
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="variationKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional parameter. If not specified, the cell identifier is
                            associated with the RTM configuration. If specified, the
                            RTM variation identified by the key is updated to use the
                            given cell as the 'test' cell. Use a variation key
                            only if you have setup your RTM configuration with variations using the
                            function updateRTMVariations().
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="updateRTMTestCellResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="promoteRTMTestCell">
<xsd:annotation>
<xsd:documentation>
                Promotes the test cell associated with a realtime messaging configuration (RTM) or
                an RTM variation, making it the current cell. After you use this function, sendMessage() 
                uses this cell when sending a realtime message.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The name of the RTM configuration to update. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="variationKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Optional. If not specified, the test cell
                            associated with the RTM configuration is promoted to
                            be the current cell. If specified, the RTM variation identified by the key
                            is updated to use the given cell and the test cell. Use a variation key only if you have set up your RTM configuration with variations using the
                            function updateRTMVariations().
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="promoteRTMTestCellResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="deleteRTMConfiguration">
<xsd:annotation>
<xsd:documentation>
                Deletes a realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The name of the RTM configuration to delete. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteRTMConfigurationResponse">
<xsd:annotation>
<xsd:documentation>Empty response indicates success.</xsd:documentation>
</xsd:annotation>
<xsd:complexType/>
</xsd:element>
<xsd:element name="lookupRTMConfiguration">
<xsd:annotation>
<xsd:documentation>
                Retrieves a realtime messaging configuration by message name.
                Introduced in e-Dialog Web Services 1.2.
            </xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                            Required. The name of the configuration to retrieve. 
                        </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="lookupRTMConfigurationResponse" type="rtmc:RTMConfigurationType">
<xsd:annotation>
<xsd:documentation>

            </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:complexType name="RTMConfigurationType">
<xsd:annotation>
<xsd:documentation>Complex type. Includes RTM configuration information. The RTM configuration is not deleted, just its variations.
            </xsd:documentation>
</xsd:annotation>
<xsd:sequence>
<xsd:element name="messageName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>RTM configuration name.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="queueName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Queue where messages directed to this RTM configuration are directed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" minOccurs="0" name="notificationAddress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A list/array of e-mail addresses to notify for errors or events while processing the RTM messages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="audienceClassId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Audiences created while processing messages directed to this RTM configuration
                    are created using this audience class.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="clonePeriod" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Cloning period of the cells associated with this RTM configuration.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cloningTimeZone" type="xsd:string">
<xsd:annotation>
<xsd:documentation>(Reserved field. Not yet functional.) Cloning will occur according to this timezone. </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="audienceAlternateKeySelectionExpression" type="xsd:string">
<xsd:annotation>
<xsd:documentation>                    Audiences created while processing messages directed to this RTM configuration
                    are given an alternate key as defined by this expression.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="audienceNamingExpression" type="xsd:string">
<xsd:annotation>
<xsd:documentation>                    Audiences created while processing messages directed to this RTM configuration
                    are given a name as defined by this expression.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="3" minOccurs="0" name="audienceUDFExpression" nillable="true" type="xsd:string">
<xsd:annotation>
<xsd:documentation>                    Audiences created while processing messages directed to this RTM configuration
                    are given UDFs as defined by these expressions.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="lastClonedDate" type="xsd:dateTime">
<xsd:annotation>
<xsd:documentation>Timestamp to indicate when the cells were most recently cloned.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="productionCellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Cell identifier for production messages. This value has no effect when the RTM configuration has been configured with variations.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="testCellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Cell identifier for proof messages. This value has no effect when the RTM configuration has been configured with variations.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="variationConfiguration" type="rtmc:RTMVariationsSettingsType">
<xsd:annotation>
<xsd:documentation>The variation configuration to use for this realtime message. Empty (null) if this RTM has not been configured with variations.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RTMVariationsSettingsType">
<xsd:annotation/>
<xsd:sequence>
<xsd:element name="variationSelectionExpression" type="xsd:string">
<xsd:annotation>
<xsd:documentation>                   This expression is evaluated with each message directed to the RTM configuration
                   to select one of the RTM variations.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element maxOccurs="unbounded" name="variation" type="rtmc:RTMVariationType">
<xsd:annotation>
<xsd:documentation>
                        A list/array of RTM variations associated with an RTM configuration.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RTMVariationEntryType">
<xsd:annotation/>
<xsd:sequence>
<xsd:element name="variationKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>
                    When the variation selection expression resolves to this value, sendProofMessages are sent using the test cell and sendMessages are sent using the production cell.
                    </xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element minOccurs="0" name="testCellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Cell identifier for proof messages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:complexType>
<xsd:complexType name="RTMVariationType">
<xsd:annotation/>
<xsd:complexContent>
<xsd:extension base="rtmc:RTMVariationEntryType">
<xsd:sequence>
<xsd:element minOccurs="0" name="productionCellId" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Cell identifier for production messages.</xsd:documentation>
</xsd:annotation>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
</xsd:schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:udf="uri:udf.ws.sdk.edialog.com" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:udf.ws.sdk.edialog.com">
<element name="listMailingUdfs">
<annotation>
<documentation>
                Returns a list/array of all available values for each of the five mailing UDFs.
                Introduced in e-Dialog Web Services 1.0.
                </documentation>
</annotation>
<complexType>
<annotation/>
</complexType>
</element>
<element name="listAudienceUdfs">
<annotation>
<documentation>
                Returns a list/array of all available values for each of the five audience UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<annotation/>
</complexType>
</element>
<element name="listAudienceUdfsResponse">
<complexType>
<sequence>
<element maxOccurs="5" minOccurs="5" name="udfValueList" type="udf:udfValueListType"/>
</sequence>
</complexType>
</element>
<element name="listMailingUdfsResponse">
<complexType>
<sequence>
<element maxOccurs="5" minOccurs="5" name="udfValueList" type="udf:udfValueListType"/>
</sequence>
</complexType>
</element>
<element name="listCellUdfs">
<annotation>
<documentation>
                Returns a list/array of all available values for each of the ten cell UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<annotation/>
</complexType>
</element>
<element name="listCellUdfsResponse">
<complexType>
<sequence>
<element maxOccurs="10" minOccurs="10" name="udfValueList" type="udf:udfValueListType"/>
</sequence>
</complexType>
</element>
<element name="listCampaignUdfs">
<annotation>
<documentation>
                Returns a list/array of all available values for each of the five campaign UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<annotation/>
</complexType>
</element>
<element name="listCampaignUdfsResponse">
<complexType>
<sequence>
<element maxOccurs="5" minOccurs="5" name="udfValueList" type="udf:udfValueListType"/>
</sequence>
</complexType>
</element>
<complexType name="udfValueListType">
<annotation>
<documentation>A list/array of strings that contain UDF values.</documentation>
</annotation>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="udfValue" type="string">
<annotation>
<documentation>
                    A list/array of strings containing all predefined values available for a particular user-defined field (UDF).
                    These values are created by your account team at initial setup time for categorization purposes.
                    Each string can be up to 30 characters.
                    </documentation>
</annotation>
</element>
</sequence>
</complexType>
<element name="listContentUdfs">
<annotation>
<documentation>
                Returns a list/array of all available values for each of the five content object UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </documentation>
</annotation>
<complexType>
<annotation/>
</complexType>
</element>
<element name="listContentUdfsResponse">
<complexType>
<sequence>
<element maxOccurs="5" minOccurs="5" name="udfValueList" type="udf:udfValueListType"/>
</sequence>
</complexType>
</element>
<element name="listCellUdfCategoryNames">
<annotation>
<documentation>
                Returns a list of category names for cell UDFs.
                Introduced in e-Dialog Web Services 1.1.
            </documentation>
</annotation>
<complexType/>
</element>
<element name="listCellUdfCategoryNamesResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="category" type="string">
<annotation>
<documentation>A list/array of category names.</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listUdfCategoryNamesAndValues">
<annotation>
<documentation>
                Returns a list of category names and values for a given entity.
                Introduced in e-Dialog Web Services 1.3. Ability to return information about 10 UDFs added in e-Dialog Web Services 1.4.2.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="entity" type="string">
<annotation>
<documentation>The type of object to retrieve UDF definitions and values. One of AUDIENCE, CAMPAIGN, CELL, CONTENT, LINK or MAILING</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listUdfCategoryNamesAndValuesResponse">
<complexType>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="category" type="udf:UDFCategoryType">
<annotation>
<documentation>A list/array of UDF categories</documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<complexType name="UDFCategoryType">
<sequence>
<element name="UDF" type="int">
<annotation>
<documentation>The number of the UDF</documentation>
</annotation>
</element>
<element name="name" type="string">
<annotation>
<documentation>The category name or standard numbered UDF</documentation>
</annotation>
</element>
<element maxOccurs="unbounded" minOccurs="0" name="value" type="string">
<annotation>
<documentation>A list/array of category values</documentation>
</annotation>
</element>
</sequence>
</complexType>
</schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:user="uri:user.ws.sdk.edialog.com" attributeFormDefault="unqualified" elementFormDefault="qualified" jaxb:version="1.0" targetNamespace="uri:user.ws.sdk.edialog.com">
<element name="canAccessClient">
<annotation>
<documentation>
                Returns true if the user has permission to access the client ID or schema name passed as an argument.
                Introduced in e-Dialog Web Services 1.2.
            </documentation>
</annotation>
<complexType>
<sequence>
<element name="clientIdentifer" type="string">
<annotation>
<documentation>
                     The client ID or the client schema.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="canAccessClientResponse">
<annotation/>
<complexType>
<sequence>
<element name="status" type="boolean">
<annotation>
<documentation>Whether the user may access the client.
                        </documentation>
</annotation>
</element>
</sequence>
</complexType>
</element>
<element name="listClients">
<annotation>
<documentation>
                Returns a list of clients that are available to the currently logged in user.
                Introduced in e-Dialog Web Services 1.2.
            </documentation>
</annotation>
<complexType/>
</element>
<element name="listClientsResponse">
<complexType>
<annotation>
<documentation>A list/array of clientListType.
                 The first client in the list is the default client assigned to this user.
                </documentation>
</annotation>
<sequence>
<element maxOccurs="unbounded" minOccurs="0" name="clientList" type="user:ClientListType"/>
</sequence>
</complexType>
</element>
<complexType name="ClientListType">
<annotation>
<documentation>Complex type that describes a client.
            </documentation>
</annotation>
<sequence>
<element name="clientId" type="long">
<annotation>
<documentation>The ID of the client.
                    </documentation>
</annotation>
</element>
<element name="clientName" type="string">
<annotation>
<documentation>The name of the client.
                    </documentation>
</annotation>
</element>
<element name="isAssigned" type="boolean">
<annotation>
<documentation>The client that is assigned to the currently logged in user.
                    </documentation>
</annotation>
</element>
<element name="isDefault" type="boolean">
<annotation>
<documentation>The client that is set as the default for the currently logged in user.
                    </documentation>
</annotation>
</element>
</sequence>
</complexType>
</schema>
  </wsdl:types>
  <wsdl:message name="listSymbolsInTextResponse">
    <wsdl:part element="sch5:listSymbolsInTextResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSymbolsInCellRequest">
    <wsdl:part element="sch6:listSymbolsInCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listForwardToFriendTemplatesResponse">
    <wsdl:part element="sch4:listForwardToFriendTemplatesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProofSampleStatusResponse">
    <wsdl:part element="sch15:getProofSampleStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellFeederQueueRequest">
    <wsdl:part element="sch4:updateCellFeederQueue" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cloneAudienceResponse">
    <wsdl:part element="sch1:cloneAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRTMConfigurationsRequest">
    <wsdl:part element="sch18:listRTMConfigurations" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="downloadAudienceResponse">
    <wsdl:part element="sch2:downloadAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listContentAltResponse">
    <wsdl:part element="sch5:listContentAltResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateGridRequest">
    <wsdl:part element="sch12:updateGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listExportedDataColumnsRequest">
    <wsdl:part element="sch11:listExportedDataColumns" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDataColumnsForAudienceRequest">
    <wsdl:part element="sch8:listDataColumnsForAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRecipientProfileRequest">
    <wsdl:part element="sch17:updateRecipientProfile" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createMailingRequest">
    <wsdl:part element="sch16:createMailing" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudiencesRequest">
    <wsdl:part element="sch1:listAudiences" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="buildRandomProofSampleResponse">
    <wsdl:part element="sch15:buildRandomProofSampleResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSymbolsInTextRequest">
    <wsdl:part element="sch5:listSymbolsInText" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateContentDeliveryPartRequest">
    <wsdl:part element="sch5:updateContentDeliveryPart" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMessageRequest">
    <wsdl:part element="sch17:sendMessage" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCampaignResponse">
    <wsdl:part element="sch3:updateCampaignResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createAudienceClassResponse">
    <wsdl:part element="sch8:createAudienceClassResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="canAccessClientRequest">
    <wsdl:part element="sch20:canAccessClient" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMemberCountResponse">
    <wsdl:part element="sch1:getMemberCountResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteAllRTMVariationsRequest">
    <wsdl:part element="sch18:deleteAllRTMVariations" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listContentResponse">
    <wsdl:part element="sch5:listContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetSymbolMapRequest">
    <wsdl:part element="sch6:resetSymbolMap" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listWebAnalyticsTokensRequest">
    <wsdl:part element="sch4:listWebAnalyticsTokens" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellStatusRequest">
    <wsdl:part element="sch15:lookupCellStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCellContentIdRequest">
    <wsdl:part element="sch4:getCellContentId" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteMailingRequest">
    <wsdl:part element="sch16:deleteMailing" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCellContentIdResponse">
    <wsdl:part element="sch4:getCellContentIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCampaignUdfsResponse">
    <wsdl:part element="sch19:listCampaignUdfsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForExistingAudienceResponse">
    <wsdl:part element="sch8:createDataUploadConfigForExistingAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupMailingByAlternateKeyRequest">
    <wsdl:part element="sch16:lookupMailingByAlternateKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapAllGridColumnsToSymbolsByKeyLiteralResponse">
    <wsdl:part element="sch6:mapAllGridColumnsToSymbolsByKeyLiteralResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMailingVolumeReportResponse">
    <wsdl:part element="sch9:getMailingVolumeReportResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupTabSeparatedGridResponse">
    <wsdl:part element="sch12:lookupTabSeparatedGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForGlobalUnsubRequest">
    <wsdl:part element="sch8:createDataUploadConfigForGlobalUnsub" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteContentResponse">
    <wsdl:part element="sch5:deleteContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCampaignsResponse">
    <wsdl:part element="sch3:listCampaignsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupRecipientProfileRequest">
    <wsdl:part element="sch7:lookupRecipientProfile" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resumeCellResponse">
    <wsdl:part element="sch15:resumeCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteContentRequest">
    <wsdl:part element="sch5:deleteContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateGridResponse">
    <wsdl:part element="sch12:updateGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getIBJobStatusResponse">
    <wsdl:part element="sch13:getIBJobStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProofGroupOptionsRequest">
    <wsdl:part element="sch15:updateProofGroupOptions" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupXmlGridRequest">
    <wsdl:part element="sch12:lookupXmlGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCampaignByIdRequest">
    <wsdl:part element="sch3:lookupCampaignById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapGridColumnToSymbolByKeyLiteralResponse">
    <wsdl:part element="sch6:mapGridColumnToSymbolByKeyLiteralResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAllDataColumnsResponse">
    <wsdl:part element="sch8:listAllDataColumnsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRealTimeMessageConfigurationsRequest">
    <wsdl:part element="sch17:listRealTimeMessageConfigurations" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cloneAudienceRequest">
    <wsdl:part element="sch1:cloneAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellByAlternateKeyResponse">
    <wsdl:part element="sch4:lookupCellByAlternateKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendCellAsScheduledResponse">
    <wsdl:part element="sch15:sendCellAsScheduledResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createCampaignRequest">
    <wsdl:part element="sch3:createCampaign" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="scheduleCellRequest">
    <wsdl:part element="sch15:scheduleCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellFeederQueueResponse">
    <wsdl:part element="sch4:updateCellFeederQueueResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listForwardToFriendTemplatesRequest">
    <wsdl:part element="sch4:listForwardToFriendTemplates" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProofSampleSettingRequest">
    <wsdl:part element="sch15:getProofSampleSetting" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listClientsRequest">
    <wsdl:part element="sch20:listClients" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToContentRequest">
    <wsdl:part element="sch6:mapSymbolToContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAllDataColumnsRequest">
    <wsdl:part element="sch8:listAllDataColumns" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingsByFilterAndMailingTypeRequest">
    <wsdl:part element="sch16:listMailingsByFilterAndMailingType" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapAllGridColumnsToSymbolsByKeyLiteralRequest">
    <wsdl:part element="sch6:mapAllGridColumnsToSymbolsByKeyLiteral" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveEReportsResponse">
    <wsdl:part element="sch10:retrieveEReportsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resumeCellRequest">
    <wsdl:part element="sch15:resumeCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createContentResponse">
    <wsdl:part element="sch5:createContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="hideContentResponse">
    <wsdl:part element="sch5:hideContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listContentUdfsRequest">
    <wsdl:part element="sch19:listContentUdfs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMappingFunctionsForCellRequest">
    <wsdl:part element="sch6:listMappingFunctionsForCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveEReportsRequest">
    <wsdl:part element="sch10:retrieveEReports" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateMailingResponse">
    <wsdl:part element="sch16:updateMailingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSymbolsInContentResponse">
    <wsdl:part element="sch5:listSymbolsInContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCampaignUdfsRequest">
    <wsdl:part element="sch19:listCampaignUdfs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellHeadersResponse">
    <wsdl:part element="sch4:updateCellHeadersResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForExistingSuppressionResponse">
    <wsdl:part element="sch8:createDataUploadConfigForExistingSuppressionResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveMailingViewEReportsRequest">
    <wsdl:part element="sch10:retrieveMailingViewEReports" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupMailingByAlternateKeyResponse">
    <wsdl:part element="sch16:lookupMailingByAlternateKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listProofGroupSampleCIDsResponse">
    <wsdl:part element="sch15:listProofGroupSampleCIDsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEReportsRefreshStatusResponse">
    <wsdl:part element="sch10:getEReportsRefreshStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupRTMConfigurationResponse">
    <wsdl:part element="sch18:lookupRTMConfigurationResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSymbolsInContentRequest">
    <wsdl:part element="sch5:listSymbolsInContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProofGroupSampleCIDsRequest">
    <wsdl:part element="sch15:updateProofGroupSampleCIDs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="promoteRTMTestCellResponse">
    <wsdl:part element="sch18:promoteRTMTestCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listGridColumnsRequest">
    <wsdl:part element="sch12:listGridColumns" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="downloadAudienceRequest">
    <wsdl:part element="sch2:downloadAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRealTimeMessageConfigurationsResponse">
    <wsdl:part element="sch17:listRealTimeMessageConfigurationsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateContentResponse">
    <wsdl:part element="sch5:updateContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingUdfsRequest">
    <wsdl:part element="sch19:listMailingUdfs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForNewAudienceResponse">
    <wsdl:part element="sch8:createDataUploadConfigForNewAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteGridResponse">
    <wsdl:part element="sch12:deleteGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateLinkResponse">
    <wsdl:part element="sch14:updateLinkResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listGridsRequest">
    <wsdl:part element="sch12:listGrids" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listUnsubTemplatesResponse">
    <wsdl:part element="sch4:listUnsubTemplatesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCampaignRequest">
    <wsdl:part element="sch3:updateCampaign" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listUdfCategoryNamesAndValuesRequest">
    <wsdl:part element="sch19:listUdfCategoryNamesAndValues" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateTabSeparatedGridResponse">
    <wsdl:part element="sch12:updateTabSeparatedGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupGridResponse">
    <wsdl:part element="sch12:lookupGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setSymbolMapResponse">
    <wsdl:part element="sch6:setSymbolMapResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setSymbolMapRequest">
    <wsdl:part element="sch6:setSymbolMap" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingUdfsResponse">
    <wsdl:part element="sch19:listMailingUdfsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelExportJobRequest">
    <wsdl:part element="sch11:cancelExportJob" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="buildPermutationProofSampleRequest">
    <wsdl:part element="sch15:buildPermutationProofSample" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendCellNowResponse">
    <wsdl:part element="sch15:sendCellNowResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellMeteringRequest">
    <wsdl:part element="sch4:updateCellMetering" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMailingAsScheduledRequest">
    <wsdl:part element="sch15:sendMailingAsScheduled" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupContentByAlternateKeyResponse">
    <wsdl:part element="sch5:lookupContentByAlternateKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveCellViewEReportsRequest">
    <wsdl:part element="sch10:retrieveCellViewEReports" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listProofAudienceEmailsResponse">
    <wsdl:part element="sch15:listProofAudienceEmailsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupAudienceByIdsRequest">
    <wsdl:part element="sch1:lookupAudienceByIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRTMVariationsRequest">
    <wsdl:part element="sch18:updateRTMVariations" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellAdvancedOptionsByIdRequest">
    <wsdl:part element="sch4:lookupCellAdvancedOptionsById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="buildPermutationProofSampleResponse">
    <wsdl:part element="sch15:buildPermutationProofSampleResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveCellViewEReportsResponse">
    <wsdl:part element="sch10:retrieveCellViewEReportsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDomainsResponse">
    <wsdl:part element="sch4:listDomainsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToDataColumnRequest">
    <wsdl:part element="sch6:mapSymbolToDataColumn" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudienceUdfsResponse">
    <wsdl:part element="sch19:listAudienceUdfsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listProofGroupSampleCIDsRequest">
    <wsdl:part element="sch15:listProofGroupSampleCIDs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellResponse">
    <wsdl:part element="sch4:updateCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createMailingResponse">
    <wsdl:part element="sch16:createMailingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="buildRandomProofSampleRequest">
    <wsdl:part element="sch15:buildRandomProofSample" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="startExportJobResponse">
    <wsdl:part element="sch11:startExportJobResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupContentDeliveryPartResponse">
    <wsdl:part element="sch5:lookupContentDeliveryPartResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToCustomFunctionResponse">
    <wsdl:part element="sch6:mapSymbolToCustomFunctionResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingsRequest">
    <wsdl:part element="sch16:listMailings" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createAudienceRequest">
    <wsdl:part element="sch1:createAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelCellResponse">
    <wsdl:part element="sch15:cancelCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellMeteringResponse">
    <wsdl:part element="sch4:updateCellMeteringResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listContentUdfsResponse">
    <wsdl:part element="sch19:listContentUdfsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listExportedDataColumnsResponse">
    <wsdl:part element="sch11:listExportedDataColumnsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupAudienceByIdRequest">
    <wsdl:part element="sch1:lookupAudienceById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToDataColumnResponse">
    <wsdl:part element="sch6:mapSymbolToDataColumnResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCampaignByIdResponse">
    <wsdl:part element="sch3:lookupCampaignByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteGridRequest">
    <wsdl:part element="sch12:deleteGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteRTMConfigurationRequest">
    <wsdl:part element="sch18:deleteRTMConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getGoodMailHeaderRequest">
    <wsdl:part element="sch4:getGoodMailHeader" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateAudienceRequest">
    <wsdl:part element="sch1:updateAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellDropDateRequest">
    <wsdl:part element="sch4:updateCellDropDate" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRecipientProfileResponse">
    <wsdl:part element="sch17:updateRecipientProfileResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupMailingByIdRequest">
    <wsdl:part element="sch16:lookupMailingById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateAudienceResponse">
    <wsdl:part element="sch1:updateAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listFeederQueuesRequest">
    <wsdl:part element="sch4:listFeederQueues" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveMailingViewEReportsUdfsResponse">
    <wsdl:part element="sch10:retrieveMailingViewEReportsUdfsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRTMTestCellResponse">
    <wsdl:part element="sch18:updateRTMTestCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupGridRequest">
    <wsdl:part element="sch12:lookupGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelExportJobResponse">
    <wsdl:part element="sch11:cancelExportJobResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDataColumnsForCellResponse">
    <wsdl:part element="sch6:listDataColumnsForCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellsRequest">
    <wsdl:part element="sch4:listCells" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupDataUploadStatusResponse">
    <wsdl:part element="sch8:lookupDataUploadStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrievePulseReportResponse">
    <wsdl:part element="sch10:retrievePulseReportResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="clearSymbolMapResponse">
    <wsdl:part element="sch6:clearSymbolMapResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRecipientCellEventsResponse">
    <wsdl:part element="sch7:listRecipientCellEventsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listClientsResponse">
    <wsdl:part element="sch20:listClientsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRTMQueuesResponse">
    <wsdl:part element="sch18:listRTMQueuesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProofGroupOptionsRequest">
    <wsdl:part element="sch15:getProofGroupOptions" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRecipientHistoryResponse">
    <wsdl:part element="sch7:listRecipientHistoryResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createAudienceClassRequest">
    <wsdl:part element="sch8:createAudienceClass" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCellProofAddressesResponse">
    <wsdl:part element="sch4:setCellProofAddressesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveMailingViewEReportsUdfsRequest">
    <wsdl:part element="sch10:retrieveMailingViewEReportsUdfs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteCellRequest">
    <wsdl:part element="sch4:deleteCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createXmlGridResponse">
    <wsdl:part element="sch12:createXmlGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapAllGridColumnsToSymbolsRequest">
    <wsdl:part element="sch6:mapAllGridColumnsToSymbols" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cloneCellRequest">
    <wsdl:part element="sch4:cloneCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCellUnsubRulesRequest">
    <wsdl:part element="sch4:setCellUnsubRules" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupContentByIdRequest">
    <wsdl:part element="sch5:lookupContentById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupRecipientAudienceProfileResponse">
    <wsdl:part element="sch7:lookupRecipientAudienceProfileResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listProofSampleCIDsResponse">
    <wsdl:part element="sch15:listProofSampleCIDsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createTabSeparatedGridResponse">
    <wsdl:part element="sch12:createTabSeparatedGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProofGroupOptionsResponse">
    <wsdl:part element="sch15:updateProofGroupOptionsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMessageResponse">
    <wsdl:part element="sch17:sendMessageResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupAudienceByAlternateKeyRequest">
    <wsdl:part element="sch1:lookupAudienceByAlternateKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellByAlternateKeyRequest">
    <wsdl:part element="sch4:lookupCellByAlternateKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellUdfCategoryNamesRequest">
    <wsdl:part element="sch19:listCellUdfCategoryNames" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellsByFilterRequest">
    <wsdl:part element="sch4:listCellsByFilter" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellsResponse">
    <wsdl:part element="sch4:listCellsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDataColumnsForAudienceResponse">
    <wsdl:part element="sch8:listDataColumnsForAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMailingNowRequest">
    <wsdl:part element="sch15:sendMailingNow" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listGridKeyValuesResponse">
    <wsdl:part element="sch12:listGridKeyValuesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listGridColumnsResponse">
    <wsdl:part element="sch12:listGridColumnsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellAdvancedOptionsByIdResponse">
    <wsdl:part element="sch4:lookupCellAdvancedOptionsByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteRTMConfigurationResponse">
    <wsdl:part element="sch18:deleteRTMConfigurationResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createXmlGridRequest">
    <wsdl:part element="sch12:createXmlGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRTMVariationsResponse">
    <wsdl:part element="sch18:updateRTMVariationsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listEReportTypesRequest">
    <wsdl:part element="sch10:listEReportTypes" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listContentRequest">
    <wsdl:part element="sch5:listContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteCampaignResponse">
    <wsdl:part element="sch3:deleteCampaignResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellByIdResponse">
    <wsdl:part element="sch4:lookupCellByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMailingNowResponse">
    <wsdl:part element="sch15:sendMailingNowResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRTMConfigurationResponse">
    <wsdl:part element="sch18:updateRTMConfigurationResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listUnsubTemplatesRequest">
    <wsdl:part element="sch4:listUnsubTemplates" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCellUnsubRulesResponse">
    <wsdl:part element="sch4:setCellUnsubRulesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateXmlGridRequest">
    <wsdl:part element="sch12:updateXmlGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudienceClassesRequest">
    <wsdl:part element="sch1:listAudienceClasses" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMappingFunctionsForCellResponse">
    <wsdl:part element="sch6:listMappingFunctionsForCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapGridColumnToSymbolResponse">
    <wsdl:part element="sch6:mapGridColumnToSymbolResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToContentResponse">
    <wsdl:part element="sch6:mapSymbolToContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="scheduleCellResponse">
    <wsdl:part element="sch15:scheduleCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMasterUniqueKeyColumnsRequest">
    <wsdl:part element="sch8:listMasterUniqueKeyColumns" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellUdfsResponse">
    <wsdl:part element="sch19:listCellUdfsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createCampaignResponse">
    <wsdl:part element="sch3:createCampaignResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="buildAudienceFromIBQueryResponse">
    <wsdl:part element="sch13:buildAudienceFromIBQueryResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetSymbolMapResponse">
    <wsdl:part element="sch6:resetSymbolMapResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupTabSeparatedGridRequest">
    <wsdl:part element="sch12:lookupTabSeparatedGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellAdvancedOptionsResponse">
    <wsdl:part element="sch4:updateCellAdvancedOptionsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudienceClassesResponse">
    <wsdl:part element="sch1:listAudienceClassesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="refreshEReportsResponse">
    <wsdl:part element="sch10:refreshEReportsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendProofMessageResponse">
    <wsdl:part element="sch17:sendProofMessageResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAvailableMetersRequest">
    <wsdl:part element="sch4:listAvailableMeters" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteCellResponse">
    <wsdl:part element="sch4:deleteCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMailingLaterRequest">
    <wsdl:part element="sch15:sendMailingLater" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listGridKeyValuesRequest">
    <wsdl:part element="sch12:listGridKeyValues" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="unhideContentRequest">
    <wsdl:part element="sch5:unhideContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCellProofAddressesRequest">
    <wsdl:part element="sch4:setCellProofAddresses" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCellAudiencesResponse">
    <wsdl:part element="sch4:setCellAudiencesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMasterUniqueKeyColumnsResponse">
    <wsdl:part element="sch8:listMasterUniqueKeyColumnsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listFeederQueuesResponse">
    <wsdl:part element="sch4:listFeederQueuesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellsByFilterResponse">
    <wsdl:part element="sch4:listCellsByFilterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudienceUdfsRequest">
    <wsdl:part element="sch19:listAudienceUdfs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDataColumnsForCellRequest">
    <wsdl:part element="sch6:listDataColumnsForCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupSymbolMapRequest">
    <wsdl:part element="sch6:lookupSymbolMap" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupIBQueryByIdRequest">
    <wsdl:part element="sch13:lookupIBQueryById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createTabSeparatedGridRequest">
    <wsdl:part element="sch12:createTabSeparatedGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createCellRequest">
    <wsdl:part element="sch4:createCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="refreshEReportsRequest">
    <wsdl:part element="sch10:refreshEReports" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="scheduleMailingResponse">
    <wsdl:part element="sch15:scheduleMailingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupLinkByEncodedURLRequest">
    <wsdl:part element="sch14:lookupLinkByEncodedURL" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEReportsRefreshStatusRequest">
    <wsdl:part element="sch10:getEReportsRefreshStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listProofAudienceEmailsRequest">
    <wsdl:part element="sch15:listProofAudienceEmails" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupAudienceByIdsResponse">
    <wsdl:part element="sch1:lookupAudienceByIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="scheduleMailingRequest">
    <wsdl:part element="sch15:scheduleMailing" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellHeadersRequest">
    <wsdl:part element="sch4:updateCellHeaders" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMemberCountRequest">
    <wsdl:part element="sch1:getMemberCount" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForNewSuppressionResponse">
    <wsdl:part element="sch8:createDataUploadConfigForNewSuppressionResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listLinksRequest">
    <wsdl:part element="sch14:listLinks" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupContentDeliveryPartRequest">
    <wsdl:part element="sch5:lookupContentDeliveryPart" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForNewAudienceRequest">
    <wsdl:part element="sch8:createDataUploadConfigForNewAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="buildAudienceFromIBQueryRequest">
    <wsdl:part element="sch13:buildAudienceFromIBQuery" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForNewSuppressionRequest">
    <wsdl:part element="sch8:createDataUploadConfigForNewSuppression" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelCellRequest">
    <wsdl:part element="sch15:cancelCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingsByFilterRequest">
    <wsdl:part element="sch16:listMailingsByFilter" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cloneMailingResponse">
    <wsdl:part element="sch16:cloneMailingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendCellNowRequest">
    <wsdl:part element="sch15:sendCellNow" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellUdfsRequest">
    <wsdl:part element="sch19:listCellUdfs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createRTMConfigurationResponse">
    <wsdl:part element="sch18:createRTMConfigurationResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRecipientHistoryRequest">
    <wsdl:part element="sch7:listRecipientHistory" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingsByFilterResponse">
    <wsdl:part element="sch16:listMailingsByFilterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateLinkRequest">
    <wsdl:part element="sch14:updateLink" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellRequest">
    <wsdl:part element="sch4:updateCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setCellAudiencesRequest">
    <wsdl:part element="sch4:setCellAudiences" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listGridsResponse">
    <wsdl:part element="sch12:listGridsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAvailableMetersResponse">
    <wsdl:part element="sch4:listAvailableMetersResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRecipientCellEventsRequest">
    <wsdl:part element="sch7:listRecipientCellEvents" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProofGroupOptionsResponse">
    <wsdl:part element="sch15:getProofGroupOptionsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteMailingResponse">
    <wsdl:part element="sch16:deleteMailingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteCampaignRequest">
    <wsdl:part element="sch3:deleteCampaign" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRTMTestCellRequest">
    <wsdl:part element="sch18:updateRTMTestCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToLiteralValueRequest">
    <wsdl:part element="sch6:mapSymbolToLiteralValue" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupMailingByIdResponse">
    <wsdl:part element="sch16:lookupMailingByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getExportJobStatusRequest">
    <wsdl:part element="sch11:getExportJobStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeliverabilityReportResponse">
    <wsdl:part element="sch9:getDeliverabilityReportResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrievePulseReportRequest">
    <wsdl:part element="sch10:retrievePulseReport" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellStatusResponse">
    <wsdl:part element="sch15:lookupCellStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMailingLaterResponse">
    <wsdl:part element="sch15:sendMailingLaterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupAudienceByIdResponse">
    <wsdl:part element="sch1:lookupAudienceByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCellUdfCategoryNamesResponse">
    <wsdl:part element="sch19:listCellUdfCategoryNamesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateMailingRequest">
    <wsdl:part element="sch16:updateMailing" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="clearSymbolMapRequest">
    <wsdl:part element="sch6:clearSymbolMap" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellWebAnalyticsRequest">
    <wsdl:part element="sch4:updateCellWebAnalytics" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellWebAnalyticsResponse">
    <wsdl:part element="sch4:updateCellWebAnalyticsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateTabSeparatedGridRequest">
    <wsdl:part element="sch12:updateTabSeparatedGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForGlobalUnsubResponse">
    <wsdl:part element="sch8:createDataUploadConfigForGlobalUnsubResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeliverabilityReportRequest">
    <wsdl:part element="sch9:getDeliverabilityReport" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="canAccessClientResponse">
    <wsdl:part element="sch20:canAccessClientResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForExistingSuppressionRequest">
    <wsdl:part element="sch8:createDataUploadConfigForExistingSuppression" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createCellResponse">
    <wsdl:part element="sch4:createCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createRTMConfigurationRequest">
    <wsdl:part element="sch18:createRTMConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellConversionTrackingResponse">
    <wsdl:part element="sch4:updateCellConversionTrackingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="wrapUrlsInTextResponse">
    <wsdl:part element="sch5:wrapUrlsInTextResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingsResponse">
    <wsdl:part element="sch16:listMailingsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProofSampleStatusRequest">
    <wsdl:part element="sch15:getProofSampleStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateXmlGridResponse">
    <wsdl:part element="sch12:updateXmlGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listUdfCategoryNamesAndValuesResponse">
    <wsdl:part element="sch19:listUdfCategoryNamesAndValuesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDomainsRequest">
    <wsdl:part element="sch4:listDomains" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupRTMConfigurationRequest">
    <wsdl:part element="sch18:lookupRTMConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listMailingsByFilterAndMailingTypeResponse">
    <wsdl:part element="sch16:listMailingsByFilterAndMailingTypeResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createContentRequest">
    <wsdl:part element="sch5:createContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupContentByAlternateKeyRequest">
    <wsdl:part element="sch5:lookupContentByAlternateKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellAdvancedOptionsRequest">
    <wsdl:part element="sch4:updateCellAdvancedOptions" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createAudienceResponse">
    <wsdl:part element="sch1:createAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="promoteRTMTestCellRequest">
    <wsdl:part element="sch18:promoteRTMTestCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendProofsNowResponse">
    <wsdl:part element="sch15:sendProofsNowResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapGridColumnToSymbolByKeyLiteralRequest">
    <wsdl:part element="sch6:mapGridColumnToSymbolByKeyLiteral" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getExportJobStatusResponse">
    <wsdl:part element="sch11:getExportJobStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupLinkByIdRequest">
    <wsdl:part element="sch14:lookupLinkById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="retrieveMailingViewEReportsResponse">
    <wsdl:part element="sch10:retrieveMailingViewEReportsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendCellAsScheduledRequest">
    <wsdl:part element="sch15:sendCellAsScheduled" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listWebAnalyticsTokensResponse">
    <wsdl:part element="sch4:listWebAnalyticsTokensResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteAllRTMVariationsResponse">
    <wsdl:part element="sch18:deleteAllRTMVariationsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listContentAltRequest">
    <wsdl:part element="sch5:listContentAlt" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudiencesResponse">
    <wsdl:part element="sch1:listAudiencesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="pauseCellRequest">
    <wsdl:part element="sch15:pauseCell" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteAudienceResponse">
    <wsdl:part element="sch1:deleteAudienceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateContentRequest">
    <wsdl:part element="sch5:updateContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupContentByIdResponse">
    <wsdl:part element="sch5:lookupContentByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapAllGridColumnsToSymbolsResponse">
    <wsdl:part element="sch6:mapAllGridColumnsToSymbolsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="unhideContentResponse">
    <wsdl:part element="sch5:unhideContentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudiencesByFilterRequest">
    <wsdl:part element="sch1:listAudiencesByFilter" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendMailingAsScheduledResponse">
    <wsdl:part element="sch15:sendMailingAsScheduledResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupAudienceByAlternateKeyResponse">
    <wsdl:part element="sch1:lookupAudienceByAlternateKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupDataUploadStatusRequest">
    <wsdl:part element="sch8:lookupDataUploadStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRTMConfigurationsResponse">
    <wsdl:part element="sch18:listRTMConfigurationsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendCellLaterResponse">
    <wsdl:part element="sch15:sendCellLaterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToCustomFunctionRequest">
    <wsdl:part element="sch6:mapSymbolToCustomFunction" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createGridRequest">
    <wsdl:part element="sch12:createGrid" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendProofMessageRequest">
    <wsdl:part element="sch17:sendProofMessage" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getIBJobStatusRequest">
    <wsdl:part element="sch13:getIBJobStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendProofsNowRequest">
    <wsdl:part element="sch15:sendProofsNow" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listLinksResponse">
    <wsdl:part element="sch14:listLinksResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateRTMConfigurationRequest">
    <wsdl:part element="sch18:updateRTMConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateContentDeliveryPartResponse">
    <wsdl:part element="sch5:updateContentDeliveryPartResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapSymbolToLiteralValueResponse">
    <wsdl:part element="sch6:mapSymbolToLiteralValueResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="startExportJobRequest">
    <wsdl:part element="sch11:startExportJob" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listAudiencesByFilterResponse">
    <wsdl:part element="sch1:listAudiencesByFilterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupXmlGridResponse">
    <wsdl:part element="sch12:lookupXmlGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listProofSampleCIDsRequest">
    <wsdl:part element="sch15:listProofSampleCIDs" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="hideContentRequest">
    <wsdl:part element="sch5:hideContent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createGridResponse">
    <wsdl:part element="sch12:createGridResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupIBQueryByIdResponse">
    <wsdl:part element="sch13:lookupIBQueryByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupRecipientProfileResponse">
    <wsdl:part element="sch7:lookupRecipientProfileResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listIBQueriesRequest">
    <wsdl:part element="sch13:listIBQueries" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listRTMQueuesRequest">
    <wsdl:part element="sch18:listRTMQueues" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cloneMailingRequest">
    <wsdl:part element="sch16:cloneMailing" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cloneCellResponse">
    <wsdl:part element="sch4:cloneCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupSymbolMapResponse">
    <wsdl:part element="sch6:lookupSymbolMapResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createDataUploadConfigForExistingAudienceRequest">
    <wsdl:part element="sch8:createDataUploadConfigForExistingAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellConversionTrackingRequest">
    <wsdl:part element="sch4:updateCellConversionTracking" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="wrapUrlsInTextRequest">
    <wsdl:part element="sch5:wrapUrlsInText" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listIBQueriesResponse">
    <wsdl:part element="sch13:listIBQueriesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getProofSampleSettingResponse">
    <wsdl:part element="sch15:getProofSampleSettingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="pauseCellResponse">
    <wsdl:part element="sch15:pauseCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listEReportTypesResponse">
    <wsdl:part element="sch10:listEReportTypesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProofGroupSampleCIDsResponse">
    <wsdl:part element="sch15:updateProofGroupSampleCIDsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMailingVolumeReportRequest">
    <wsdl:part element="sch9:getMailingVolumeReport" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendCellLaterRequest">
    <wsdl:part element="sch15:sendCellLater" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSymbolsInCellResponse">
    <wsdl:part element="sch6:listSymbolsInCellResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupRecipientAudienceProfileRequest">
    <wsdl:part element="sch7:lookupRecipientAudienceProfile" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="mapGridColumnToSymbolRequest">
    <wsdl:part element="sch6:mapGridColumnToSymbol" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCampaignsRequest">
    <wsdl:part element="sch3:listCampaigns" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupCellByIdRequest">
    <wsdl:part element="sch4:lookupCellById" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateCellDropDateResponse">
    <wsdl:part element="sch4:updateCellDropDateResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupLinkByIdResponse">
    <wsdl:part element="sch14:lookupLinkByIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getGoodMailHeaderResponse">
    <wsdl:part element="sch4:getGoodMailHeaderResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="lookupLinkByEncodedURLResponse">
    <wsdl:part element="sch14:lookupLinkByEncodedURLResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteAudienceRequest">
    <wsdl:part element="sch1:deleteAudience" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="eDialogWebServices">
<wsdl:operation name="mapSymbolToCustomFunction">
<wsdl:documentation>
                Maps the specified symbol to a custom function that was configured
                by your account team. See listMappingFunctionsForCell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:mapSymbolToCustomFunctionRequest">
    </wsdl:input>
<wsdl:output message="tns:mapSymbolToCustomFunctionResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listContentUdfs">
<wsdl:documentation>
                Returns a list/array of all available values for each of the five content object UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listContentUdfsRequest">
    </wsdl:input>
<wsdl:output message="tns:listContentUdfsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getIBJobStatus">
<wsdl:documentation>
				Returns the status of an InsightBuilder job.
				Introduced in e-Dialog Web Services 1.4.
			</wsdl:documentation>
<wsdl:input message="tns:getIBJobStatusRequest">
    </wsdl:input>
<wsdl:output message="tns:getIBJobStatusResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listProofGroupSampleCIDs">
<wsdl:documentation>
                Returns a list of customer IDs that were used for a specific LProof
                group during the most recent build sample operation.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listProofGroupSampleCIDsRequest">
    </wsdl:input>
<wsdl:output message="tns:listProofGroupSampleCIDsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="buildPermutationProofSample">
<wsdl:documentation>
                Generates a file that contains a subset of data columns from the full export file.
                You can get the list of data columns available for generating the permutation by using the listExportedDataColumns function.
                To check the status of the operation, you can use the getProofSampleStatus function.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:buildPermutationProofSampleRequest">
    </wsdl:input>
<wsdl:output message="tns:buildPermutationProofSampleResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendProofMessage">
<wsdl:documentation>
            Adds or updates recipient profile data and sends a proof message to a single recipient.
            The recipient e-mail address can be substituted with a replacement address.
            This function is intended for generating tests of messages to be sent via the sendMessage function.
            Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:sendProofMessageRequest">
    </wsdl:input>
<wsdl:output message="tns:sendProofMessageResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteGrid">
<wsdl:documentation>
                Deletes a grid. If you delete a grid that is used in a mail that 
                has not yet been mailed, the symbols will resolve correctly.
                However, you cannot use a deleted grid in another cell.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:deleteGridRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listFeederQueues">
<wsdl:documentation>
                Returns a list of available feeder queues.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listFeederQueuesRequest">
    </wsdl:input>
<wsdl:output message="tns:listFeederQueuesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listAllDataColumns">
<wsdl:documentation>
                Gets a list of defined data column information from the data dictionary.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listAllDataColumnsRequest">
    </wsdl:input>
<wsdl:output message="tns:listAllDataColumnsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendMessage">
<wsdl:documentation>
            Adds or updates recipient profile data and sends a message to a single recipient.
            For example, if a customer purchases goods from your web site, you can instantly 
            update the customer's shipping address and send that customer an order confirmation 
            message that includes a detailed list of items purchased, quantities, prices, 
            discounts, shipping fees, and so forth.
            Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:sendMessageRequest">
    </wsdl:input>
<wsdl:output message="tns:sendMessageResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="canAccessClient">
<wsdl:documentation>
                Returns true if the user has permission to access the client ID or schema name passed as an argument.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:canAccessClientRequest">
    </wsdl:input>
<wsdl:output message="tns:canAccessClientResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="cloneAudience">
<wsdl:documentation>
                Creates a copy of an audience list. This function does not copy membership data (users) into the new audience list.
                Instead, it creates an audience list that is empty.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:cloneAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:cloneAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createAudienceClass">
<wsdl:documentation>
            Creates a class (group of data columns) by providing a list of data dictionary rows.
            Calling this function with an empty column identifier list returns Class ID 95. To get a complete list 
            of data columns from the data dictionary, use listAllDataColumns.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createAudienceClassRequest">
    </wsdl:input>
<wsdl:output message="tns:createAudienceClassResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="hideContent">
<wsdl:documentation>
                Marks content object as hidden, which results if it is not
                appearing in listContent results. However, you can look up
                hidden content with the lookupContentByAlternateKey() and
                lookupContentById() functions. You cannot hide content that is
                a cell’s main content item.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:hideContentRequest">
    </wsdl:input>
<wsdl:output message="tns:hideContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="retrievePulseReport">
<wsdl:documentation>
				Returns hourly event counts for a specific cellId.
				Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:retrievePulseReportRequest">
    </wsdl:input>
<wsdl:output message="tns:retrievePulseReportResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellMetering">
<wsdl:documentation>Sets the metering scheme to use when the cell is mailed. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:updateCellMeteringRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellMeteringResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupLinkByEncodedURL">
<wsdl:documentation>
            Returns a link that is associated with an encoded URL sent in a message.
            Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:lookupLinkByEncodedURLRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupLinkByEncodedURLResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listExportedDataColumns">
<wsdl:documentation>
                Returns a list of columns from the exported data file.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listExportedDataColumnsRequest">
    </wsdl:input>
<wsdl:output message="tns:listExportedDataColumnsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupMailingByAlternateKey">
<wsdl:documentation>
                Looks for a mailing using the alternate (user-provided) key.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupMailingByAlternateKeyRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupMailingByAlternateKeyResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createDataUploadConfigForNewSuppression">
<wsdl:documentation>
                Creates a data upload configuration for a new suppression list based on a default Class ID 98.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createDataUploadConfigForNewSuppressionRequest">
    </wsdl:input>
<wsdl:output message="tns:createDataUploadConfigForNewSuppressionResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listIBQueries">
<wsdl:documentation>
                Returns the properties of an InsightBuilder query identified by a given ID.
                Introduced in e-Dialog Web Services 1.4.
            </wsdl:documentation>
<wsdl:input message="tns:listIBQueriesRequest">
    </wsdl:input>
<wsdl:output message="tns:listIBQueriesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendMailingLater">
<wsdl:documentation>
                Attempts to asynchronously mail all unmailed
                cells in this mailing at a specified date/time.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:sendMailingLaterRequest">
    </wsdl:input>
<wsdl:output message="tns:sendMailingLaterResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapSymbolToDataColumn">
<wsdl:documentation>
                Maps a specific symbol to a data column. The data column must
                exist in the set returned by listDataColumnsForCell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:mapSymbolToDataColumnRequest">
    </wsdl:input>
<wsdl:output message="tns:mapSymbolToDataColumnResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupGrid">
<wsdl:documentation>
                Retrieves the rows and columns of a grid that is stored in rows, including the key column. 
                For a grid stored in tab-delimited format, use lookupTabSeparatedGrid(). 
                For a grid stored in XML, use lookupXMLGrid().
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:lookupGridRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendMailingNow">
<wsdl:documentation>
                Attempts to asynchronously mail all unmailed cells in this mailing.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:sendMailingNowRequest">
    </wsdl:input>
<wsdl:output message="tns:sendMailingNowResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="setCellUnsubRules">
<wsdl:documentation>
                Binds a cell ID to an unsub template ID and an unsub audience ID (optional).
                The first unsub template available is used by default, and is
                configured for global unsubscribe. e-Dialog recommends that you
                modify these settings carefully. Verify that your unsubscribe
                policies are in compliance with e-Dialog regulations.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:setCellUnsubRulesRequest">
    </wsdl:input>
<wsdl:output message="tns:setCellUnsubRulesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="setCellProofAddresses">
<wsdl:documentation>
                Specifies the e-mail addresses to receive proofs of the specified cell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:setCellProofAddressesRequest">
    </wsdl:input>
<wsdl:output message="tns:setCellProofAddressesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listProofSampleCIDs">
<wsdl:documentation>
                Returns a list of customer IDs that were used during the most recent build sample operation.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listProofSampleCIDsRequest">
    </wsdl:input>
<wsdl:output message="tns:listProofSampleCIDsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createXmlGrid">
<wsdl:documentation>
                Creates a grid for use in content from XML. Each column of the grid represents a symbol. Each row contains string values to merge into the content. The first column of the grid contains key values used to determine the content to merge for each recipient.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:createXmlGridRequest">
    </wsdl:input>
<wsdl:output message="tns:createXmlGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteCell">
<wsdl:documentation>
                Deletes the specified cell. You cannot delete a cell whose status is "Mailed."
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:deleteCellRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="setSymbolMap">
<wsdl:documentation>
                Sets the entire symbol map using a JSON data structure. See the
                Developer's Guide for a description.
                Throws an exception if any of the symbol names in the symbolMap
                are illegal or if any of the symbol definitions are invalid.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:setSymbolMapRequest">
    </wsdl:input>
<wsdl:output message="tns:setSymbolMapResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateRTMVariations">
<wsdl:documentation>
                Assigns the set of allowed variations of a realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:updateRTMVariationsRequest">
    </wsdl:input>
<wsdl:output message="tns:updateRTMVariationsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listSymbolsInText">
<wsdl:documentation>Returns a list of symbols in the specified  text. Introduced in e-Dialog Web Services 1.0.</wsdl:documentation>
<wsdl:input message="tns:listSymbolsInTextRequest">
    </wsdl:input>
<wsdl:output message="tns:listSymbolsInTextResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateRTMConfiguration">
<wsdl:documentation>
                Updates a realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:updateRTMConfigurationRequest">
    </wsdl:input>
<wsdl:output message="tns:updateRTMConfigurationResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupMailingById">
<wsdl:documentation>
                Looks for a mailing using the specified ID.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupMailingByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupMailingByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCampaign">
<wsdl:documentation>
            Updates specific properties of a campaign. Throws an exception if the campaign does not exist (or has been deleted).
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:updateCampaignRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCampaignResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createDataUploadConfigForExistingAudience">
<wsdl:documentation>
                Creates a data upload configuration for an existing audience list ID.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createDataUploadConfigForExistingAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:createDataUploadConfigForExistingAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listProofAudienceEmails">
<wsdl:documentation>
                Returns the list of customer IDs that were used during the most
                recent build sample operation.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listProofAudienceEmailsRequest">
    </wsdl:input>
<wsdl:output message="tns:listProofAudienceEmailsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapAllGridColumnsToSymbolsByKeyLiteral">
<wsdl:documentation>
                Maps a key value from the grid to symbols in the cell content.
                The keySymbolName is not a symbol ( _SYMBOL__).
                It is a key value from the grid.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:mapAllGridColumnsToSymbolsByKeyLiteralRequest">
    </wsdl:input>
<wsdl:output message="tns:mapAllGridColumnsToSymbolsByKeyLiteralResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createDataUploadConfigForGlobalUnsub">
<wsdl:documentation>
                Creates a data upload configuration to perform a global unsubscribe.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createDataUploadConfigForGlobalUnsubRequest">
    </wsdl:input>
<wsdl:output message="tns:createDataUploadConfigForGlobalUnsubResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupXmlGrid">
<wsdl:documentation>
                Retrieves the rows and columns of a grid that is stored in XML format, including the key column. 
                For a grid stored in rows, use lookupGrid(). 
                For a grid stored in tab-delimited format, use lookupTabSeparatedGrid().
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:lookupXmlGridRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupXmlGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellHeaders">
<wsdl:documentation>
                Assigns the specified e-mail headers to a cell. The headers are
                included in each message sent through the cell. Headers can
                contain merge symbols.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:updateCellHeadersRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellHeadersResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendCellLater">
<wsdl:documentation>
                Attempts to asynchronously mail a cell at a specified date/time.
                If the status of the cell is Mailing, Merging, or Merged, you cannot send it.
                Does not require that the cell has been proofed.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:sendCellLaterRequest">
    </wsdl:input>
<wsdl:output message="tns:sendCellLaterResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listUdfCategoryNamesAndValues">
<wsdl:documentation>
                Returns a list of category names and values for a given entity.
                Introduced in e-Dialog Web Services 1.3. Ability to return information about 10 UDFs added in e-Dialog Web Services 1.4.2.
            </wsdl:documentation>
<wsdl:input message="tns:listUdfCategoryNamesAndValuesRequest">
    </wsdl:input>
<wsdl:output message="tns:listUdfCategoryNamesAndValuesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getProofSampleSetting">
<wsdl:documentation>
                Gets information about the proof sample. If the sample type is Random (created with the
                buildRandomProofSample function), returns the size of the sample. If the sample type is
                Permutation (created with the buildPermutationProofSample function), returns a list/array
                of column names. 
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:getProofSampleSettingRequest">
    </wsdl:input>
<wsdl:output message="tns:getProofSampleSettingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getMemberCount">
<wsdl:documentation>
                Returns the actual member count and updates the audience with the current total.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:getMemberCountRequest">
    </wsdl:input>
<wsdl:output message="tns:getMemberCountResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createGrid">
<wsdl:documentation>
                Creates a grid for use in content, Each column of the grid represents a symbol. Each row contains string values to merge into the content. The first column of the grid contains key values used to determine the content to merge for each recipient.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:createGridRequest">
    </wsdl:input>
<wsdl:output message="tns:createGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendCellAsScheduled">
<wsdl:documentation>
                Attempts to asynchronously mail a cell at the time previously set
                for merging and mailing. Does not require that the cell has been
                proofed.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:sendCellAsScheduledRequest">
    </wsdl:input>
<wsdl:output message="tns:sendCellAsScheduledResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getDeliverabilityReport">
<wsdl:documentation>
				Returns mailing information for a specific EventType (Undeliverable, Unsubscribe, Spam) in a given date range.
				The results are grouped based on the 'Dimension' filters passed in. Only 2 dimensions are allowed at a time. 
				Some of the dimensions can take 'null' which means group by all possible values..
				
				The report can be broken down into different dimensions:
					1. CELLID - Single cellI ID (123) or all cell IDs (null)
					2. DOMAIN - Domain to which the mailing was sent/received. '***OTHER***' if the domain is not tracked.\
					3. TIME - Group the results hourly (h) or daily (d). This cannot be 'null'
					4. CATEGORY - Only valid for "Undeliverable" 
					5. SOURCE - Only valid for "Undeliverable" and "Unsubscribe" events
						"Undeliverables" can be by email (Undel_via_email) or by some other source (Undel).
						"Unsubscribes" can be by email (unsub_via_email) or some other source (unsub)
					6. UNDELTYPE - Only valid for "Undeliverables"
						Valid values are 't' (temporary) and 'p' (permanent)
				Valid start and end date are required. Null is reserved for the future. 
				Introduced in e-Dialog Web Services 1.4.
			</wsdl:documentation>
<wsdl:input message="tns:getDeliverabilityReportRequest">
    </wsdl:input>
<wsdl:output message="tns:getDeliverabilityReportResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listLinks">
<wsdl:documentation>
                Get a list of links filtered by the specified settings. Filter settings are optional.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listLinksRequest">
    </wsdl:input>
<wsdl:output message="tns:listLinksResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupCampaignById">
<wsdl:documentation>
            Looks up an existing campaign by identifier. Returns a 
            campaignDetailType structure containing identifier, name, 
            description, creation date, modification date, and user-defined field values.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupCampaignByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupCampaignByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createCell">
<wsdl:documentation>
            Creates a new cell. Throws an exception if
            an alternateKey was provided and a cell with that key
            already exists or the domain name of the
            fromAddress is not included in the set of
            supported domain names and
            does not pass a basic validation check.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createCellRequest">
    </wsdl:input>
<wsdl:output message="tns:createCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupCellById">
<wsdl:documentation>
            Returns a full set of cell properties.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupCellByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupCellByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapSymbolToContent">
<wsdl:documentation>
                Maps the specified symbol to a content object reference.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:mapSymbolToContentRequest">
    </wsdl:input>
<wsdl:output message="tns:mapSymbolToContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listUnsubTemplates">
<wsdl:documentation>
                Returns a list of the unsubscribe templates available to the cell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listUnsubTemplatesRequest">
    </wsdl:input>
<wsdl:output message="tns:listUnsubTemplatesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listAvailableMeters">
<wsdl:documentation>
                Returns a list of available metering schemes.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listAvailableMetersRequest">
    </wsdl:input>
<wsdl:output message="tns:listAvailableMetersResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listForwardToFriendTemplates">
<wsdl:documentation>
                Returns a list of available Forward-to-a-Friend template names.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listForwardToFriendTemplatesRequest">
    </wsdl:input>
<wsdl:output message="tns:listForwardToFriendTemplatesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="cancelExportJob">
<wsdl:documentation>
                If an export job is running for the specified cell, cancels the export job.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:cancelExportJobRequest">
    </wsdl:input>
<wsdl:output message="tns:cancelExportJobResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="downloadAudience">
<wsdl:documentation>Retrieves an audience. Introduced in e-Dialog Web Services 1.2.</wsdl:documentation>
<wsdl:input message="tns:downloadAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:downloadAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listClients">
<wsdl:documentation>
                Returns a list of clients that are available to the currently logged in user.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:listClientsRequest">
    </wsdl:input>
<wsdl:output message="tns:listClientsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupCellStatus">
<wsdl:documentation>
                Requests the status of the specified cell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupCellStatusRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupCellStatusResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteAudience">
<wsdl:documentation>
                Deletes an audience.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:deleteAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateXmlGrid">
<wsdl:documentation>
                Updates a  grid for use in content.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:updateXmlGridRequest">
    </wsdl:input>
<wsdl:output message="tns:updateXmlGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listCampaigns">
<wsdl:documentation>
                Returns a list of campaigns, including the ID, name, creation date, and user-defined field values.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listCampaignsRequest">
    </wsdl:input>
<wsdl:output message="tns:listCampaignsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listGrids">
<wsdl:documentation>
                List grids according matching filtering conditions.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listGridsRequest">
    </wsdl:input>
<wsdl:output message="tns:listGridsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createAudience">
<wsdl:documentation>
            Creates a new audience, either membership or suppression,
            based on the specified type, and using the specified class
            identifier (which defines which member fields to include).
            See listAudienceClasses.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:createAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateContentDeliveryPart">
<wsdl:documentation>
                Allows a user to update the individual MIME representations for
                a piece of content related by a content ID. Currently,
                e-Dialog Web Services supports "Text" content,
                "HTML" content, and "Landing" page content parts.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:updateContentDeliveryPartRequest">
    </wsdl:input>
<wsdl:output message="tns:updateContentDeliveryPartResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listAudiencesByFilter">
<wsdl:documentation>
                Lists the available audiences using the specified filter settings.
                Does not list audiences that have a status of DELETED. The filter* arguments are optional arguments
                used to filter the results. Dates in date ranges are inclusive.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listAudiencesByFilterRequest">
    </wsdl:input>
<wsdl:output message="tns:listAudiencesByFilterResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getEReportsRefreshStatus">
<wsdl:documentation>
				Get the status of the eReports refresh.
				Introduced
				in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:getEReportsRefreshStatusRequest">
    </wsdl:input>
<wsdl:output message="tns:getEReportsRefreshStatusResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listDomains">
<wsdl:documentation>
                Returns a list of domains that you can use in mailings. There are two different types/sets of domains:
                domains that can be used in from addresses, and domains that can be used for redirected links.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listDomainsRequest">
    </wsdl:input>
<wsdl:output message="tns:listDomainsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listMappingFunctionsForCell">
<wsdl:documentation>
                Returns a list of custom functions to which a symbol within the
                cell can be mapped. See mapSymbolToCustomFunction.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listMappingFunctionsForCellRequest">
    </wsdl:input>
<wsdl:output message="tns:listMappingFunctionsForCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellDropDate">
<wsdl:documentation>Updates the date when a cell is scheduled to be sent. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:updateCellDropDateRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellDropDateResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateAudience">
<wsdl:documentation>
                Updates the properties of an audience.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:updateAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:updateAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="refreshEReports">
<wsdl:documentation>
				Forces a refresh of eReports data for a mailing.
				Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:refreshEReportsRequest">
    </wsdl:input>
<wsdl:output message="tns:refreshEReportsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createTabSeparatedGrid">
<wsdl:documentation>
                Creates a grid for use in content, based on tab-delimited data. Each column of the grid represents a symbol. Each row contains string values to merge into the content. The first column of the grid contains key values used to determine the content to merge for each recipient.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:createTabSeparatedGridRequest">
    </wsdl:input>
<wsdl:output message="tns:createTabSeparatedGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="pauseCell">
<wsdl:documentation>
                Attempts to pause a cell that is sending proofs or final e-mails.
                A cell must have a status of MAILING, MERGED, MERGING, or PROOFING to be paused.
                MERGING, MERGED status support added in e-Dialog Web Services 1.3.
                Introduced in e-Dialog Web Services 1.1.                
            </wsdl:documentation>
<wsdl:input message="tns:pauseCellRequest">
    </wsdl:input>
<wsdl:output message="tns:pauseCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="scheduleMailing">
<wsdl:documentation>
                Lets you set the date when the merger will occur and, separately specify when the cells in the mailing will be sent.
                If you schedule sending a mailing, all of the cells that are ready to mail are sent. If the merger is not completed
                by the mail date, the mail is sent when the merger is complete.  During the merger, the cell status is Mailing.
                You can pause and cancel a cell after the merge has started and before the mail is being sent.
                If you do so, the cell status is Cancelled. Past dates are allowed for the merger.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:scheduleMailingRequest">
    </wsdl:input>
<wsdl:output message="tns:scheduleMailingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listGridKeyValues">
<wsdl:documentation>
                Lists all the values in the key column of the grid. These are the 
                values that are used to determine what content to merge for each
                recipient.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listGridKeyValuesRequest">
    </wsdl:input>
<wsdl:output message="tns:listGridKeyValuesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellConversionTracking">
<wsdl:documentation>Sets the cookie lifetime for tracking customer activity on the client's website. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:updateCellConversionTrackingRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellConversionTrackingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="promoteRTMTestCell">
<wsdl:documentation>
                Promotes the test cell associated with a realtime messaging configuration (RTM) or
                an RTM variation, making it the current cell. After you use this function, sendMessage() 
                uses this cell when sending a realtime message.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:promoteRTMTestCellRequest">
    </wsdl:input>
<wsdl:output message="tns:promoteRTMTestCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapGridColumnToSymbolByKeyLiteral">
<wsdl:documentation>
                Maps a key value from the grid to a symbol in the cell content.
                The keySymbolName is not a symbol ( _SYMBOL__).
                It is a key value from the grid.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:mapGridColumnToSymbolByKeyLiteralRequest">
    </wsdl:input>
<wsdl:output message="tns:mapGridColumnToSymbolByKeyLiteralResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createRTMConfiguration">
<wsdl:documentation>
                Creates a new realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:createRTMConfigurationRequest">
    </wsdl:input>
<wsdl:output message="tns:createRTMConfigurationResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getCellContentId">
<wsdl:documentation>
                Returns the content ID assigned to the cell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:getCellContentIdRequest">
    </wsdl:input>
<wsdl:output message="tns:getCellContentIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="wrapUrlsInText">
<wsdl:documentation>
                Finds links in the string you provide and adds anchor tags (a href=) to them.
                It does change content stored in the database.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:wrapUrlsInTextRequest">
    </wsdl:input>
<wsdl:output message="tns:wrapUrlsInTextResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateRTMTestCell">
<wsdl:documentation>
                Assigns a cell to a realtime messaging configuration as the "test" cell. 
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:updateRTMTestCellRequest">
    </wsdl:input>
<wsdl:output message="tns:updateRTMTestCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupContentByAlternateKey">
<wsdl:documentation>Returns the content object that has the specified alternative key. Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupContentByAlternateKeyRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupContentByAlternateKeyResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateProofGroupOptions">
<wsdl:documentation>
                Sets the options  for the proof group specified, including whether to include in proofs,
                include in the final e-mail, and send multipart samples as text.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:updateProofGroupOptionsRequest">
    </wsdl:input>
<wsdl:output message="tns:updateProofGroupOptionsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateRecipientProfile">
<wsdl:documentation>
            Adds or updates recipient profile data, adds a recipient to audience lists,
            and removes a recipient from audience lists.
            Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:updateRecipientProfileRequest">
    </wsdl:input>
<wsdl:output message="tns:updateRecipientProfileResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellFeederQueue">
<wsdl:documentation>Assigns the feeder configuration to a cell. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:updateCellFeederQueueRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellFeederQueueResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createMailing">
<wsdl:documentation>
                Creates a new mailing. Throws an exception if the alternate key already exists in the database (not null).
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createMailingRequest">
    </wsdl:input>
<wsdl:output message="tns:createMailingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupLinkById">
<wsdl:documentation>
            Returns a link that has the specified ID.
            Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:lookupLinkByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupLinkByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupIBQueryById">
<wsdl:documentation>
                Returns the properties of an InsightBuilder query identified by a given ID.
                Introduced in e-Dialog Web Services 1.4.
            </wsdl:documentation>
<wsdl:input message="tns:lookupIBQueryByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupIBQueryByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listContent">
<wsdl:documentation>Returns a list of content objects. Only a limited set of properties is returned. Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listContentRequest">
    </wsdl:input>
<wsdl:output message="tns:listContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listDataColumnsForAudience">
<wsdl:documentation>
                Gets a list of defined master data column information from the data dictionary for a specific list.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listDataColumnsForAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:listDataColumnsForAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createDataUploadConfigForNewAudience">
<wsdl:documentation>
                Creates a data upload configuration for a new audience list based on a defined Class ID.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createDataUploadConfigForNewAudienceRequest">
    </wsdl:input>
<wsdl:output message="tns:createDataUploadConfigForNewAudienceResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellWebAnalytics">
<wsdl:documentation>Assigns the specified web analytics token to a cell. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:updateCellWebAnalyticsRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellWebAnalyticsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="retrieveCellViewEReports">
<wsdl:documentation>
				Retrieves eReports data for mailing that match the
				mailing filtering criteria and the cell filtering criteria
				Filtering
				conditions on mailing IDs and mailing names are ORed.
				Filtering
				conditions on cell IDs and cell names are ORed.
				The filters above are
				then ANDed with UDFs and cell mailed date.
				This method only returns
				those cells of a mailing matching the search
				criteria.
				Introduced in
				e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:retrieveCellViewEReportsRequest">
    </wsdl:input>
<wsdl:output message="tns:retrieveCellViewEReportsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listDataColumnsForCell">
<wsdl:documentation>
                Returns a list of all master database columns to which a symbol
                within the specified cell can be mapped (see mapSymbolToDataColumn).
                Assign audience lists to the cell before you call this function.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listDataColumnsForCellRequest">
    </wsdl:input>
<wsdl:output message="tns:listDataColumnsForCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="startExportJob">
<wsdl:documentation>
                Tries to start an export job for the specified cell.
                The call fails if there is an existing export job running from the same cell.
                The call also fails if there are no audiences associated with the cell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:startExportJobRequest">
    </wsdl:input>
<wsdl:output message="tns:startExportJobResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listCellsByFilter">
<wsdl:documentation>
            Returns a list of cells filtered by the specified settings.
            Returns only a limited set of cell properties. Filter settings are optional.
            Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listCellsByFilterRequest">
    </wsdl:input>
<wsdl:output message="tns:listCellsByFilterResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="retrieveMailingViewEReports">
<wsdl:documentation>
				(Deprecated. Use the service retrieveMailingViewEReportsUdfs)
				Retrieves eReports data for the specified mailing.
				Note that for this function, the filtering conditions on mailing IDs
				and
				mailing names are ORed together and ANDed with UDFs and
				cell
				mailed date period specified.
				For reports including rollups per cell,
				for example, Mailing_Cell or
				Mailing_Cell_Audience,
				this method
				returns all the cells of the mailing matching the search
				criteria.
				Even if only a single cell was mailed in the specified period for a
				mailing,
				all the cells of that mailing will be returned.
				Introduced in
				e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:retrieveMailingViewEReportsRequest">
    </wsdl:input>
<wsdl:output message="tns:retrieveMailingViewEReportsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateContent">
<wsdl:documentation>
                Updates the specified content object.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:updateContentRequest">
    </wsdl:input>
<wsdl:output message="tns:updateContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapGridColumnToSymbol">
<wsdl:documentation>
                Map a specific grid column to a symbol that is used in cell content.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:mapGridColumnToSymbolRequest">
    </wsdl:input>
<wsdl:output message="tns:mapGridColumnToSymbolResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="retrieveMailingViewEReportsUdfs">
<wsdl:documentation>
				In addition to returning all the information in retrieveMailingViewEReports, also returns information about
				10 UDFS for the mailing(s). Introduced in e-Dialog Web Services 1.4.2
			</wsdl:documentation>
<wsdl:input message="tns:retrieveMailingViewEReportsUdfsRequest">
    </wsdl:input>
<wsdl:output message="tns:retrieveMailingViewEReportsUdfsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listRTMQueues">
<wsdl:documentation>
                Provides a list of available realtime messaging queues.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:listRTMQueuesRequest">
    </wsdl:input>
<wsdl:output message="tns:listRTMQueuesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendProofsNow">
<wsdl:documentation>
                Sends proofs for the specified cell.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:sendProofsNowRequest">
    </wsdl:input>
<wsdl:output message="tns:sendProofsNowResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="cloneCell">
<wsdl:documentation>
                Creates a clone of the specified cell and places the new cell in the specified mailing. Returns the new cell's ID.
                Throws an exception if the cell being cloned is in Proofing or Mailing status, does not exist, or has been deleted.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:cloneCellRequest">
    </wsdl:input>
<wsdl:output message="tns:cloneCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="resumeCell">
<wsdl:documentation>
                Resume processing of a cell. A cell must be in the "Paused" state to be resumed.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:resumeCellRequest">
    </wsdl:input>
<wsdl:output message="tns:resumeCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listRTMConfigurations">
<wsdl:documentation>
                Provides a list of realtime messaging configurations.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:listRTMConfigurationsRequest">
    </wsdl:input>
<wsdl:output message="tns:listRTMConfigurationsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateGrid">
<wsdl:documentation>
                Updates a grid that is stored as rows.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:updateGridRequest">
    </wsdl:input>
<wsdl:output message="tns:updateGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteAllRTMVariations">
<wsdl:documentation>
                Removes all RTM variations from an RTM configuration.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:deleteAllRTMVariationsRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteAllRTMVariationsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="resetSymbolMap">
<wsdl:documentation>Automatically maps all data column symbols in the cell to the corresponding columns in the master database.
            Data column symbols that do not have a corresponding column are blank in the resulting email.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:resetSymbolMapRequest">
    </wsdl:input>
<wsdl:output message="tns:resetSymbolMapResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupAudienceByIds">
<wsdl:documentation>
                Retrieves complete information about an audience based on the a list of Audience IDs.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:lookupAudienceByIdsRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupAudienceByIdsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupRTMConfiguration">
<wsdl:documentation>
                Retrieves a realtime messaging configuration by message name.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:lookupRTMConfigurationRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupRTMConfigurationResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCellAdvancedOptions">
<wsdl:documentation>Lets you modify advanced cell configuration options, including the domains for handling unsubscribes and redirects,
 redirect expiration time, selection of Forward-to-a-Friend template, and error and event mailing. Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:updateCellAdvancedOptionsRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellAdvancedOptionsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getProofGroupOptions">
<wsdl:documentation>
                Returns the settings for the proof group specified, including whether to include in proofs,
                include in the final e-mail, and send multipart samples as text.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:getProofGroupOptionsRequest">
    </wsdl:input>
<wsdl:output message="tns:getProofGroupOptionsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupCellAdvancedOptionsById">
<wsdl:documentation>Returns the advanced cell configuration settings for the cell. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:lookupCellAdvancedOptionsByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupCellAdvancedOptionsByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateMailing">
<wsdl:documentation>
                Changes the properties of a mailing.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:updateMailingRequest">
    </wsdl:input>
<wsdl:output message="tns:updateMailingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listCellUdfCategoryNames">
<wsdl:documentation>
                Returns a list of category names for cell UDFs.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:listCellUdfCategoryNamesRequest">
    </wsdl:input>
<wsdl:output message="tns:listCellUdfCategoryNamesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listRealTimeMessageConfigurations">
<wsdl:documentation>
                (Deprecated. Use the service listRTMConfigurations)
                Provides a list of realtime messaging configurations.
                Introduced in e-Dialog Web Services 1.1
            </wsdl:documentation>
<wsdl:input message="tns:listRealTimeMessageConfigurationsRequest">
    </wsdl:input>
<wsdl:output message="tns:listRealTimeMessageConfigurationsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getMailingVolumeReport">
<wsdl:documentation>
                Returns mailing volume information over a specified date range.
                The report can be broken down by domain, cell (identifier), or time (day or hour) or
                some combination of these dimensions. Valid dimensions include CELLID, DOMAIN, TIME.
                For CELLID, you can use a cell identifier to limit the result to the specified cell.
                For DOMAIN, you can use a domain name (e.g., example.com) to limit the results to mail
                sent to the specified domain. Use '***OTHER***' for domains not tracked.
                For TIME, use HOUR or H to obtain volume broken down per hour; use DAY or D to obtain 
                volume broken down per day. The response will be broken down per day if you do not
                specify a value for this dimension.
		    Valid start and end date are required. Null is reserved for the future. 
	            Introduced in e-Dialog Web Services 1.4.
           </wsdl:documentation>
<wsdl:input message="tns:getMailingVolumeReportRequest">
    </wsdl:input>
<wsdl:output message="tns:getMailingVolumeReportResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateProofGroupSampleCIDs">
<wsdl:documentation>
                Updates the Lproof group with the list of CIDs.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:updateProofGroupSampleCIDsRequest">
    </wsdl:input>
<wsdl:output message="tns:updateProofGroupSampleCIDsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listMailingsByFilter">
<wsdl:documentation>
                Returns a list of mailings. Only a limited set of properties for each campaign are returned.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listMailingsByFilterRequest">
    </wsdl:input>
<wsdl:output message="tns:listMailingsByFilterResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listMailings">
<wsdl:documentation>
                (Deprecated. Use the service listMailingsByFilter)
                Returns a list of mailings. Only a limited set of properties for each campaign are returned.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listMailingsRequest">
    </wsdl:input>
<wsdl:output message="tns:listMailingsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listSymbolsInCell">
<wsdl:documentation>
                Lists all the symbols used in the cell. For example,
                if the symbol "_FIRSTNAME__" appears in the cell
                content, the list includes "FIRSTNAME".
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listSymbolsInCellRequest">
    </wsdl:input>
<wsdl:output message="tns:listSymbolsInCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listAudiences">
<wsdl:documentation>
                (Deprecated. Use the service listAudiencesByFilter)
        		Lists the available audiences, using the specified filter settings. Does not list audiences that have a status of ARCHIVE, ARCHIVED, INACTIVE, or DELETED.
        		The filter* arguments are optional arguments used to filter the results. Dates in date ranges are inclusive.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listAudiencesRequest">
    </wsdl:input>
<wsdl:output message="tns:listAudiencesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listAudienceClasses">
<wsdl:documentation>
                Lists all audience classes available in the master database.
                An audience class binds an audience list to a specific set of member columns in the master database.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listAudienceClassesRequest">
    </wsdl:input>
<wsdl:output message="tns:listAudienceClassesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupSymbolMap">
<wsdl:documentation>
                Returns a JSON structure of all current symbol mappings. See the
                Developer's Guide for a description of the JSON data structure and
                valid symbol definitions.
                In a newly created cell (before calling resetSymbolMap) the structure
                shows each symbol mapped to an empty literal value.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupSymbolMapRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupSymbolMapResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupCellByAlternateKey">
<wsdl:documentation>
            Returns a full set of cell properties.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupCellByAlternateKeyRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupCellByAlternateKeyResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="retrieveEReports">
<wsdl:documentation>
				Retrieves eReports data for a particular mailing
				and a particular report
				type.
				Introduced in e-Dialog Web Services 1.3.
			</wsdl:documentation>
<wsdl:input message="tns:retrieveEReportsRequest">
    </wsdl:input>
<wsdl:output message="tns:retrieveEReportsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupRecipientAudienceProfile">
<wsdl:documentation>
                    Look up member properties data. Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:lookupRecipientAudienceProfileRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupRecipientAudienceProfileResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapAllGridColumnsToSymbols">
<wsdl:documentation>
                Maps all the columns in a grid to symbols in the content.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:mapAllGridColumnsToSymbolsRequest">
    </wsdl:input>
<wsdl:output message="tns:mapAllGridColumnsToSymbolsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="clearSymbolMap">
<wsdl:documentation>
				Removes all symbol mappings.
                Introduced in e-Dialog Web Services 1.3.
			</wsdl:documentation>
<wsdl:input message="tns:clearSymbolMapRequest">
    </wsdl:input>
<wsdl:output message="tns:clearSymbolMapResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendMailingAsScheduled">
<wsdl:documentation>
                Attempts to asynchronously mail all cells in a mailing at the
                time previously set for merging and mailing. Does not require
                that the cells have been proofed.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:sendMailingAsScheduledRequest">
    </wsdl:input>
<wsdl:output message="tns:sendMailingAsScheduledResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupContentById">
<wsdl:documentation>Returns the content object that has the specified ID. Introduced in e-Dialog Web Services 1.0.</wsdl:documentation>
<wsdl:input message="tns:lookupContentByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupContentByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listGridColumns">
<wsdl:documentation>
                Lists all the columns in the grid,  excluding the key column.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listGridColumnsRequest">
    </wsdl:input>
<wsdl:output message="tns:listGridColumnsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="unhideContent">
<wsdl:documentation>
                Mark content as unhidden so that it appears in listContent results.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:unhideContentRequest">
    </wsdl:input>
<wsdl:output message="tns:unhideContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listContentAlt">
<wsdl:documentation>Returns a list of content objects. Returns only a limited set of properties. Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:listContentAltRequest">
    </wsdl:input>
<wsdl:output message="tns:listContentAltResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupAudienceByAlternateKey">
<wsdl:documentation>
                Looks up full information about an audience based on the alternate key.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupAudienceByAlternateKeyRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupAudienceByAlternateKeyResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listCells">
<wsdl:documentation>
                (Deprecated. Use the service listCellsByFilter)
                Returns a list of cells filtered by the specified settings. 
                Returns only a limited set of cell properties. Filter settings are optional.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listCellsRequest">
    </wsdl:input>
<wsdl:output message="tns:listCellsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listMailingsByFilterAndMailingType">
<wsdl:documentation>
				Returns a list of mailings. Only a limited set of properties for each
				campaign are returned.
				Allows filtering by specific mailing type.
            </wsdl:documentation>
<wsdl:input message="tns:listMailingsByFilterAndMailingTypeRequest">
    </wsdl:input>
<wsdl:output message="tns:listMailingsByFilterAndMailingTypeResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateCell">
<wsdl:documentation>
                Updates a cell's main properties. Throws an exception if the domain
                name of the fromAddress is not included in the set of supported
                domain names and does not pass a basic validation check.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:updateCellRequest">
    </wsdl:input>
<wsdl:output message="tns:updateCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getGoodMailHeader">
<wsdl:documentation>
            (Deprecated. GoodMail no longer exists.)
            Returns e-mail headers for use in GoodMail. GoodMail provides a way to guarantee the delivery of a message to an inbox.
You can use the results of this function as the parameter to updateCellHeaders(). Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:getGoodMailHeaderRequest">
    </wsdl:input>
<wsdl:output message="tns:getGoodMailHeaderResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listSymbolsInContent">
<wsdl:documentation>
                Returns a  list of symbols found in a content object.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listSymbolsInContentRequest">
    </wsdl:input>
<wsdl:output message="tns:listSymbolsInContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listWebAnalyticsTokens">
<wsdl:documentation>Returns a list of available web analytics vendors and their tokens. Introduced in e-Dialog Web Services 1.1.</wsdl:documentation>
<wsdl:input message="tns:listWebAnalyticsTokensRequest">
    </wsdl:input>
<wsdl:output message="tns:listWebAnalyticsTokensResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteCampaign">
<wsdl:documentation>
            Deletes a campaign. Throws an exception on failure (the 
            campaign does not exist, was previously deleted, or has any 
            mailings or cells that are in a state in which they cannot be 
            deleted (actively mailing or proofing).
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:deleteCampaignRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteCampaignResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteRTMConfiguration">
<wsdl:documentation>
                Deletes a realtime messaging configuration.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:deleteRTMConfigurationRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteRTMConfigurationResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createCampaign">
<wsdl:documentation>
                Creates a new campaign.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createCampaignRequest">
    </wsdl:input>
<wsdl:output message="tns:createCampaignResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateLink">
<wsdl:documentation>
            Lets you modify the target URL, report name, expiration date, enabled status, and UDF for the specified reportable link.
            Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:updateLinkRequest">
    </wsdl:input>
<wsdl:output message="tns:updateLinkResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupRecipientProfile">
<wsdl:documentation>
                Look up recipient profile data. Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:lookupRecipientProfileRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupRecipientProfileResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listMailingUdfs">
<wsdl:documentation>
                Returns a list/array of all available values for each of the five mailing UDFs.
                Introduced in e-Dialog Web Services 1.0.
                </wsdl:documentation>
<wsdl:input message="tns:listMailingUdfsRequest">
    </wsdl:input>
<wsdl:output message="tns:listMailingUdfsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteContent">
<wsdl:documentation>Marks content object as deleted. Introduced in e-Dialog Web Services 1.0.</wsdl:documentation>
<wsdl:input message="tns:deleteContentRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createDataUploadConfigForExistingSuppression">
<wsdl:documentation>
                Creates a data upload configuration for an existing suppression list.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:createDataUploadConfigForExistingSuppressionRequest">
    </wsdl:input>
<wsdl:output message="tns:createDataUploadConfigForExistingSuppressionResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listRecipientHistory">
<wsdl:documentation>Returns a list of events filtered by a specified date range. Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:listRecipientHistoryRequest">
    </wsdl:input>
<wsdl:output message="tns:listRecipientHistoryResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupContentDeliveryPart">
<wsdl:documentation>
                Allows a user to retrieve the individual MIME representations for
                a piece of content related by a content ID. Currently, e-Dialog
                Web Services support "Text" content, "HTML"
                content, and "landing" page content parts.
                Introduced in e-Dialog Web Services 1.2.
            </wsdl:documentation>
<wsdl:input message="tns:lookupContentDeliveryPartRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupContentDeliveryPartResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="scheduleCell">
<wsdl:documentation>
                Lets you set the date when the merger will occur and, separately,
                when the cell will be sent.
                If the merger is not complete by the date specified as the dropDate,
                the cell is sent when the merger is complete.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:scheduleCellRequest">
    </wsdl:input>
<wsdl:output message="tns:scheduleCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="updateTabSeparatedGrid">
<wsdl:documentation>
                Updates a grid that is stored in tab-delimited format.
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:updateTabSeparatedGridRequest">
    </wsdl:input>
<wsdl:output message="tns:updateTabSeparatedGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listMasterUniqueKeyColumns">
<wsdl:documentation>
                Gets a list of defined master database unique key columns information.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listMasterUniqueKeyColumnsRequest">
    </wsdl:input>
<wsdl:output message="tns:listMasterUniqueKeyColumnsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listAudienceUdfs">
<wsdl:documentation>
                Returns a list/array of all available values for each of the five audience UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listAudienceUdfsRequest">
    </wsdl:input>
<wsdl:output message="tns:listAudienceUdfsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listCampaignUdfs">
<wsdl:documentation>
                Returns a list/array of all available values for each of the five campaign UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listCampaignUdfsRequest">
    </wsdl:input>
<wsdl:output message="tns:listCampaignUdfsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="cancelCell">
<wsdl:documentation>
                Cancels further processing of a cell. A cell must be in the PAUSED, MAILING, PROOFING, MERGING, or MERGED state to be cancelled.
                MERGING, MERGED status support added in e-Dialog Web Services 1.3.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:cancelCellRequest">
    </wsdl:input>
<wsdl:output message="tns:cancelCellResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="cloneMailing">
<wsdl:documentation>
                Clones a mailing.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:cloneMailingRequest">
    </wsdl:input>
<wsdl:output message="tns:cloneMailingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="createContent">
<wsdl:documentation>Creates a content object and stores it in the Content Library. Introduced in e-Dialog Web Services 1.0.</wsdl:documentation>
<wsdl:input message="tns:createContentRequest">
    </wsdl:input>
<wsdl:output message="tns:createContentResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupDataUploadStatus">
<wsdl:documentation>
                Gets the data upload status of the specified file.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupDataUploadStatusRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupDataUploadStatusResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="deleteMailing">
<wsdl:documentation>
                Deletes a mailing.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:deleteMailingRequest">
    </wsdl:input>
<wsdl:output message="tns:deleteMailingResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getExportJobStatus">
<wsdl:documentation>
                Returns the status of the export job associated with the cell (ExportJobStatus object).
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:getExportJobStatusRequest">
    </wsdl:input>
<wsdl:output message="tns:getExportJobStatusResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupTabSeparatedGrid">
<wsdl:documentation>
                Retrieves the rows and columns of a grid that is stored in tab-delimited format, including the key column. 
                For a grid stored in rows, use lookupGrid(). 
                For a grid stored in XML, use lookupXMLGrid().
                Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:lookupTabSeparatedGridRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupTabSeparatedGridResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="getProofSampleStatus">
<wsdl:documentation>
                Returns the status of the operation to build the proof sample.
                One of the following: "Processing", Processed", "Failed", "None".
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:getProofSampleStatusRequest">
    </wsdl:input>
<wsdl:output message="tns:getProofSampleStatusResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="setCellAudiences">
<wsdl:documentation>Sets the audience lists attached to a cell.
            The set of data fields available to custom publishing functions changes as audience lists change.
            If an audience change invalidates any existing field mappings, this function does not touch those mappings.
            However, adjusting audiences after setting field mappings may cause a cell to fail when mailed.
            Calling this function will always set the recipient and suppression audiences. 
            Call the service lookupCellById or lookupCellByAlternateKey to get the current set of recipient and suppression audiences associated
            with the cell.
            Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:setCellAudiencesRequest">
    </wsdl:input>
<wsdl:output message="tns:setCellAudiencesResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listCellUdfs">
<wsdl:documentation>
                Returns a list/array of all available values for each of the ten cell UDFs.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:listCellUdfsRequest">
    </wsdl:input>
<wsdl:output message="tns:listCellUdfsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="sendCellNow">
<wsdl:documentation>
                Attempts to asynchronously mail a cell. If the cell status is Mailing, Merging, or Merged, you cannot send the cell.
                Does not require that the cell has been proofed.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:sendCellNowRequest">
    </wsdl:input>
<wsdl:output message="tns:sendCellNowResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="buildRandomProofSample">
<wsdl:documentation>
                Generates the random sample file that contains a subset of rows
                from the full export file, with a maximum number of records set by the sampleSize.
                Introduced in e-Dialog Web Services 1.1.
            </wsdl:documentation>
<wsdl:input message="tns:buildRandomProofSampleRequest">
    </wsdl:input>
<wsdl:output message="tns:buildRandomProofSampleResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="mapSymbolToLiteralValue">
<wsdl:documentation>
                Maps the specified symbol to a literal value. The value appears
                in the resulting mail unless the literal value itself contains symbols.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:mapSymbolToLiteralValueRequest">
    </wsdl:input>
<wsdl:output message="tns:mapSymbolToLiteralValueResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="buildAudienceFromIBQuery">
<wsdl:documentation>
				Build an Audience based on a pre-defined Insight-Builder query.
				Introduced in e-Dialog Web Services 1.4.
            </wsdl:documentation>
<wsdl:input message="tns:buildAudienceFromIBQueryRequest">
    </wsdl:input>
<wsdl:output message="tns:buildAudienceFromIBQueryResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listRecipientCellEvents">
<wsdl:documentation>
                    Look up member properties data when a recipient clicks on a link in an e-mail. Introduced in e-Dialog Web Services 1.2. 
            </wsdl:documentation>
<wsdl:input message="tns:listRecipientCellEventsRequest">
    </wsdl:input>
<wsdl:output message="tns:listRecipientCellEventsResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="lookupAudienceById">
<wsdl:documentation>
                Retrieves complete information about an audience based on the ID.
                Introduced in e-Dialog Web Services 1.0.
            </wsdl:documentation>
<wsdl:input message="tns:lookupAudienceByIdRequest">
    </wsdl:input>
<wsdl:output message="tns:lookupAudienceByIdResponse">
    </wsdl:output>
</wsdl:operation>
<wsdl:operation name="listEReportTypes">
<wsdl:documentation>
				Returns a list of available eReports report types.
				Introduced in e-Dialog Web Services 1.3.
            </wsdl:documentation>
<wsdl:input message="tns:listEReportTypesRequest">
    </wsdl:input>
<wsdl:output message="tns:listEReportTypesResponse">
    </wsdl:output>
</wsdl:operation>
</wsdl:portType>
  <wsdl:binding name="eDialogWebServicesSoap11" type="tns:eDialogWebServices">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="mapSymbolToCustomFunction">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listContentUdfs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getIBJobStatus">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listProofGroupSampleCIDs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="buildPermutationProofSample">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendProofMessage">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listFeederQueues">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listAllDataColumns">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendMessage">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="canAccessClient">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="cloneAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createAudienceClass">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="hideContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="retrievePulseReport">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellMetering">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupLinkByEncodedURL">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listExportedDataColumns">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupMailingByAlternateKey">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createDataUploadConfigForNewSuppression">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listIBQueries">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendMailingLater">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapSymbolToDataColumn">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendMailingNow">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="setCellUnsubRules">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="setCellProofAddresses">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listProofSampleCIDs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createXmlGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="setSymbolMap">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateRTMVariations">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listSymbolsInText">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateRTMConfiguration">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupMailingById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCampaign">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createDataUploadConfigForExistingAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listProofAudienceEmails">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapAllGridColumnsToSymbolsByKeyLiteral">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createDataUploadConfigForGlobalUnsub">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupXmlGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellHeaders">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendCellLater">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listUdfCategoryNamesAndValues">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getProofSampleSetting">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getMemberCount">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendCellAsScheduled">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getDeliverabilityReport">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listLinks">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupCampaignById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupCellById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapSymbolToContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listUnsubTemplates">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listAvailableMeters">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listForwardToFriendTemplates">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="cancelExportJob">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="downloadAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listClients">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupCellStatus">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateXmlGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listCampaigns">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listGrids">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateContentDeliveryPart">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listAudiencesByFilter">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getEReportsRefreshStatus">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listDomains">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listMappingFunctionsForCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellDropDate">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="refreshEReports">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createTabSeparatedGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="pauseCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="scheduleMailing">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listGridKeyValues">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellConversionTracking">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="promoteRTMTestCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapGridColumnToSymbolByKeyLiteral">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createRTMConfiguration">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getCellContentId">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="wrapUrlsInText">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateRTMTestCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupContentByAlternateKey">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateProofGroupOptions">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateRecipientProfile">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellFeederQueue">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createMailing">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupLinkById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupIBQueryById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listDataColumnsForAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createDataUploadConfigForNewAudience">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellWebAnalytics">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="retrieveCellViewEReports">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listDataColumnsForCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="startExportJob">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listCellsByFilter">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="retrieveMailingViewEReports">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapGridColumnToSymbol">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="retrieveMailingViewEReportsUdfs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listRTMQueues">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendProofsNow">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="cloneCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="resumeCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listRTMConfigurations">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteAllRTMVariations">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="resetSymbolMap">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupAudienceByIds">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupRTMConfiguration">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCellAdvancedOptions">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getProofGroupOptions">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupCellAdvancedOptionsById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateMailing">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listCellUdfCategoryNames">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listRealTimeMessageConfigurations">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getMailingVolumeReport">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateProofGroupSampleCIDs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listMailingsByFilter">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listMailings">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listSymbolsInCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listAudiences">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listAudienceClasses">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupSymbolMap">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupCellByAlternateKey">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="retrieveEReports">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupRecipientAudienceProfile">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapAllGridColumnsToSymbols">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="clearSymbolMap">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendMailingAsScheduled">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupContentById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listGridColumns">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="unhideContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listContentAlt">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupAudienceByAlternateKey">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listCells">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listMailingsByFilterAndMailingType">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getGoodMailHeader">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listSymbolsInContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listWebAnalyticsTokens">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteCampaign">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteRTMConfiguration">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createCampaign">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateLink">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupRecipientProfile">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listMailingUdfs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createDataUploadConfigForExistingSuppression">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listRecipientHistory">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupContentDeliveryPart">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="scheduleCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="updateTabSeparatedGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listMasterUniqueKeyColumns">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listAudienceUdfs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listCampaignUdfs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="cancelCell">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="cloneMailing">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="createContent">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupDataUploadStatus">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="deleteMailing">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getExportJobStatus">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupTabSeparatedGrid">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="getProofSampleStatus">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="setCellAudiences">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listCellUdfs">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="sendCellNow">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="buildRandomProofSample">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="mapSymbolToLiteralValue">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="buildAudienceFromIBQuery">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listRecipientCellEvents">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="lookupAudienceById">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
    <wsdl:operation name="listEReportTypes">
<soap:operation soapAction=""/>
<wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
<wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
</wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SdkService">
<wsdl:port binding="tns:eDialogWebServicesSoap11" name="eDialogWebServicesSoap11">
      <soap:address location="https://sdk-staging.e-dialog.com:443/edialog-webservices/"/>
    </wsdl:port>
</wsdl:service>
</wsdl:definitions>